{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":74696,"databundleVersionId":8151114,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Traffic Volume Prediction script contains data processing, model development, model improvement and evaluation, feature selection and engineering","metadata":{}},{"cell_type":"code","source":"# import necessary library and functions\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import mutual_info_regression, SelectPercentile, SelectKBest\nfrom sklearn.feature_selection import f_regression","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:17:51.850829Z","iopub.execute_input":"2024-04-12T15:17:51.851537Z","iopub.status.idle":"2024-04-12T15:17:53.749106Z","shell.execute_reply.started":"2024-04-12T15:17:51.851500Z","shell.execute_reply":"2024-04-12T15:17:53.747693Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import warnings\n\n# Suppress all warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:17:53.751020Z","iopub.execute_input":"2024-04-12T15:17:53.751537Z","iopub.status.idle":"2024-04-12T15:17:53.756920Z","shell.execute_reply.started":"2024-04-12T15:17:53.751507Z","shell.execute_reply":"2024-04-12T15:17:53.755685Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"## 1. Data pre-processing","metadata":{"id":"nmmr2_EpuuRL"}},{"cell_type":"markdown","source":"## 1.a Data loading and QC","metadata":{}},{"cell_type":"code","source":"# Reading the Training Data\ndf = pd.read_csv(\"/kaggle/input/123ofai-predict-the-traffic-volume/train_set_dirty.csv\")","metadata":{"id":"m48BNoQUk9x-","execution":{"iopub.status.busy":"2024-04-12T15:17:58.060495Z","iopub.execute_input":"2024-04-12T15:17:58.061200Z","iopub.status.idle":"2024-04-12T15:17:58.187345Z","shell.execute_reply.started":"2024-04-12T15:17:58.061163Z","shell.execute_reply":"2024-04-12T15:17:58.186097Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# 1. Displaying the first 10 records\ndf.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:17:59.276013Z","iopub.execute_input":"2024-04-12T15:17:59.276436Z","iopub.status.idle":"2024-04-12T15:17:59.312104Z","shell.execute_reply.started":"2024-04-12T15:17:59.276402Z","shell.execute_reply":"2024-04-12T15:17:59.310702Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   traffic_volume holiday    temp  rain_1h  snow_1h  clouds_all weather_main  \\\n0          1493.0     NaN  287.15     0.00      0.0        90.0         Mist   \n1             NaN     NaN  282.25     0.00      0.0        90.0       Clouds   \n2             NaN     NaN     NaN     0.00      0.0        90.0      Drizzle   \n3          5626.0     NaN  252.08     0.00      0.0        20.0         Haze   \n4          5357.0     NaN  291.25     1.02      0.0         NaN         Rain   \n5          2827.0     NaN  272.79     0.00      0.0        90.0          NaN   \n6             NaN     NaN  292.61     0.00      0.0         8.0        Clear   \n7          4513.0     NaN  270.84     0.00      0.0        75.0       Clouds   \n8          3415.0     NaN  297.97     0.00      0.0        40.0       Clouds   \n9          1883.0     NaN  272.55     0.00      0.0         1.0          Fog   \n\n  weather_description         date_time  \n0                 NaN  18-09-2017 22:00  \n1     overcast clouds  23-05-2013 11:00  \n2             drizzle  04-06-2016 01:00  \n3                haze  04-01-2017 08:00  \n4       moderate rain  13-06-2013 13:00  \n5                snow  03-11-2017 20:00  \n6        sky is clear  08-06-2016 23:00  \n7       broken clouds  01-03-2017 10:00  \n8    scattered clouds  03-07-2016 13:00  \n9                 fog  26-11-2016 08:00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1493.0</td>\n      <td>NaN</td>\n      <td>287.15</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Mist</td>\n      <td>NaN</td>\n      <td>18-09-2017 22:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>282.25</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Clouds</td>\n      <td>overcast clouds</td>\n      <td>23-05-2013 11:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Drizzle</td>\n      <td>drizzle</td>\n      <td>04-06-2016 01:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5626.0</td>\n      <td>NaN</td>\n      <td>252.08</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>Haze</td>\n      <td>haze</td>\n      <td>04-01-2017 08:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5357.0</td>\n      <td>NaN</td>\n      <td>291.25</td>\n      <td>1.02</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>Rain</td>\n      <td>moderate rain</td>\n      <td>13-06-2013 13:00</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2827.0</td>\n      <td>NaN</td>\n      <td>272.79</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>NaN</td>\n      <td>snow</td>\n      <td>03-11-2017 20:00</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>292.61</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>08-06-2016 23:00</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4513.0</td>\n      <td>NaN</td>\n      <td>270.84</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>Clouds</td>\n      <td>broken clouds</td>\n      <td>01-03-2017 10:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3415.0</td>\n      <td>NaN</td>\n      <td>297.97</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Clouds</td>\n      <td>scattered clouds</td>\n      <td>03-07-2016 13:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1883.0</td>\n      <td>NaN</td>\n      <td>272.55</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Fog</td>\n      <td>fog</td>\n      <td>26-11-2016 08:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.b. Check dataset info - field types, non-null values, dtypes","metadata":{}},{"cell_type":"code","source":"# Null values in each column\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:01.505626Z","iopub.execute_input":"2024-04-12T15:18:01.506041Z","iopub.status.idle":"2024-04-12T15:18:01.531797Z","shell.execute_reply.started":"2024-04-12T15:18:01.506010Z","shell.execute_reply":"2024-04-12T15:18:01.530544Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"traffic_volume          3815\nholiday                38521\ntemp                    3809\nrain_1h                 3703\nsnow_1h                 3830\nclouds_all              3904\nweather_main            3909\nweather_description     3812\ndate_time               3880\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# data type of each column\nprint(df.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:02.378273Z","iopub.execute_input":"2024-04-12T15:18:02.378694Z","iopub.status.idle":"2024-04-12T15:18:02.386488Z","shell.execute_reply.started":"2024-04-12T15:18:02.378665Z","shell.execute_reply":"2024-04-12T15:18:02.385075Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"traffic_volume         float64\nholiday                 object\ntemp                   float64\nrain_1h                float64\nsnow_1h                float64\nclouds_all             float64\nweather_main            object\nweather_description     object\ndate_time               object\ndtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"# Shape of the data\nprint(df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:03.746065Z","iopub.execute_input":"2024-04-12T15:18:03.746532Z","iopub.status.idle":"2024-04-12T15:18:03.752821Z","shell.execute_reply.started":"2024-04-12T15:18:03.746497Z","shell.execute_reply":"2024-04-12T15:18:03.751431Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"(38563, 9)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.c Pre-processing (Cleaning): Address missing (NULL) values - drop or imputation","metadata":{}},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:05.575221Z","iopub.execute_input":"2024-04-12T15:18:05.575646Z","iopub.status.idle":"2024-04-12T15:18:05.584098Z","shell.execute_reply.started":"2024-04-12T15:18:05.575615Z","shell.execute_reply":"2024-04-12T15:18:05.582719Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"(38563, 9)"},"metadata":{}}]},{"cell_type":"code","source":"df_new = df.sort_values(by='date_time')","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:06.540987Z","iopub.execute_input":"2024-04-12T15:18:06.541471Z","iopub.status.idle":"2024-04-12T15:18:06.623809Z","shell.execute_reply.started":"2024-04-12T15:18:06.541435Z","shell.execute_reply":"2024-04-12T15:18:06.622371Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:07.845266Z","iopub.execute_input":"2024-04-12T15:18:07.845710Z","iopub.status.idle":"2024-04-12T15:18:07.871421Z","shell.execute_reply.started":"2024-04-12T15:18:07.845675Z","shell.execute_reply":"2024-04-12T15:18:07.870125Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"traffic_volume          3815\nholiday                38521\ntemp                    3809\nrain_1h                 3703\nsnow_1h                 3830\nclouds_all              3904\nweather_main            3909\nweather_description     3812\ndate_time               3880\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# drop rows contain NaN in the labels\ndf_new = df_new.dropna(subset = ['traffic_volume'])","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:09.120483Z","iopub.execute_input":"2024-04-12T15:18:09.120928Z","iopub.status.idle":"2024-04-12T15:18:09.138125Z","shell.execute_reply.started":"2024-04-12T15:18:09.120896Z","shell.execute_reply":"2024-04-12T15:18:09.136350Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# check holiday column unique values\ndf_new[\"holiday\"].unique()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:10.891040Z","iopub.execute_input":"2024-04-12T15:18:10.891455Z","iopub.status.idle":"2024-04-12T15:18:10.902868Z","shell.execute_reply.started":"2024-04-12T15:18:10.891423Z","shell.execute_reply":"2024-04-12T15:18:10.901489Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"array(['New Years Day', nan, 'Labor Day', 'Columbus Day', 'Veterans Day',\n       'Martin Luther King Jr Day', 'Washingtons Birthday', 'State Fair',\n       'Christmas Day', 'Memorial Day', 'Thanksgiving Day',\n       'Independence Day'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_new.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:11.950160Z","iopub.execute_input":"2024-04-12T15:18:11.950572Z","iopub.status.idle":"2024-04-12T15:18:11.987528Z","shell.execute_reply.started":"2024-04-12T15:18:11.950542Z","shell.execute_reply":"2024-04-12T15:18:11.986672Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 34748 entries, 35754 to 38559\nData columns (total 9 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   traffic_volume       34748 non-null  float64\n 1   holiday              34 non-null     object \n 2   temp                 31337 non-null  float64\n 3   rain_1h              31397 non-null  float64\n 4   snow_1h              31266 non-null  float64\n 5   clouds_all           31217 non-null  float64\n 6   weather_main         31231 non-null  object \n 7   weather_description  31325 non-null  object \n 8   date_time            31259 non-null  object \ndtypes: float64(5), object(4)\nmemory usage: 2.7+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:13.355302Z","iopub.execute_input":"2024-04-12T15:18:13.355713Z","iopub.status.idle":"2024-04-12T15:18:13.378821Z","shell.execute_reply.started":"2024-04-12T15:18:13.355670Z","shell.execute_reply":"2024-04-12T15:18:13.377643Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"traffic_volume             0\nholiday                34714\ntemp                    3411\nrain_1h                 3351\nsnow_1h                 3482\nclouds_all              3531\nweather_main            3517\nweather_description     3423\ndate_time               3489\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# drop rows contain NaN in the labels\ndf_new = df_new.dropna(subset = ['date_time'])","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:14.545189Z","iopub.execute_input":"2024-04-12T15:18:14.545561Z","iopub.status.idle":"2024-04-12T15:18:14.563873Z","shell.execute_reply.started":"2024-04-12T15:18:14.545534Z","shell.execute_reply":"2024-04-12T15:18:14.562478Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# # Convert 'date_time' to datetime format\n# df_new['date_time'] = pd.to_datetime(df_new['date_time'], errors='coerce', dayfirst=True)\n\n# # Filter rows where 'holiday' is not NaN\n# isHoliday = df_new['holiday'].notna()\n\n# # Extract date and holiday values where 'holiday' is not NaN\n# date = df_new.loc[isHoliday, 'date_time'].dt.date.values\n# holiday = df_new.loc[isHoliday, 'holiday'].values\n\n# mapping = dict(zip(date,holiday))\n\n# df_new['holiday'] = df_new['date_time'].dt.date.map(mapping)\n# df_new.loc[df_new['holiday'].isna(),'holiday'] = 'Work Day'\n\n# df_new['holiday'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:16.152782Z","iopub.execute_input":"2024-04-12T15:18:16.153188Z","iopub.status.idle":"2024-04-12T15:18:16.159689Z","shell.execute_reply.started":"2024-04-12T15:18:16.153157Z","shell.execute_reply":"2024-04-12T15:18:16.158298Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# Convert 'date_time' to datetime format\ndf_new['date_time'] = pd.to_datetime(df_new['date_time'], errors='coerce', dayfirst=True)\n\n# Filter rows where 'holiday' is not NaN\nisHoliday = df_new['holiday'].notna().copy()\n\n# Extract date and holiday values where 'holiday' is not NaN\ndate = df_new.loc[isHoliday, 'date_time'].dt.date.values\nholiday = df_new.loc[isHoliday, 'holiday'].values\n\n# Create mapping dictionary\nmapping = dict(zip(date, holiday))\n# if pd.NaT in mapping:\n#     mapping.pop(pd.NaT)\n\n# Map 'date_time' to 'holiday' using the mapping dictionary, filling NaN values with corresponding holidays\ndf_new.loc[:,'holiday'] = df_new['date_time'].dt.date.map(mapping)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:18.500340Z","iopub.execute_input":"2024-04-12T15:18:18.500788Z","iopub.status.idle":"2024-04-12T15:18:18.725652Z","shell.execute_reply.started":"2024-04-12T15:18:18.500754Z","shell.execute_reply":"2024-04-12T15:18:18.724013Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"df_new","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:19.070131Z","iopub.execute_input":"2024-04-12T15:18:19.070524Z","iopub.status.idle":"2024-04-12T15:18:19.099573Z","shell.execute_reply.started":"2024-04-12T15:18:19.070494Z","shell.execute_reply":"2024-04-12T15:18:19.098173Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"       traffic_volume        holiday    temp  rain_1h  snow_1h  clouds_all  \\\n35754          1439.0  New Years Day     NaN      0.0      NaN        58.0   \n32864           933.0  New Years Day  264.16      0.0      0.0        75.0   \n37345           372.0  New Years Day     NaN      0.0      0.0        90.0   \n27837           419.0  New Years Day  262.40      0.0      0.0        40.0   \n30753           939.0  New Years Day  260.29      0.0      0.0        20.0   \n...               ...            ...     ...      ...      ...         ...   \n4940           3635.0            NaN  251.93      0.0      NaN         1.0   \n6024           2731.0            NaN  249.79      NaN      0.0         5.0   \n30971          2483.0            NaN  249.61      0.0      0.0         5.0   \n1022           2041.0            NaN  249.50      0.0      0.0         1.0   \n11223          1580.0            NaN  249.45      0.0      0.0         1.0   \n\n      weather_main weather_description           date_time  \n35754       Clouds       broken clouds 2013-01-01 00:00:00  \n32864         Snow          heavy snow 2013-01-01 02:00:00  \n37345       Clouds     overcast clouds 2013-01-01 04:00:00  \n27837         Snow          heavy snow 2013-01-01 05:00:00  \n30753       Clouds          few clouds 2013-01-01 08:00:00  \n...            ...                 ...                 ...  \n4940         Clear        sky is clear 2017-12-31 15:00:00  \n6024         Clear        sky is clear 2017-12-31 20:00:00  \n30971        Clear        sky is clear 2017-12-31 21:00:00  \n1022         Clear        sky is clear 2017-12-31 22:00:00  \n11223        Clear        sky is clear 2017-12-31 23:00:00  \n\n[31259 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>35754</th>\n      <td>1439.0</td>\n      <td>New Years Day</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>58.0</td>\n      <td>Clouds</td>\n      <td>broken clouds</td>\n      <td>2013-01-01 00:00:00</td>\n    </tr>\n    <tr>\n      <th>32864</th>\n      <td>933.0</td>\n      <td>New Years Day</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>Snow</td>\n      <td>heavy snow</td>\n      <td>2013-01-01 02:00:00</td>\n    </tr>\n    <tr>\n      <th>37345</th>\n      <td>372.0</td>\n      <td>New Years Day</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Clouds</td>\n      <td>overcast clouds</td>\n      <td>2013-01-01 04:00:00</td>\n    </tr>\n    <tr>\n      <th>27837</th>\n      <td>419.0</td>\n      <td>New Years Day</td>\n      <td>262.40</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Snow</td>\n      <td>heavy snow</td>\n      <td>2013-01-01 05:00:00</td>\n    </tr>\n    <tr>\n      <th>30753</th>\n      <td>939.0</td>\n      <td>New Years Day</td>\n      <td>260.29</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>Clouds</td>\n      <td>few clouds</td>\n      <td>2013-01-01 08:00:00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4940</th>\n      <td>3635.0</td>\n      <td>NaN</td>\n      <td>251.93</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 15:00:00</td>\n    </tr>\n    <tr>\n      <th>6024</th>\n      <td>2731.0</td>\n      <td>NaN</td>\n      <td>249.79</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 20:00:00</td>\n    </tr>\n    <tr>\n      <th>30971</th>\n      <td>2483.0</td>\n      <td>NaN</td>\n      <td>249.61</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 21:00:00</td>\n    </tr>\n    <tr>\n      <th>1022</th>\n      <td>2041.0</td>\n      <td>NaN</td>\n      <td>249.50</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 22:00:00</td>\n    </tr>\n    <tr>\n      <th>11223</th>\n      <td>1580.0</td>\n      <td>NaN</td>\n      <td>249.45</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 23:00:00</td>\n    </tr>\n  </tbody>\n</table>\n<p>31259 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new['holiday'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:20.806392Z","iopub.execute_input":"2024-04-12T15:18:20.806801Z","iopub.status.idle":"2024-04-12T15:18:20.819386Z","shell.execute_reply.started":"2024-04-12T15:18:20.806771Z","shell.execute_reply":"2024-04-12T15:18:20.817877Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"array(['New Years Day', nan, 'Labor Day', 'Columbus Day', 'Veterans Day',\n       'Martin Luther King Jr Day', 'Washingtons Birthday', 'State Fair',\n       'Christmas Day', 'Memorial Day', 'Thanksgiving Day'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_new['day'] = df_new.date_time.dt.day\ndf_new['month'] = df_new.date_time.dt.month_name()\ndf_new['year'] = df_new.date_time.dt.year\ndf_new['weekday'] = df_new.date_time.dt.day_name()\ndf_new['hour'] = df_new.date_time.dt.hour","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:22.195709Z","iopub.execute_input":"2024-04-12T15:18:22.196102Z","iopub.status.idle":"2024-04-12T15:18:22.234273Z","shell.execute_reply.started":"2024-04-12T15:18:22.196071Z","shell.execute_reply":"2024-04-12T15:18:22.232714Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"df_new","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:23.906320Z","iopub.execute_input":"2024-04-12T15:18:23.907051Z","iopub.status.idle":"2024-04-12T15:18:23.940092Z","shell.execute_reply.started":"2024-04-12T15:18:23.906956Z","shell.execute_reply":"2024-04-12T15:18:23.938636Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"       traffic_volume        holiday    temp  rain_1h  snow_1h  clouds_all  \\\n35754          1439.0  New Years Day     NaN      0.0      NaN        58.0   \n32864           933.0  New Years Day  264.16      0.0      0.0        75.0   \n37345           372.0  New Years Day     NaN      0.0      0.0        90.0   \n27837           419.0  New Years Day  262.40      0.0      0.0        40.0   \n30753           939.0  New Years Day  260.29      0.0      0.0        20.0   \n...               ...            ...     ...      ...      ...         ...   \n4940           3635.0            NaN  251.93      0.0      NaN         1.0   \n6024           2731.0            NaN  249.79      NaN      0.0         5.0   \n30971          2483.0            NaN  249.61      0.0      0.0         5.0   \n1022           2041.0            NaN  249.50      0.0      0.0         1.0   \n11223          1580.0            NaN  249.45      0.0      0.0         1.0   \n\n      weather_main weather_description           date_time  day     month  \\\n35754       Clouds       broken clouds 2013-01-01 00:00:00    1   January   \n32864         Snow          heavy snow 2013-01-01 02:00:00    1   January   \n37345       Clouds     overcast clouds 2013-01-01 04:00:00    1   January   \n27837         Snow          heavy snow 2013-01-01 05:00:00    1   January   \n30753       Clouds          few clouds 2013-01-01 08:00:00    1   January   \n...            ...                 ...                 ...  ...       ...   \n4940         Clear        sky is clear 2017-12-31 15:00:00   31  December   \n6024         Clear        sky is clear 2017-12-31 20:00:00   31  December   \n30971        Clear        sky is clear 2017-12-31 21:00:00   31  December   \n1022         Clear        sky is clear 2017-12-31 22:00:00   31  December   \n11223        Clear        sky is clear 2017-12-31 23:00:00   31  December   \n\n       year  weekday  hour  \n35754  2013  Tuesday     0  \n32864  2013  Tuesday     2  \n37345  2013  Tuesday     4  \n27837  2013  Tuesday     5  \n30753  2013  Tuesday     8  \n...     ...      ...   ...  \n4940   2017   Sunday    15  \n6024   2017   Sunday    20  \n30971  2017   Sunday    21  \n1022   2017   Sunday    22  \n11223  2017   Sunday    23  \n\n[31259 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>35754</th>\n      <td>1439.0</td>\n      <td>New Years Day</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>58.0</td>\n      <td>Clouds</td>\n      <td>broken clouds</td>\n      <td>2013-01-01 00:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>32864</th>\n      <td>933.0</td>\n      <td>New Years Day</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>Snow</td>\n      <td>heavy snow</td>\n      <td>2013-01-01 02:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>37345</th>\n      <td>372.0</td>\n      <td>New Years Day</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Clouds</td>\n      <td>overcast clouds</td>\n      <td>2013-01-01 04:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>27837</th>\n      <td>419.0</td>\n      <td>New Years Day</td>\n      <td>262.40</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Snow</td>\n      <td>heavy snow</td>\n      <td>2013-01-01 05:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>30753</th>\n      <td>939.0</td>\n      <td>New Years Day</td>\n      <td>260.29</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>Clouds</td>\n      <td>few clouds</td>\n      <td>2013-01-01 08:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4940</th>\n      <td>3635.0</td>\n      <td>NaN</td>\n      <td>251.93</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 15:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>6024</th>\n      <td>2731.0</td>\n      <td>NaN</td>\n      <td>249.79</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 20:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>30971</th>\n      <td>2483.0</td>\n      <td>NaN</td>\n      <td>249.61</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 21:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>1022</th>\n      <td>2041.0</td>\n      <td>NaN</td>\n      <td>249.50</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 22:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>11223</th>\n      <td>1580.0</td>\n      <td>NaN</td>\n      <td>249.45</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-12-31 23:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>23</td>\n    </tr>\n  </tbody>\n</table>\n<p>31259 rows × 14 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ndf_new['day_time'] = df_new[['hour']].applymap(getDayTime)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:18:34.385198Z","iopub.execute_input":"2024-04-12T15:18:34.385616Z","iopub.status.idle":"2024-04-12T15:18:34.413808Z","shell.execute_reply.started":"2024-04-12T15:18:34.385570Z","shell.execute_reply":"2024-04-12T15:18:34.412487Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":"########################################","metadata":{}},{"cell_type":"code","source":"# check holiday column values\ndf_new['holiday'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:00.343017Z","iopub.execute_input":"2024-04-12T15:19:00.343495Z","iopub.status.idle":"2024-04-12T15:19:00.353961Z","shell.execute_reply.started":"2024-04-12T15:19:00.343462Z","shell.execute_reply":"2024-04-12T15:19:00.352429Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"array(['New Years Day', nan, 'Labor Day', 'Columbus Day', 'Veterans Day',\n       'Martin Luther King Jr Day', 'Washingtons Birthday', 'State Fair',\n       'Christmas Day', 'Memorial Day', 'Thanksgiving Day'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"# check the new data frame\ndf_new.isnull().sum(axis = 0)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:03.401900Z","iopub.execute_input":"2024-04-12T15:19:03.402411Z","iopub.status.idle":"2024-04-12T15:19:03.432930Z","shell.execute_reply.started":"2024-04-12T15:19:03.402376Z","shell.execute_reply":"2024-04-12T15:19:03.431687Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"traffic_volume             0\nholiday                30774\ntemp                    3059\nrain_1h                 3007\nsnow_1h                 3161\nclouds_all              3173\nweather_main            3167\nweather_description     3086\ndate_time                  0\nday                        0\nmonth                      0\nyear                       0\nweekday                    0\nhour                       0\nday_time                   0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# temperature is interpolate \n# df_new.loc[:, 'temp'] = df_new['temp'].interpolate(method='linear')\n# median is used instead of interpolate and it give better performance\n# df_new.loc[:, 'temp'] = df_new['temp'].fillna(df_new['temp'].median())\ndf_new.temp.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:07.082039Z","iopub.execute_input":"2024-04-12T15:19:07.082479Z","iopub.status.idle":"2024-04-12T15:19:07.092065Z","shell.execute_reply.started":"2024-04-12T15:19:07.082436Z","shell.execute_reply":"2024-04-12T15:19:07.090556Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"# fill na with mean values\n# df_new.loc[:, 'rain_1h'] = df_new['rain_1h'].fillna(df_new['rain_1h'].median())\n# df_new.loc[:, 'snow_1h'] = df_new['snow_1h'].fillna(df_new['snow_1h'].median())\n\ndf_new.rain_1h.fillna(method='ffill',inplace=True)\ndf_new.snow_1h.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:08.723170Z","iopub.execute_input":"2024-04-12T15:19:08.723561Z","iopub.status.idle":"2024-04-12T15:19:08.730960Z","shell.execute_reply.started":"2024-04-12T15:19:08.723534Z","shell.execute_reply":"2024-04-12T15:19:08.729534Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# clouds_all is interpolate \n# df_new.loc[:, 'clouds_all'] = df_new['clouds_all'].interpolate(method='linear')\n# as dates are not in order interpolate will not work so median is used\n# df_new.loc[:, 'clouds_all'] = df_new['clouds_all'].fillna(df_new['clouds_all'].median())\ndf_new.clouds_all.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:09.866887Z","iopub.execute_input":"2024-04-12T15:19:09.867519Z","iopub.status.idle":"2024-04-12T15:19:09.874075Z","shell.execute_reply.started":"2024-04-12T15:19:09.867487Z","shell.execute_reply":"2024-04-12T15:19:09.872888Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# isolate the key word in weather description\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].str.split().str[-1]","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:10.922342Z","iopub.execute_input":"2024-04-12T15:19:10.922777Z","iopub.status.idle":"2024-04-12T15:19:10.982126Z","shell.execute_reply.started":"2024-04-12T15:19:10.922747Z","shell.execute_reply":"2024-04-12T15:19:10.981167Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# convert to lower case\ndf_new.loc[:, 'weather_main'] = df_new['weather_main'].str.lower()\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].str.lower()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:12.033024Z","iopub.execute_input":"2024-04-12T15:19:12.033471Z","iopub.status.idle":"2024-04-12T15:19:12.060813Z","shell.execute_reply.started":"2024-04-12T15:19:12.033442Z","shell.execute_reply":"2024-04-12T15:19:12.059682Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"# replace weather main with weather description if nan\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].fillna(df_new['weather_main'])","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:12.781786Z","iopub.execute_input":"2024-04-12T15:19:12.782225Z","iopub.status.idle":"2024-04-12T15:19:12.794486Z","shell.execute_reply.started":"2024-04-12T15:19:12.782188Z","shell.execute_reply":"2024-04-12T15:19:12.793035Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"# replace weather main with weather description if nan\ndf_new.loc[:, 'weather_main'] = df_new['weather_main'].fillna(df_new['weather_description'])","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:14.806545Z","iopub.execute_input":"2024-04-12T15:19:14.807006Z","iopub.status.idle":"2024-04-12T15:19:14.822901Z","shell.execute_reply.started":"2024-04-12T15:19:14.806974Z","shell.execute_reply":"2024-04-12T15:19:14.821758Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"# drop nan rows for weather_main\ndf_new = df_new.dropna(subset=['weather_main'])","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:15.686640Z","iopub.execute_input":"2024-04-12T15:19:15.687044Z","iopub.status.idle":"2024-04-12T15:19:15.705827Z","shell.execute_reply.started":"2024-04-12T15:19:15.687012Z","shell.execute_reply":"2024-04-12T15:19:15.704431Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# Replace NaN with 0 and other values with 1 in holiday\ndf_new.loc[:, 'holiday'] = np.where(df_new['holiday'].isnull(), 0, 1)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:32.022086Z","iopub.execute_input":"2024-04-12T15:19:32.022588Z","iopub.status.idle":"2024-04-12T15:19:32.031297Z","shell.execute_reply.started":"2024-04-12T15:19:32.022552Z","shell.execute_reply":"2024-04-12T15:19:32.029567Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"df_new['holiday'] = df_new['holiday'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:33.283216Z","iopub.execute_input":"2024-04-12T15:19:33.283857Z","iopub.status.idle":"2024-04-12T15:19:33.292077Z","shell.execute_reply.started":"2024-04-12T15:19:33.283825Z","shell.execute_reply":"2024-04-12T15:19:33.290975Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:36.732255Z","iopub.execute_input":"2024-04-12T15:19:36.732658Z","iopub.status.idle":"2024-04-12T15:19:36.759971Z","shell.execute_reply.started":"2024-04-12T15:19:36.732629Z","shell.execute_reply":"2024-04-12T15:19:36.758917Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"traffic_volume         0\nholiday                0\ntemp                   1\nrain_1h                0\nsnow_1h                1\nclouds_all             0\nweather_main           0\nweather_description    0\ndate_time              0\nday                    0\nmonth                  0\nyear                   0\nweekday                0\nhour                   0\nday_time               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new = df_new.dropna()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:41.232131Z","iopub.execute_input":"2024-04-12T15:19:41.233044Z","iopub.status.idle":"2024-04-12T15:19:41.265906Z","shell.execute_reply.started":"2024-04-12T15:19:41.233006Z","shell.execute_reply":"2024-04-12T15:19:41.264805Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"# hour is converted to float from string \ndf_new['hour'] = df_new['hour'].astype(float)\n\n# check data types of hour\ndf_new['hour'].dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:53.172894Z","iopub.execute_input":"2024-04-12T15:19:53.173335Z","iopub.status.idle":"2024-04-12T15:19:53.182472Z","shell.execute_reply.started":"2024-04-12T15:19:53.173302Z","shell.execute_reply":"2024-04-12T15:19:53.181191Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"dtype('float64')"},"metadata":{}}]},{"cell_type":"code","source":"# check the null value in hour column\ndf_new[\"hour\"].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:19:55.102238Z","iopub.execute_input":"2024-04-12T15:19:55.103161Z","iopub.status.idle":"2024-04-12T15:19:55.111408Z","shell.execute_reply.started":"2024-04-12T15:19:55.103123Z","shell.execute_reply":"2024-04-12T15:19:55.110322Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.d. Pre-processing (Cleaning): Remove Duplicate Rows","metadata":{}},{"cell_type":"code","source":"df_new = df_new.drop_duplicates()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:08.362742Z","iopub.execute_input":"2024-04-12T15:20:08.363201Z","iopub.status.idle":"2024-04-12T15:20:08.409996Z","shell.execute_reply.started":"2024-04-12T15:20:08.363170Z","shell.execute_reply":"2024-04-12T15:20:08.408318Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"df_new","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:14.382074Z","iopub.execute_input":"2024-04-12T15:20:14.383356Z","iopub.status.idle":"2024-04-12T15:20:14.416352Z","shell.execute_reply.started":"2024-04-12T15:20:14.383315Z","shell.execute_reply":"2024-04-12T15:20:14.415340Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"       traffic_volume  holiday    temp  rain_1h  snow_1h  clouds_all  \\\n32864           933.0        1  264.16      0.0      0.0        75.0   \n37345           372.0        1  264.16      0.0      0.0        90.0   \n27837           419.0        1  262.40      0.0      0.0        40.0   \n30753           939.0        1  260.29      0.0      0.0        20.0   \n16985          1243.0        1  260.19      0.0      0.0        20.0   \n...               ...      ...     ...      ...      ...         ...   \n4940           3635.0        0  251.93      0.0      0.0         1.0   \n6024           2731.0        0  249.79      0.0      0.0         5.0   \n30971          2483.0        0  249.61      0.0      0.0         5.0   \n1022           2041.0        0  249.50      0.0      0.0         1.0   \n11223          1580.0        0  249.45      0.0      0.0         1.0   \n\n      weather_main weather_description           date_time  day     month  \\\n32864         snow                snow 2013-01-01 02:00:00    1   January   \n37345       clouds              clouds 2013-01-01 04:00:00    1   January   \n27837         snow                snow 2013-01-01 05:00:00    1   January   \n30753       clouds              clouds 2013-01-01 08:00:00    1   January   \n16985       clouds              clouds 2013-01-01 09:00:00    1   January   \n...            ...                 ...                 ...  ...       ...   \n4940         clear               clear 2017-12-31 15:00:00   31  December   \n6024         clear               clear 2017-12-31 20:00:00   31  December   \n30971        clear               clear 2017-12-31 21:00:00   31  December   \n1022         clear               clear 2017-12-31 22:00:00   31  December   \n11223        clear               clear 2017-12-31 23:00:00   31  December   \n\n       year  weekday  hour       day_time  \n32864  2013  Tuesday   2.0     Late Night  \n37345  2013  Tuesday   4.0  Early Morning  \n27837  2013  Tuesday   5.0  Early Morning  \n30753  2013  Tuesday   8.0        Morning  \n16985  2013  Tuesday   9.0        Morning  \n...     ...      ...   ...            ...  \n4940   2017   Sunday  15.0      Afternoon  \n6024   2017   Sunday  20.0          Night  \n30971  2017   Sunday  21.0          Night  \n1022   2017   Sunday  22.0          Night  \n11223  2017   Sunday  23.0          Night  \n\n[30833 rows x 15 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32864</th>\n      <td>933.0</td>\n      <td>1</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>snow</td>\n      <td>snow</td>\n      <td>2013-01-01 02:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>2.0</td>\n      <td>Late Night</td>\n    </tr>\n    <tr>\n      <th>37345</th>\n      <td>372.0</td>\n      <td>1</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>clouds</td>\n      <td>clouds</td>\n      <td>2013-01-01 04:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>4.0</td>\n      <td>Early Morning</td>\n    </tr>\n    <tr>\n      <th>27837</th>\n      <td>419.0</td>\n      <td>1</td>\n      <td>262.40</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>snow</td>\n      <td>snow</td>\n      <td>2013-01-01 05:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>5.0</td>\n      <td>Early Morning</td>\n    </tr>\n    <tr>\n      <th>30753</th>\n      <td>939.0</td>\n      <td>1</td>\n      <td>260.29</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>clouds</td>\n      <td>clouds</td>\n      <td>2013-01-01 08:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>8.0</td>\n      <td>Morning</td>\n    </tr>\n    <tr>\n      <th>16985</th>\n      <td>1243.0</td>\n      <td>1</td>\n      <td>260.19</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>clouds</td>\n      <td>clouds</td>\n      <td>2013-01-01 09:00:00</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>9.0</td>\n      <td>Morning</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4940</th>\n      <td>3635.0</td>\n      <td>0</td>\n      <td>251.93</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>clear</td>\n      <td>clear</td>\n      <td>2017-12-31 15:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>15.0</td>\n      <td>Afternoon</td>\n    </tr>\n    <tr>\n      <th>6024</th>\n      <td>2731.0</td>\n      <td>0</td>\n      <td>249.79</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>clear</td>\n      <td>clear</td>\n      <td>2017-12-31 20:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>20.0</td>\n      <td>Night</td>\n    </tr>\n    <tr>\n      <th>30971</th>\n      <td>2483.0</td>\n      <td>0</td>\n      <td>249.61</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>clear</td>\n      <td>clear</td>\n      <td>2017-12-31 21:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>21.0</td>\n      <td>Night</td>\n    </tr>\n    <tr>\n      <th>1022</th>\n      <td>2041.0</td>\n      <td>0</td>\n      <td>249.50</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>clear</td>\n      <td>clear</td>\n      <td>2017-12-31 22:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>22.0</td>\n      <td>Night</td>\n    </tr>\n    <tr>\n      <th>11223</th>\n      <td>1580.0</td>\n      <td>0</td>\n      <td>249.45</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>clear</td>\n      <td>clear</td>\n      <td>2017-12-31 23:00:00</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>23.0</td>\n      <td>Night</td>\n    </tr>\n  </tbody>\n</table>\n<p>30833 rows × 15 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.e. Pre-processing (Cleaning): Drop irrelevant columns (that you don't want to give as input to the model)","metadata":{}},{"cell_type":"code","source":"# drop the date and date_time column\n# df_new = df_new.drop(columns=['date_time','date','time','minute','weather_description'])\ndf_new = df_new.drop(columns=['date_time','weather_description'])","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:22.901923Z","iopub.execute_input":"2024-04-12T15:20:22.902903Z","iopub.status.idle":"2024-04-12T15:20:22.914165Z","shell.execute_reply.started":"2024-04-12T15:20:22.902856Z","shell.execute_reply":"2024-04-12T15:20:22.912638Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":"## 1.f. Pre-processing (Encoding): Convert categorical values to numeric","metadata":{}},{"cell_type":"code","source":"df_new['weather_main'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:26.521856Z","iopub.execute_input":"2024-04-12T15:20:26.522591Z","iopub.status.idle":"2024-04-12T15:20:26.542833Z","shell.execute_reply.started":"2024-04-12T15:20:26.522543Z","shell.execute_reply":"2024-04-12T15:20:26.541348Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"weather_main\nclouds          9817\nclear           8499\nmist            3803\nrain            3592\nsnow            1841\ndrizzle         1120\nhaze             904\nthunderstorm     637\nfog              605\nsmoke             14\nsquall             1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:27.661478Z","iopub.execute_input":"2024-04-12T15:20:27.661914Z","iopub.status.idle":"2024-04-12T15:20:27.670837Z","shell.execute_reply.started":"2024-04-12T15:20:27.661882Z","shell.execute_reply":"2024-04-12T15:20:27.669710Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main       object\nday                 int32\nmonth              object\nyear                int32\nweekday            object\nhour              float64\nday_time           object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df_new","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:28.522394Z","iopub.execute_input":"2024-04-12T15:20:28.523146Z","iopub.status.idle":"2024-04-12T15:20:28.553981Z","shell.execute_reply.started":"2024-04-12T15:20:28.523097Z","shell.execute_reply":"2024-04-12T15:20:28.552703Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"       traffic_volume  holiday    temp  rain_1h  snow_1h  clouds_all  \\\n32864           933.0        1  264.16      0.0      0.0        75.0   \n37345           372.0        1  264.16      0.0      0.0        90.0   \n27837           419.0        1  262.40      0.0      0.0        40.0   \n30753           939.0        1  260.29      0.0      0.0        20.0   \n16985          1243.0        1  260.19      0.0      0.0        20.0   \n...               ...      ...     ...      ...      ...         ...   \n4940           3635.0        0  251.93      0.0      0.0         1.0   \n6024           2731.0        0  249.79      0.0      0.0         5.0   \n30971          2483.0        0  249.61      0.0      0.0         5.0   \n1022           2041.0        0  249.50      0.0      0.0         1.0   \n11223          1580.0        0  249.45      0.0      0.0         1.0   \n\n      weather_main  day     month  year  weekday  hour       day_time  \n32864         snow    1   January  2013  Tuesday   2.0     Late Night  \n37345       clouds    1   January  2013  Tuesday   4.0  Early Morning  \n27837         snow    1   January  2013  Tuesday   5.0  Early Morning  \n30753       clouds    1   January  2013  Tuesday   8.0        Morning  \n16985       clouds    1   January  2013  Tuesday   9.0        Morning  \n...            ...  ...       ...   ...      ...   ...            ...  \n4940         clear   31  December  2017   Sunday  15.0      Afternoon  \n6024         clear   31  December  2017   Sunday  20.0          Night  \n30971        clear   31  December  2017   Sunday  21.0          Night  \n1022         clear   31  December  2017   Sunday  22.0          Night  \n11223        clear   31  December  2017   Sunday  23.0          Night  \n\n[30833 rows x 13 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32864</th>\n      <td>933.0</td>\n      <td>1</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>snow</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>2.0</td>\n      <td>Late Night</td>\n    </tr>\n    <tr>\n      <th>37345</th>\n      <td>372.0</td>\n      <td>1</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>clouds</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>4.0</td>\n      <td>Early Morning</td>\n    </tr>\n    <tr>\n      <th>27837</th>\n      <td>419.0</td>\n      <td>1</td>\n      <td>262.40</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>snow</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>5.0</td>\n      <td>Early Morning</td>\n    </tr>\n    <tr>\n      <th>30753</th>\n      <td>939.0</td>\n      <td>1</td>\n      <td>260.29</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>clouds</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>8.0</td>\n      <td>Morning</td>\n    </tr>\n    <tr>\n      <th>16985</th>\n      <td>1243.0</td>\n      <td>1</td>\n      <td>260.19</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>clouds</td>\n      <td>1</td>\n      <td>January</td>\n      <td>2013</td>\n      <td>Tuesday</td>\n      <td>9.0</td>\n      <td>Morning</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4940</th>\n      <td>3635.0</td>\n      <td>0</td>\n      <td>251.93</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>clear</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>15.0</td>\n      <td>Afternoon</td>\n    </tr>\n    <tr>\n      <th>6024</th>\n      <td>2731.0</td>\n      <td>0</td>\n      <td>249.79</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>clear</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>20.0</td>\n      <td>Night</td>\n    </tr>\n    <tr>\n      <th>30971</th>\n      <td>2483.0</td>\n      <td>0</td>\n      <td>249.61</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>clear</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>21.0</td>\n      <td>Night</td>\n    </tr>\n    <tr>\n      <th>1022</th>\n      <td>2041.0</td>\n      <td>0</td>\n      <td>249.50</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>clear</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>22.0</td>\n      <td>Night</td>\n    </tr>\n    <tr>\n      <th>11223</th>\n      <td>1580.0</td>\n      <td>0</td>\n      <td>249.45</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>clear</td>\n      <td>31</td>\n      <td>December</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>23.0</td>\n      <td>Night</td>\n    </tr>\n  </tbody>\n</table>\n<p>30833 rows × 13 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new['weather_main'] = df_new['weather_main'].astype('category').cat.codes + 1\ndf_new['day'] = df_new['day'].astype('category').cat.codes + 1\ndf_new['month'] = df_new['month'].astype('category').cat.codes + 1\ndf_new['year'] = df_new['year'].astype('category').cat.codes + 1\ndf_new['day_time'] = df_new['day_time'].astype('category').cat.codes + 1\ndf_new['weekday'] = df_new['weekday'].astype('category').cat.codes + 1\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:30.176865Z","iopub.execute_input":"2024-04-12T15:20:30.177265Z","iopub.status.idle":"2024-04-12T15:20:30.209806Z","shell.execute_reply.started":"2024-04-12T15:20:30.177236Z","shell.execute_reply":"2024-04-12T15:20:30.208024Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"# # one-hot coding for multiple columns\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['weather_main'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['day'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['month'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['year'],dtype=int)], axis=1)\n# df_new.drop(columns=['weather_main','day','month','year'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:38.463298Z","iopub.execute_input":"2024-04-12T15:20:38.463741Z","iopub.status.idle":"2024-04-12T15:20:38.471371Z","shell.execute_reply.started":"2024-04-12T15:20:38.463709Z","shell.execute_reply":"2024-04-12T15:20:38.469009Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"markdown","source":"# 2. Data understanding - Find out stats regarding your data (df.describe(), df.mean(), df.median())","metadata":{}},{"cell_type":"code","source":"# describe the data \ndf_new.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:40.162026Z","iopub.execute_input":"2024-04-12T15:20:40.162479Z","iopub.status.idle":"2024-04-12T15:20:40.236469Z","shell.execute_reply.started":"2024-04-12T15:20:40.162446Z","shell.execute_reply":"2024-04-12T15:20:40.235156Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"       traffic_volume       holiday          temp       rain_1h       snow_1h  \\\ncount    30833.000000  30833.000000  30833.000000  30833.000000  30833.000000   \nmean      3256.173548      0.015470    281.168721      0.131220      0.000227   \nstd       1986.941284      0.123416     13.384353      1.051594      0.008146   \nmin          0.000000      0.000000      0.000000      0.000000      0.000000   \n25%       1195.000000      0.000000    272.150000      0.000000      0.000000   \n50%       3368.000000      0.000000    282.420000      0.000000      0.000000   \n75%       4930.000000      0.000000    291.790000      0.000000      0.000000   \nmax       7280.000000      1.000000    308.430000     55.630000      0.510000   \n\n         clouds_all  weather_main           day         month          year  \\\ncount  30833.000000  30833.000000  30833.000000  30833.000000  30833.000000   \nmean      49.403658      3.570622     15.688905      6.339409      4.521908   \nstd       38.961350      2.773309      8.732039      3.422283      1.891016   \nmin        0.000000      1.000000      1.000000      1.000000      1.000000   \n25%        1.000000      1.000000      8.000000      3.000000      3.000000   \n50%       64.000000      2.000000     16.000000      6.000000      5.000000   \n75%       90.000000      6.000000     23.000000      9.000000      6.000000   \nmax      100.000000     11.000000     31.000000     12.000000      7.000000   \n\n            weekday          hour      day_time  \ncount  30833.000000  30833.000000  30833.000000  \nmean       3.992054     11.407583      3.632310  \nstd        1.996031      6.946546      1.766358  \nmin        1.000000      0.000000      1.000000  \n25%        2.000000      5.000000      2.000000  \n50%        4.000000     11.000000      4.000000  \n75%        6.000000     17.000000      5.000000  \nmax        7.000000     23.000000      6.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n      <td>30833.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3256.173548</td>\n      <td>0.015470</td>\n      <td>281.168721</td>\n      <td>0.131220</td>\n      <td>0.000227</td>\n      <td>49.403658</td>\n      <td>3.570622</td>\n      <td>15.688905</td>\n      <td>6.339409</td>\n      <td>4.521908</td>\n      <td>3.992054</td>\n      <td>11.407583</td>\n      <td>3.632310</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1986.941284</td>\n      <td>0.123416</td>\n      <td>13.384353</td>\n      <td>1.051594</td>\n      <td>0.008146</td>\n      <td>38.961350</td>\n      <td>2.773309</td>\n      <td>8.732039</td>\n      <td>3.422283</td>\n      <td>1.891016</td>\n      <td>1.996031</td>\n      <td>6.946546</td>\n      <td>1.766358</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1195.000000</td>\n      <td>0.000000</td>\n      <td>272.150000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>8.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3368.000000</td>\n      <td>0.000000</td>\n      <td>282.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>64.000000</td>\n      <td>2.000000</td>\n      <td>16.000000</td>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>11.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4930.000000</td>\n      <td>0.000000</td>\n      <td>291.790000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>90.000000</td>\n      <td>6.000000</td>\n      <td>23.000000</td>\n      <td>9.000000</td>\n      <td>6.000000</td>\n      <td>6.000000</td>\n      <td>17.000000</td>\n      <td>5.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7280.000000</td>\n      <td>1.000000</td>\n      <td>308.430000</td>\n      <td>55.630000</td>\n      <td>0.510000</td>\n      <td>100.000000</td>\n      <td>11.000000</td>\n      <td>31.000000</td>\n      <td>12.000000</td>\n      <td>7.000000</td>\n      <td>7.000000</td>\n      <td>23.000000</td>\n      <td>6.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# display some rows\ndf_new.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:40:44.829279Z","iopub.execute_input":"2024-04-12T18:40:44.829775Z","iopub.status.idle":"2024-04-12T18:40:44.851463Z","shell.execute_reply.started":"2024-04-12T18:40:44.829742Z","shell.execute_reply":"2024-04-12T18:40:44.850174Z"},"trusted":true},"execution_count":102,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"       traffic_volume  holiday    temp  rain_1h  snow_1h  clouds_all  \\\n32864           933.0        1  264.16      0.0      0.0        75.0   \n37345           372.0        1  264.16      0.0      0.0        90.0   \n27837           419.0        1  262.40      0.0      0.0        40.0   \n30753           939.0        1  260.29      0.0      0.0        20.0   \n16985          1243.0        1  260.19      0.0      0.0        20.0   \n\n       weather_main  day  month  year  weekday  hour  day_time  \n32864             9    1      5     2        6   2.0         4  \n37345             2    1      5     2        6   4.0         2  \n27837             9    1      5     2        6   5.0         2  \n30753             2    1      5     2        6   8.0         5  \n16985             2    1      5     2        6   9.0         5  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32864</th>\n      <td>933.0</td>\n      <td>1</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>9</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>6</td>\n      <td>2.0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>37345</th>\n      <td>372.0</td>\n      <td>1</td>\n      <td>264.16</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>6</td>\n      <td>4.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>27837</th>\n      <td>419.0</td>\n      <td>1</td>\n      <td>262.40</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>9</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>6</td>\n      <td>5.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>30753</th>\n      <td>939.0</td>\n      <td>1</td>\n      <td>260.29</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>6</td>\n      <td>8.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>16985</th>\n      <td>1243.0</td>\n      <td>1</td>\n      <td>260.19</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>5</td>\n      <td>2</td>\n      <td>6</td>\n      <td>9.0</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:20:45.786916Z","iopub.execute_input":"2024-04-12T15:20:45.787381Z"},"trusted":true},"execution_count":null,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main         int8\nday                  int8\nmonth                int8\nyear                 int8\nweekday              int8\nhour              float64\nday_time             int8\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"# 3. Data understanding - Make use of plots to build more understanding of the data**","metadata":{}},{"cell_type":"code","source":"# put some exploratory plots","metadata":{"execution":{"iopub.status.busy":"2024-04-11T22:49:52.155337Z","iopub.execute_input":"2024-04-11T22:49:52.155734Z","iopub.status.idle":"2024-04-11T22:49:52.162785Z","shell.execute_reply.started":"2024-04-11T22:49:52.155706Z","shell.execute_reply":"2024-04-11T22:49:52.161041Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# put  some exploratory plots","metadata":{"execution":{"iopub.status.busy":"2024-04-11T22:49:54.106541Z","iopub.execute_input":"2024-04-11T22:49:54.107028Z","iopub.status.idle":"2024-04-11T22:49:54.113182Z","shell.execute_reply.started":"2024-04-11T22:49:54.106989Z","shell.execute_reply":"2024-04-11T22:49:54.111526Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":"# 4. Find out which input features are the most important\n### Hint: Start out with df.corr(). Can visualise with seaborn library","metadata":{}},{"cell_type":"markdown","source":"## 4.a. Correlation Analysis","metadata":{}},{"cell_type":"code","source":"# calculate correlation\ncorrelation = df_new.corr()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:23:14.315858Z","iopub.execute_input":"2024-04-12T15:23:14.316293Z","iopub.status.idle":"2024-04-12T15:23:14.342055Z","shell.execute_reply.started":"2024-04-12T15:23:14.316265Z","shell.execute_reply":"2024-04-12T15:23:14.340649Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"# Plot the result\nplt.figure(figsize=(12, 10))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:23:14.911616Z","iopub.execute_input":"2024-04-12T15:23:14.912030Z","iopub.status.idle":"2024-04-12T15:23:16.069265Z","shell.execute_reply.started":"2024-04-12T15:23:14.911990Z","shell.execute_reply":"2024-04-12T15:23:16.068150Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# 5. Model development","metadata":{}},{"cell_type":"markdown","source":"## 5.a. Split data into train and avaluation set for assesing the model performenace","metadata":{}},{"cell_type":"code","source":"# 1. Divide dataframe into input and output\nx = df_new.drop(columns=['traffic_volume',\"snow_1h\",\"rain_1h\"])\ny = df_new['traffic_volume'] # Choose Output column to be predicted\nfeature_names = x.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:42:53.799372Z","iopub.execute_input":"2024-04-12T18:42:53.799785Z","iopub.status.idle":"2024-04-12T18:42:53.809200Z","shell.execute_reply.started":"2024-04-12T18:42:53.799757Z","shell.execute_reply":"2024-04-12T18:42:53.807731Z"},"trusted":true},"execution_count":104,"outputs":[]},{"cell_type":"markdown","source":"## 5.b. Base model creation","metadata":{}},{"cell_type":"code","source":"# Load necessary library and functions\nfrom sklearn import tree\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:23:41.111934Z","iopub.execute_input":"2024-04-12T15:23:41.112373Z","iopub.status.idle":"2024-04-12T15:23:41.262174Z","shell.execute_reply.started":"2024-04-12T15:23:41.112341Z","shell.execute_reply":"2024-04-12T15:23:41.261004Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"# scaling the data\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\nx = scaler.fit_transform(x)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:43:00.154855Z","iopub.execute_input":"2024-04-12T18:43:00.155528Z","iopub.status.idle":"2024-04-12T18:43:00.170159Z","shell.execute_reply.started":"2024-04-12T18:43:00.155495Z","shell.execute_reply":"2024-04-12T18:43:00.168738Z"},"trusted":true},"execution_count":105,"outputs":[]},{"cell_type":"code","source":"# spliting dataset for training and evaluartion\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=20)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:43:05.779123Z","iopub.execute_input":"2024-04-12T18:43:05.779804Z","iopub.status.idle":"2024-04-12T18:43:05.790976Z","shell.execute_reply.started":"2024-04-12T18:43:05.779771Z","shell.execute_reply":"2024-04-12T18:43:05.789590Z"},"trusted":true},"execution_count":106,"outputs":[]},{"cell_type":"code","source":"models = []\nmodels.append((\"SVR\",SVR()))\nmodels.append((\"LinearRegression\",LinearRegression()))\nmodels.append((\"KNeighborsRegression\", KNeighborsRegressor()))\nmodels.append((\"SGDRegressor\", SGDRegressor()))\nmodels.append((\"BayesianRidge\", BayesianRidge()))\nmodels.append((\"DecisionTreeRegressor\", DecisionTreeRegressor()))\nmodels.append((\"GradientBoostingRegressor\", GradientBoostingRegressor()))\nmodels.append((\"RandomForestRegressor\", RandomForestRegressor()))\n\n# evaluate each model in turn\nresults = []\nnames = []\ntable = []\n\n# loop to fit each model and evaluate\nfor name, model in models:\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    results.append((r2, mse))\n    names.append(name)\n    table = table + [(name, r2, mse)]\n    \n# bar plot of the results\npd.options.display.float_format = '{:.4f}'.format\nresults = pd.DataFrame(table, columns=['Model', 'R2', 'MSE'])\nresults","metadata":{"execution":{"iopub.status.busy":"2024-04-12T13:50:04.619234Z","iopub.execute_input":"2024-04-12T13:50:04.619594Z","iopub.status.idle":"2024-04-12T13:50:54.575997Z","shell.execute_reply.started":"2024-04-12T13:50:04.619567Z","shell.execute_reply":"2024-04-12T13:50:54.575153Z"},"trusted":true},"execution_count":77,"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"                       Model     R2          MSE\n0                        SVR 0.1984 3137597.2431\n1           LinearRegression 0.3220 2653722.1150\n2       KNeighborsRegression 0.7260 1072336.9086\n3               SGDRegressor 0.3189 2665700.2095\n4              BayesianRidge 0.3220 2653732.1817\n5      DecisionTreeRegressor 0.9267  286800.3037\n6  GradientBoostingRegressor 0.8930  418880.6132\n7      RandomForestRegressor 0.9606  154205.9781","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>R2</th>\n      <th>MSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SVR</td>\n      <td>0.1984</td>\n      <td>3137597.2431</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LinearRegression</td>\n      <td>0.3220</td>\n      <td>2653722.1150</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>KNeighborsRegression</td>\n      <td>0.7260</td>\n      <td>1072336.9086</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SGDRegressor</td>\n      <td>0.3189</td>\n      <td>2665700.2095</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>BayesianRidge</td>\n      <td>0.3220</td>\n      <td>2653732.1817</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>DecisionTreeRegressor</td>\n      <td>0.9267</td>\n      <td>286800.3037</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>GradientBoostingRegressor</td>\n      <td>0.8930</td>\n      <td>418880.6132</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>RandomForestRegressor</td>\n      <td>0.9606</td>\n      <td>154205.9781</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"model = RandomForestRegressor()\nmodel.fit(x_train, y_train)\n# predict the model\ny_pred = model.predict(x_test)\n# calculate the r2 score\nr2 = r2_score(y_test, y_pred)\n# calculate the mean squared error\nmse = mean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:43:10.694000Z","iopub.execute_input":"2024-04-12T18:43:10.694708Z","iopub.status.idle":"2024-04-12T18:43:20.909013Z","shell.execute_reply.started":"2024-04-12T18:43:10.694676Z","shell.execute_reply":"2024-04-12T18:43:20.907332Z"},"trusted":true},"execution_count":107,"outputs":[]},{"cell_type":"code","source":"# cross validation of the model with complete dataset\nscores = cross_val_score(model, x, y, cv=3)\nprint(scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:23:39.585483Z","iopub.execute_input":"2024-04-12T18:23:39.586247Z","iopub.status.idle":"2024-04-12T18:24:05.787898Z","shell.execute_reply.started":"2024-04-12T18:23:39.586198Z","shell.execute_reply":"2024-04-12T18:24:05.785908Z"},"trusted":true},"execution_count":101,"outputs":[{"name":"stdout","text":"[0.93052172 0.95279768 0.9142319 ]\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=1, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=5; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=2, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=2; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=3, min_samples_leaf=4, min_samples_split=10; total time=   0.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=1, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=2, min_samples_split=10; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=5; total time=   0.1s\n[CV] END max_depth=7, min_samples_leaf=4, min_samples_split=10; total time=   0.1s\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check the R2 and MSE again\nprint(r2)\nprint(mse)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:43:30.674469Z","iopub.execute_input":"2024-04-12T18:43:30.674886Z","iopub.status.idle":"2024-04-12T18:43:30.681917Z","shell.execute_reply.started":"2024-04-12T18:43:30.674858Z","shell.execute_reply":"2024-04-12T18:43:30.680507Z"},"trusted":true},"execution_count":108,"outputs":[{"name":"stdout","text":"0.9607891882729429\n153468.87355597535\n","output_type":"stream"}]},{"cell_type":"code","source":"# percentage deviation from the mean\nprint(round(np.sqrt(mse)/df_new['traffic_volume'].mean()*100,2))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T22:12:04.925665Z","iopub.execute_input":"2024-04-11T22:12:04.926048Z","iopub.status.idle":"2024-04-11T22:12:04.933731Z","shell.execute_reply.started":"2024-04-11T22:12:04.926019Z","shell.execute_reply":"2024-04-11T22:12:04.932168Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"13.95\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### function to fit RandomForestRegressor model and evaluate feature selection and other tuning","metadata":{}},{"cell_type":"code","source":"def evaluate_random_forest(x, y):\n    # spliting dataset for training and evaluartion\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=20)\n    # Create and fit the RandomForestRegressor model\n    model = RandomForestRegressor()\n    model.fit(x_train, y_train)\n    \n    # Predict using the trained model\n    y_pred = model.predict(x_test)\n    \n    # Calculate R2 score and mean squared error\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    \n    # Calculate cross-validation scores\n    scores = cross_val_score(model, x, y, cv=3)\n    \n    # Calculate percentage deviation from the mean\n    percentage_deviation = round(np.sqrt(mse) / df_new['traffic_volume'].mean() * 100, 2)\n    \n    # Store all metrics in a dictionary\n    metrics = {\n        'R2 Score': r2,\n        'Mean Squared Error': mse,\n        'Cross-Validation Scores': scores,\n        'Percentage Deviation from Mean': percentage_deviation\n    }\n    \n    return metrics","metadata":{"execution":{"iopub.status.busy":"2024-04-12T14:18:39.045941Z","iopub.execute_input":"2024-04-12T14:18:39.046635Z","iopub.status.idle":"2024-04-12T14:18:39.054923Z","shell.execute_reply.started":"2024-04-12T14:18:39.046603Z","shell.execute_reply":"2024-04-12T14:18:39.054134Z"},"trusted":true},"execution_count":83,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_random_forest(x, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T18:36:41.645127Z","iopub.execute_input":"2024-04-11T18:36:41.645562Z","iopub.status.idle":"2024-04-11T18:37:33.271087Z","shell.execute_reply.started":"2024-04-11T18:36:41.645531Z","shell.execute_reply":"2024-04-11T18:37:33.269924Z"},"trusted":true},"execution_count":135,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9476379884274966, 'Mean Squared Error': 207381.28759450995, 'Cross-Validation Scores': array([0.94392108, 0.94940096, 0.94418366]), 'Percentage Deviation from Mean': 13.99}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Mutual_info feature selection","metadata":{}},{"cell_type":"code","source":"# display the best selected features using mutual_info_regression\nx_mi = SelectPercentile(mutual_info_regression, percentile=60).fit(x, y)\nselected_features_mask = x_mi.get_support()\nselected_features = x.columns[selected_features_mask].tolist()\nprint(\"Selected Features:\", selected_features)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:14:06.045767Z","iopub.execute_input":"2024-04-12T07:14:06.046206Z","iopub.status.idle":"2024-04-12T07:14:09.072105Z","shell.execute_reply.started":"2024-04-12T07:14:06.046176Z","shell.execute_reply":"2024-04-12T07:14:09.070362Z"},"trusted":true},"execution_count":498,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[498], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m x_mi \u001b[38;5;241m=\u001b[39m SelectPercentile(mutual_info_regression, percentile\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m60\u001b[39m)\u001b[38;5;241m.\u001b[39mfit(x, y)\n\u001b[1;32m      3\u001b[0m selected_features_mask \u001b[38;5;241m=\u001b[39m x_mi\u001b[38;5;241m.\u001b[39mget_support()\n\u001b[0;32m----> 4\u001b[0m selected_features \u001b[38;5;241m=\u001b[39m \u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m[selected_features_mask]\u001b[38;5;241m.\u001b[39mtolist()\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSelected Features:\u001b[39m\u001b[38;5;124m\"\u001b[39m, selected_features)\n","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'columns'"],"ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute 'columns'","output_type":"error"}]},{"cell_type":"code","source":"# subset the dataset using selected features\nx_mi = SelectPercentile(mutual_info_regression, percentile=70).fit_transform(x, y)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T14:18:45.796008Z","iopub.execute_input":"2024-04-12T14:18:45.796374Z","iopub.status.idle":"2024-04-12T14:18:48.227566Z","shell.execute_reply.started":"2024-04-12T14:18:45.796346Z","shell.execute_reply":"2024-04-12T14:18:48.226703Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_random_forest(x_mi, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T14:18:50.877411Z","iopub.execute_input":"2024-04-12T14:18:50.878142Z","iopub.status.idle":"2024-04-12T14:19:16.978048Z","shell.execute_reply.started":"2024-04-12T14:18:50.878109Z","shell.execute_reply":"2024-04-12T14:19:16.977072Z"},"trusted":true},"execution_count":85,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9589688747876902, 'Mean Squared Error': 160593.476383509, 'Cross-Validation Scores': array([0.92462414, 0.95600776, 0.90575723]), 'Percentage Deviation from Mean': 12.31}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Selecting features using f_regression","metadata":{}},{"cell_type":"code","source":"# display the best features using f_regression\nmi = f_regression(x_mi, y)\nmi = pd.Series(mi[0])\nmi.index = x.columns\nmi = mi.sort_values(ascending=False)\nmi.plot.bar()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-10T16:38:45.553157Z","iopub.execute_input":"2024-04-10T16:38:45.553585Z","iopub.status.idle":"2024-04-10T16:38:46.434235Z","shell.execute_reply.started":"2024-04-10T16:38:45.553549Z","shell.execute_reply":"2024-04-10T16:38:46.432880Z"},"trusted":true},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# subset the dataset using selected features\nx_f = SelectPercentile(f_regression, percentile=80 ).fit_transform(x, y)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T14:19:31.115732Z","iopub.execute_input":"2024-04-12T14:19:31.116601Z","iopub.status.idle":"2024-04-12T14:19:31.129213Z","shell.execute_reply.started":"2024-04-12T14:19:31.116569Z","shell.execute_reply":"2024-04-12T14:19:31.127874Z"},"trusted":true},"execution_count":86,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_random_forest(x_f, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T14:19:36.105881Z","iopub.execute_input":"2024-04-12T14:19:36.106920Z","iopub.status.idle":"2024-04-12T14:20:00.060014Z","shell.execute_reply.started":"2024-04-12T14:19:36.106873Z","shell.execute_reply":"2024-04-12T14:20:00.059080Z"},"trusted":true},"execution_count":87,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9498070807157573, 'Mean Squared Error': 196452.214166311, 'Cross-Validation Scores': array([0.92913825, 0.9412904 , 0.91004156]), 'Percentage Deviation from Mean': 13.61}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Unsupervised ","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\nx_pca = PCA(n_components=9, svd_solver='full').fit_transform(x)\nevaluation_metrics = evaluate_random_forest(x_pca, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T14:20:09.315544Z","iopub.execute_input":"2024-04-12T14:20:09.315951Z","iopub.status.idle":"2024-04-12T14:21:26.966992Z","shell.execute_reply.started":"2024-04-12T14:20:09.315908Z","shell.execute_reply":"2024-04-12T14:21:26.965890Z"},"trusted":true},"execution_count":88,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.6221522093801082, 'Mean Squared Error': 1478874.6329889088, 'Cross-Validation Scores': array([0.38429838, 0.49758226, 0.42269804]), 'Percentage Deviation from Mean': 37.35}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Lasso","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression, Lasso\nw = []\nr2 = []\nalpha_list = [0, 0.1, 0.5, 2]\n\nfor alpha in alpha_list:\n    model = Lasso(alpha = alpha)\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    \n    r2.append(r2_score(y_test,y_pred))\n    w.append(model.coef_.tolist())\n    ","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:26:07.995634Z","iopub.execute_input":"2024-04-12T15:26:07.996120Z","iopub.status.idle":"2024-04-12T15:26:08.428166Z","shell.execute_reply.started":"2024-04-12T15:26:07.996086Z","shell.execute_reply":"2024-04-12T15:26:08.426501Z"},"trusted":true},"execution_count":67,"outputs":[]},{"cell_type":"code","source":"# Visualise Feature Selection\n\nplt.figure(figsize=(16, 10))\n\nfor i in range(len(alpha_list)):\n  plt.subplot(2, 2, i+1)\n  plt.bar(feature_names, w[i])\n  plt.title('Alpha = {}, r2 = {}'.format(alpha_list[i], r2[i]))\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:26:20.960189Z","iopub.execute_input":"2024-04-12T15:26:20.960618Z","iopub.status.idle":"2024-04-12T15:26:22.087017Z","shell.execute_reply.started":"2024-04-12T15:26:20.960568Z","shell.execute_reply":"2024-04-12T15:26:22.085674Z"},"trusted":true},"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x1000 with 4 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABRsAAANECAYAAAAws/ioAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAADg8klEQVR4nOzdd3xN9x/H8fcN2QsRGRWx91bVqFmKoqq2DrO0tUdVqdZoixptdeguqlGqdKEIVRQ1a+9qasaWxIqR7+8Pj5yfKxM3icTr+XjcxyP3e773ez7n3HPu/eRzz7AZY4wAAAAAAAAA4C45ZXYAAAAAAAAAALIHio0AAAAAAAAAHIJiIwAAAAAAAACHoNgIAAAAAAAAwCEoNgIAAAAAAABwCIqNAAAAAAAAAByCYiMAAAAAAAAAh6DYCAAAAAAAAMAhKDYCAAAAAAAAcAiKjbjv2Ww2jRgx4o5f26tXL8cGBAAAgGyFfBMAcD+h2IhsbfLkybLZbKpWrVpmh3JPWb16tWrUqCEPDw8FBgaqT58+On/+vMPnc/HiRX388cdq0KCBgoKC5O3trUqVKumTTz7R9evXHT6/tLjTZb906ZK6du2qsmXLytfXV15eXqpQoYImTZqkq1ev2vVdunSpunTpouLFi8vDw0OFCxfW888/r2PHjiUad/Hixda4OXLkUMGCBZONYf/+/WrVqpVy584tDw8P1ahRQ8uWLUuy7/fff6+HH35YuXLlkp+fn2rXrq358+fb9dm9e7deeeUVVaxYUd7e3goKClKTJk20YcOGROP9+OOPatiwoYKDg+Xq6qr8+fOrVatW2r59e6K+58+fV79+/ZQ/f365urqqVKlS+uSTT5JdrgTdunWTzWZT06ZNE02bNWuWnn32WRUrVkw2m0116tRJdpy4uDgNHjxYwcHBcnd3V7Vq1RQREZGo39WrVzVy5EgVLlxYrq6uKly4sN566y1du3YtyXE3bdqkZs2aKU+ePPLw8FDZsmX1wQcf2PUZPXq0Hn74Yfn7+8vNzU3FihVTv379dPLkSbt+t7PuCxYsKJvNluSjWLFiya4HAEDGIN9M2t3km5988olat26tAgUKyGazqVOnTukW5+nTpzV+/HjVqlVL/v7+ypUrlx5++GHNmjUr3eaZml9++UWVK1eWm5ubChQooOHDhyebn9zs6NGjevbZZ1WiRAl5e3srV65ceuihhzRt2jQZY+z6zp07V23btlXhwoXl4eGhEiVKaODAgTp37lyicW8nD9u4caMaNWokHx8feXt7q0GDBtq8ebNdn8jIyGRzG5vNpm7duiUaNy15mCRduXJFo0ePVsmSJeXm5qaAgAA1adJEhw8fTjbmt99+WzabTWXLlk00rU6dOknG2KhRo0R99+3bp3bt2il//vzy8PBQyZIlNWrUKF28eNGuX1rz/xEjRqS4nlatWmXXf9euXWrUqJG8vLyUJ08ePffcc4lyUCnt/1N88cUXql27tgICAuTq6qpChQqpc+fOioyMTHZdStKff/5pxXjq1KkU+yL7ypnZAQDpKTw8XAULFtS6deu0f/9+FS1aNLNDynSbN29WvXr1VKpUKb377rs6fPiwJkyYoH379um3335z6LwOHDig3r17q169ehowYIB8fHy0aNEi9ejRQ3/99ZemTZvm0Pml5m6W/dKlS9qxY4caN26sggULysnJSatXr1b//v21du1azZgxw+o7ePBgnTlzRq1bt1axYsV04MABffTRR5o3b542b96swMBAq++MGTM0a9YsVa5cWcHBwcnO/9ChQwoLC1OOHDk0aNAgeXp6asqUKWrQoIGWLl2qWrVqWX0//PBD9enTR02aNNHYsWN1+fJlTZ06VU2bNtWcOXPUokULSdKXX36pr776Si1btlSPHj0UHR2tzz77TA8//LAWLlyo+vXrW2Nu27ZNuXPnVt++fZU3b15FRUXp66+/1kMPPaQ1a9aoQoUKkqTr16+rYcOG2rBhg3r27KlixYpZ7/nZs2c1dOjQJJdvw4YNmjp1qtzc3JKc/sknn2jjxo2qWrWqTp8+neJ71alTJ/3www/q16+fihUrpqlTp6px48ZatmyZatSoYfV79tlnNXv2bHXp0kUPPvig/vrrL73++us6ePCgPv/8c7sxFy9erCeeeEKVKlXS66+/Li8vL/3zzz+JEteNGzeqYsWKateunby9vbVr1y598cUXmj9/vjZv3ixPT8/bXvfvv/9+on/O/vvvPw0bNkwNGjRIcV0AANIf+WZid5tvvvPOO4qNjdVDDz2U5I+1jrRmzRq99tpraty4sYYNG6acOXNqzpw5ateunXbu3KmRI0em6/xv9dtvv6l58+aqU6eOPvzwQ23btk1vvfWWTpw4keqPt6dOndLhw4fVqlUrFShQQFevXlVERIQ6deqkPXv2aPTo0Vbf7t27Kzg4WM8++6wKFCigbdu26aOPPtKCBQu0adMmubu7W33Tmodt2rRJNWrUUEhIiIYPH674+HhNnjxZtWvX1rp161SiRAlJkr+/v6ZPn57o9QsXLlR4eHii/CatedjVq1fVpEkTrV69Wt26dVP58uV19uxZrV27VtHR0cqfP3+ieR4+fFijR4+2crSk5M+fX2PGjLFruzVvP3TokB566CH5+vqqV69eypMnj9asWaPhw4dr48aN+vnnn62+ac3/W7RokeTnydChQ3X+/HlVrVrVbjlq1aolX19fjR49WufPn9eECRO0bds2rVu3Ti4uLlacaf2f4u+//1ahQoXUrFkz5c6dW//++6+++OILzZs3T1u2bEky9vj4ePXu3Vuenp66cOFCssuG+4ABsqkDBw4YSWbu3LnG39/fjBgxIsl+kszw4cPvaB6STM+ePe8iyoz3+OOPm6CgIBMdHW21ffHFF0aSWbRokUPmER8fby5evGhOnjxptm/fnmh6586djSSzb98+h8wvrdJj2Xv16mUkmWPHjllty5cvN9evX7frt3z5ciPJvPbaa3btR44cMVeuXDHGGNOkSRMTGhqa5Hx69OhhcubMaXbv3m21XbhwwYSEhJjKlSvb9S1WrJipWrWqiY+Pt9qio6ONl5eXadasmdW2YcMGExsba/faU6dOGX9/f/PII4+kuuxRUVEmZ86c5oUXXrDavv/+eyPJfPXVV3Z9W7Zsadzc3Mzx48cTjRMfH2/CwsJMly5dTGhoqGnSpEmiPgcPHrTWaZkyZUzt2rWTjGnt2rVGkhk/frzVdunSJVOkSBETFhZmta1bt85IMq+//rrd6wcOHGhsNpvZsmWL1RYdHW0CAgLMU089leh9TYsffvjBSDLfffed1Xa36/7NN980ksyqVatuOx4AgOOQbybtbnOuyMhIK4/x9PQ0HTt2dHiM169fN5cuXTIHDhwwkZGRdtPi4+PNo48+alxdXc358+cdPu+UlC5d2lSoUMFcvXrVanvttdeMzWYzu3btuqMxmzZtajw9Pc21a9estmXLliXqN23aNCPJfPHFF3btac3DGjdubHLnzm1OnTpltR09etR4eXmZFi1apBpnvXr1jI+Pj7l06ZLVdjt52DvvvGOcnZ3N2rVrU51XgrZt25pH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6TtlypQxjz76aKL2HTt2GEnm008/NcYYM2fOHCPJTJ8+3a7fp59+aiSZsmXLWm3ly5c3Hh4exsPDw/Tu3dvMmTPH9O7d20gy7dq1SzSvY8eO2a37/Pnzm1mzZqW4TMakvu4TDBw40EgyO3fuTHVMAED6Id9MmqPzTUedRi3JODk5mR07dqTa9/Tp0yZfvnymZs2aaR47LY8pU6akOM748eONJHPw4MFE06pWrWoefvjhNMUzZswYu/nWq1cvyTFv1bVrV5MjRw6zd+/eZPuklIeVK1fOFC9e3O507bi4OFOgQAEjyfzwww/JjlulShUTFBSU6FTptOZhc+fONZKMn5+fKVasmJkyZYqZMmWKKVasmHFxcbHbp4wx5qOPPjK+vr7mxIkTxpjkT5fu0qWLGTFihJkzZ4755ptvTLNmzYwk06ZNm0R933zzTePu7m637m+9hNKtbuc06u3btxtJ5pVXXrFrX79+fbL7+aBBg4wkK9e+nf8pEri6ulrL4+fnZz744INEfbZs2WJy5MhhXSYh4TOO06jvX9wgBtlSeHi4AgICVLduXUk3ToVo27atvv32W02cOFE5cuRIdYyePXvaPe/du7cmT56sBQsWqHz58lZ7/fr1VaRIEet5+fLl5ePjY3fKxc2/Hl29elUxMTEqWrSocuXKpU2bNum5555LdXkuXbqUasyFCxdOcXrCGK6urommubm5pWkeySlUqJAaNmyYar9evXpp586dmj9/vt3pIcm515a9bt26ioiI0Llz57R06VJt2bIl1Ysfr1ixQiNHjlSbNm306KOPpmk+t3rppZf066+/qm3btnr77bfl6empyZMnW3cvvjn+hDsK5s+fX02bNlVsbKzee+89tWjRQitXrkz2KMwTJ07o6aefVqFChfTKK68k2WfKlCmKiYnRgQMHNGXKFF26dEnXr1+3Tq15+umnNWrUKHXp0kUff/yxihUrpsWLF2vy5MmJ4ty7d68mTZqk7777Lsn35U5cunQp2ff45vk3btxYoaGhevnll+Xh4aEqVapo7dq1eu2115QzZ067OM+fP6+LFy/qxRdftO562KJFC125ckWfffaZRo0aZXdX6Dx58igiIkKXL1/W33//rblz56Z69820rHvpxilCM2fOVKVKlVSqVKm0rxgAgMORbyYtPfPNu1W7dm2VLl06xT4JR9edO3dOH374YZrGjYiISFO/pC4vdLPU1l3Cqbqpad++vR588EGdPHlS8+bN0/Hjx1Nd7zNmzNBXX32lV155xS6vuR09evTQSy+9pK5du+qVV15RfHy83nrrLesmP8nFsHfvXm3cuFH9+/dPdLp2WvOwhFwrNjZWf//9t0JCQiRJjz76qIoWLapx48bp22+/lXTjSL033nhDr7/+uvz9/VNcpq+++sru+XPPPafu3bvriy++UP/+/fXwww9b0woWLKhatWqpZcuW8vPz0/z58zV69GgFBgaqV69eaV2NyUq4TMOtR3+mtt0k9HF1db2t/ykS/Pbbb7p8+bJ27dqlb7/9Nsn/ffr06aPHH3+cmxfi/zK72gk42rVr10xQUJBp166d2bdvn/VIuHHFrRelVjK/NB84cMCu35UrV4yTk5PdzTAkmRdffDFRDKGhoaZTp07W84sXL5rXX3/d5M+f39hsNrtfuzp37uygJU9deh7ZmNTRZLcaN26ckWTefPPNO5rP3UivZX/77beNl5eX3Q1ibrZr1y6TJ08eU7FixUS/IN4qtV82P/zwQ+Pp6WltO0WLFrXW6XvvvWf1a9SoUaIjCE+fPm3y5MmT5K+wxhhz/vx5U7VqVePr62u2bduWYpwJzpw5YwICAszAgQPt2pcvX279gi3J+Pj4WBccf/LJJ+3ivPWX8Yw6stGYG78Oly5d2orT1dXVTJo0yeTLl89UqFDBbkxJZvny5YmWU5KZNm1aivGuWrXKSDK//vprktNvZ93//vvvyf7qDADIOOSbybuXj2zs0qVLqv0Sji5Ny9GgjuaoIxtv1a1bNxMSEpLk0a/G3Di7ws3NzTRs2DDVM49SysOMMWbo0KHG2dnZ7iyg1157zUgyP/74Y5KveeONN4wks2HDhiTnl5Y8LGG7q1u3bqIx6tatawoVKmQ9f/HFF03RokVNXFyc1ZbWG8EYY8zu3bsT/U/z3XffGXd3d3Po0CG7vp06dTIeHh52N825WVqPbIyPjzehoaF2Z98kuJ0jG41J+/8USdm/f79xc3OzO6p65syZxtnZ2ezZs8dq48hGcM1GZDu///67jh07ppkzZ6pYsWLWo02bNpKU5gt33yq5i1Qn96u1Mcb6u3fv3nr77bfVpk0bff/991q8eLEiIiLk5+eXphtNnDx5UlFRUak+Ujt6KigoSJKsXxdvduzYMQUHB6caS3JSuwbM1KlTNXjwYL344osaNmxYmse915e9VatWOn/+fJI3Pjl06JAaNGggX19fLViwQN7e3nc0jwS9evXS8ePHtXr1am3YsEG7d++Wr6+vJKl48eKSpAMHDmjhwoVq1qyZ3Wvz5MmjGjVqaNWqVYnGvXLlilq0aKGtW7fq559/VtmyZdMUT+7cufXoo48m2qdq1aqlAwcO6O+//9aff/6pI0eOWL/6JsT5+++/a+HCherbt68iIyOtx7Vr13Tp0iVFRkam+df7mwUFBSX7Hkuye5/LlCmj7du3a/v27Vq5cqWOHj2qbt266dSpU1acN7/m1gt+58uXT9KNa1ylpHr16goKCkrys+d21314eLicnJzUvn37FPsBANIX+Wby0jPfvFup5asjR47U5MmTNXbs2FSPBL1ZWtZbVFRUqkcXpme+eujQIa1YsSLRtC1btqhZs2YqW7asfvjhhzSdeZSSt99+W8ePH9fKlSu1detWrV+/3tr+bs6vbjZjxgyVKFFCVapUSTQtrXlYcv0S+ib027dvnz7//HP16dNHR48etXLQy5cv6+rVq4qMjNSZM2dSXMaEoyZv7jd58mRVqlRJ+fPnt+vbrFkzXbx48a6vVbpq1Sr9999/iY5qlFLfbvLkyWN31GNa/qdITpEiRVSpUiW7z7hBgwapdevWcnFxsdZnwg1kDh06pKNHj9728iLr4zRqZDvh4eHKly+fPv7440TT5s6dqx9//FGffvppqsnGvn37VKhQIev5/v37FR8fn+KFpJPzww8/qGPHjpo4caLVdvny5STv4pWUqlWr6r///ku13/DhwzVixIhkp5ctW1Y5c+bUhg0brGRYulHw2Lx5s12bI/388896/vnn1aJFiyTfl5Tc68uekDRGR0fbtZ8+fVoNGjRQXFycli5daiUBd8vT01NhYWHW8yVLlsjd3V2PPPKIJOn48eOSblz0+lZXr17VtWvX7Nri4+PVoUMHLV26VN9//71q1659W/FcunQp0bJLN/4puvkmQUuWLJF04zQwSTp48KCkG6fB3OrIkSMqVKiQ3nvvPfXr1++24qlYsaKWLVummJgYu5vErF271pp+M5vNZndK04IFCxQfH2/FKd24c3RERIR1YfIECYlTaqffSDf291vX0+2u+7i4OM2ZM0d16tTJ1H/UAADkm/divnm3Pv74Y40Y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hmjs2LF6/fXXtXPnTg0bNizJflFRUZKkU6dOafLkyfr4448VHR2tJ554wu7LLiWPPPKIYmNjFRcXp7Vr16pp06bKmTOnXZ9ff/1VJ0+e1HvvvSdnZ2d1795d77zzjmbNmqU///xTvXr1svreuj2fPXtWPj4+2rFjh7755hsFBwdLkvbs2aNjx47p6aeftl47bdo0OTs7q1ixYnb7YoLWrVvrxIkT+u2337Rx40ZVrlxZ9erV05kzZ6w++/fv15w5czR37tw0XzfodveB+Ph45c+fX7Nnz9bOnTsVGhqqjRs3qn///tZ+fnNMV69eVcGCBeXq6qr27durbNmyCgoK0qhRo7RkyZI07eOOXo4jR46ocePGqlq1qrZs2aJPPvlEX331ld56661EYyb1+ShJ69evt2I9duyY9Vy68/22devWun79un755Rer7cSJE5o/f766dOmilStXqkOHDurbt6927typzz77TFOnTtXbb79t9U/L58zFixf1zjvv6KuvvpKTk5OOHTsm6cb+mTdvXruEbPny5apTp47++ecfNWrUSC1bttTWrVuT3P579eqlNWvWaObMmdq6datat26tRo0aWf/83ezQoUOqWbOmypYtqx9++EGurq46dOiQWrRooSeeeEKbN2/W888/b5doStLly5dVpUoVzZ8/X9u3b1f37t313HPPad26dSmuw9OnT+vw4cPp9n2XIOFzv2HDhsqRI0ey33+O+O5LTkrb5q1+//13HT16VCtWrNC7776r4cOHq2nTpsqdO7fWrl2rF198US+88IIOHz5sxd2wYUN5e3tr5cqVWrVqlby8vNSoUaN76ldzZE3kpOmTk96L+ahkn5MGBwfL2dlZtWrV0qpVq1SyZElt2bJFGzdu1LJlyzIlJ701H50xY4Zy586dqN+RI0fUpUsXSVJISIgGDRokb29vXbt2Te3bt09TTko+mn3y0dtdlnsxJyUfTb98dP78+QoKCkrX77sE06ZN0+rVq5U3b1599dVX5KN3y+C21K5d29SoUcOurWrVqmbw4MFm8eLFJkeOHObgwYPWtB07dhhJZt26dcYYY4YPH24qVKhgTe/YsaN58sknjTHGxMbGGhcXF/P9999b00+fPm3c3d1N3759k41p/fr1RpKJjY01xhhz5MgRkyNHDrN27VpjjDFXrlwxefPmNVOnTk20LDeP++abb5oGDRrY9Tl06JCRZPbs2ZPk8l+7ds14enqa5557zmo7duyYkWTWrFljjDFm2bJlRpKZOXNmouWaNWuWXTyVKlVKdjmNMWb27NnGz8/Pej5lyhTj6+trPR8+fLjx8PAwMTExVtugQYNMtWrVUhw3KZLMjz/+aDZu3GgkmcjISGOMMaGhoebZZ581xtx4/0JDQ42/v7/55JNPjDHGtG7d2rRt29YYY8zevXuNJLNq1Spr3FOnThl3d3frff7ggw9MmTJljDHG/PTTT6ZatWrmySeftMarX7++GTp0aLJxxsTEGFdXV/PFF19YbQnrfMuWLUaS+fvvv40xxvTo0cNIsus7bNgwI8ns2LHDWr733nvPbh4VKlQww4cPN8YYs2jRIiPJvP7668YYY5o3b246duxoJJkZM2aYw4cPG0nm4YcfNl26dDHdu3e3G2vlypXGycnJXLp0KcnluXV7HjFihJFkzp49a4z5/3uesC3evE8l7IsJ8/Hx8TGXL1+2G79IkSLms88+M8bc2F6cnZ3NiRMnkl2/t7qTfeBmCft5w4YNTcuWLY0xN/aHHDlymMKFCyc5n4R1UrlyZTN48OA07+OOXI6hQ4eaEiVKmPj4eGv6xx9/bLy8vMz169eTHNMY+/fEmP/vVze72/32pZdeMo8//rj1fOLEiaZw4cImPj7e1KtXz4wePdqu//Tp001QUFCy4yX1OSPJbN682RhjTOXKlc348eONMTe2/7ffftu4uLiY2NhYa/vfu3ev6dq1a4rb/3///Wdy5Mhhjhw5YtenXr16ZsiQIda8fX19ze7du01ISIjp06eP3XswZMgQU7p0abvXDx482G6fSUqTJk3MwIEDU1yHbm5ud/V9d/P3W4K+ffua2rVrW88TPvfv5PvvTr/7kpPctnnrd3ZoaKi1zRtjTIkSJUzNmjWt5wn70nfffWeMubG93brvxMXFGXd3d7No0aI0xQYkhZw0fXLSezUfNcbY5aQ356PG3Hj/nJyczMcff2y1ZWROmlQ+asz/1/nN+ejQoUNN4cKFjSTz5ZdfGmNu5BQeHh5Gktm1axf5aCqySz56J8tyr+ak5KPpk48WLlz4rr/v0pqTli9fnnzUgTiy8Q6UL1/e7nlQUJBOnDihXbt2KSQkRCEhIda00qVLK1euXNq1a1eq4/7zzz+6cuWKqlWrZrXlyZNHJUqUsOu3ceNGPfHEEypQoIC8vb1Vu3ZtSTcOH5ak4OBgNWnSRF9//bWkG7/qxcXFqXXr1inOf8uWLVq2bJm8vLysR8mSJa3Yklr+HDlyyM/PT+XKlbPaAgICJMk6nDhBWFhYouW6db1UqVLF7vmSJUtUr149PfDAA/L29tZzzz2n06dPp3hKccGCBeXt7W09T3h/7lSFChVUr149lStXTq1bt1ZsbKzdrxJlypSxm8fNf+/atUs5c+a0e0/9/Pzslr127drauXOnTp48af0CVadOHf3xxx+6evWqVq9ebXeI96127dqluLg41atXL9VlSXgfK1SoYLUlXAR6x44daVofu3btko+PjzZt2iRjjFauXKmePXta05YvXy5/f3/t3btX4eHh+vLLL+Xu7m5tUw0bNlR8fLx12P+t23PNmjUlSYULF5a3t7f1i19S73ly+6J0Y3s+f/68/Pz87Lbpf//91257Dg0Nlb+/f5qWPan5pnUf+Pjjj1WlShWFhIToypUrWrp0qbXP5smTR76+vlbfjRs3atu2bdq8ebPdPu7r66sTJ07c8T5+N8uxa9cuhYWF2Z2i9Mgjj+j8+fPWL2a3jimlff+7m/22W7duWrx4sY4cOSLpxmkmnTp1ks1m05YtWzRq1Ci7bSDh6JmEbSotnzMuLi7WstWuXVt//PGHtf23aNFCpUqV0p9//qnly5crODhYxYoV05YtWzR16lS7ed+8/W/btk3Xr19X8eLF7fosX77cbhu9dOmSatasqRYtWlinGSbYtWuX3eeLZP9ZK904berNN99UuXLllCdPHnl5eWnRokXW9pfcOgwMDEy377ubValSJU3ff+n13Xe7ypQpIyen/6dPAQEBdvtNwr5082fR/v375e3tbb3HefLk0eXLl+3eZ+BOkJOmT056L+ajkn1OevLkSV26dElnz561pnt6etqdap6ROent5KO7du1S5cqVJf3/PXzkkUes9ZmW9UQ+mn3y0dtdlns1JyUfTZ98NOGowYzISYsUKUI+6kAUG++As7Oz3XObzZZhF2e9cOGCGjZsKB8fH4WHh2v9+vX68ccfJdlfxPT555/XzJkzdenSJU2ZMkVt27ZN8TRcSTp//rx16PPNj3379qlWrVpWv6SW/+a2hA+eO1knnp6e1t+RkZFq2rSpypcvrzlz5mjjxo3WhbJTOtTX0e9P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KDYCAAAAAAAAcAiKjQAAAAAAAAAcgmIjAAAAAAAAAIeg2AgAAAAAAADAISg2AgAAAAAAAHAIio0AAAAAAAAAHIJiIwAAAAAAAACHoNgIAAAAAAAAwCEoNiLbs9lsGjFixB2/tlevXo4NCAAAALgJ+SoAIDuh2IgsbfLkybLZbKpWrVpmh3JPWb16tWrUqCEPDw8FBgaqT58+On/+fJpea7PZknyMHTvW4XEeOnRII0eO1EMPPaTcuXMrb968qlOnjpYsWeLweaXVV199pVKlSsnNzU3FihXThx9+mKbX7dixQ61bt1bhwoXl4eGhvHnzqlatWvr111/t+sXHx2vq1Klq1qyZQkJC5OnpqbJly+qtt97S5cuXE437ySefqHXr1ipQoIBsNps6deqUbAwRERHW+547d261atVKkZGRifoVLFgwyff4xRdftOt37Ngxvfrqq6pbt668vb1ls9n0xx9/pLouzp07p3z58slms+mHH35IND0uLk6DBw9WcHCw3N3dVa1aNUVERNj1iYyMTHZbtNls6tatm9X3Xlj3586dU/fu3eXv7y9PT0/VrVtXmzZtSrJvbGysXnnlFRUqVEiurq564IEH1KpVK128eDHZ8bt16yabzaamTZsm20eS/vnnH7m5uclms2nDhg0p9gUAZAzyVXsXL17Uxx9/rAYNGigoKEje3t6qVKmSPvnkE12/ft3h87vd7/+MsGvXLjVq1EheXl7KkyePnnvuOZ08eTJNr+3fv78qV66sPHnyyMPDQ6VKldKIESMS5frr169Xr169VKZMGXl6eqpAgQJq06aN9u7dm2jMdevWqUePHqpSpYqcnZ1ls9mSnX90dLReeeUVFStWTO7u7goNDVXXrl118ODBFON+7LHHkiyMT506NcWcLzw83Oo7d+5ctW3b1sr5SpQooYEDB+rcuXN2Y/7xxx8pjvn222+naf5RUVF2416+fFljxoxR6dKl5eHhoQceeECtW7fWjh077PotXbpUXbp0UfHixeXh4aHChQvr+eef17Fjx+z63e6+cOzYMXXv3l2FChWSu7u7ihQpogEDBuj06dN2/Tp16pTk8pQsWTLRmG+//baaNWumgICAVH/0WLJkierWrau8efMqV65ceuihhzR9+vRk++P+ljOzAwDuRnh4uAoWLKh169Zp//79Klq0aGaHlOk2b96sevXqqVSpUnr33Xd1+PBhTZgwQfv27dNvv/2WpjEee+wxdejQwa6tUqVKDo/1559/1jvvvKPmzZurY8eOunbtmr755hs99thj+vrrr9W5c2eHzzMln332mV588UW1bNlSAwYM0MqVK9WnTx9dvHhRgwcPTvG1//33n2JjY9WxY0cFBwfr4sWLmjNnjpo1a6bPPvtM3bt3l3QjqejcubMefvhhvfjii8qXL5/WrFmj4cOHa+nSpfr999/tErx33nlHsbGxeuihhxIlKDebN2+ennzySVWuXFljx45VTEyMJk2apBo1aujvv/+Wv7+/Xf+KFStq4MCBdm3Fixe3e75nzx698847KlasmMqVK6c1a9akaT2+8cYbKRbOOnXqpB9++EH9+vVTsWLFNHXqVDVu3FjLli1TjRo1JEn+/v5JJi8LFy5UeHi4GjRoYLVl9rqPj49XkyZNtGXLFg0aNEh58+bV5MmTVadOHW3cuFHFihWz+kZHR6t27do6fPiwunfvrqJFi+rkyZNauXKl4uLi5OHhkWj8DRs2aOrUqXJzc0thrd/Qv39/5cyZU3Fxcan2BQBkDPJVewcOHFDv3r1Vr149DRgwQD4+Plq0aJF69Oihv/76S9OmTXPo/G73+z+9HT58WLVq1ZKvr69Gjx6t8+fPa8KECdq2bZvWrVsnFxeXFF+/fv161axZU507d5abm5v+/vtvjR07VkuWLNGKFSvk5HTjeKJ33nlHq1atUuvWrVW+fHlFRUXpo48+UuXKlfXXX3+pbNmy1pgLFizQl19+qfLly6tw4cJJFiSlGznPY489pp07d6pHjx4qXry49u/fr8mTJ2vRokXatWuXvL29E71u7ty5yeaRtWrVSjLne++997RlyxbVq1fPauvevbuCg4P17LPPqkCBAtq2bZs++ugjLViwQJs2bZK7u7skqVSpUkmOOX36dC1evNguj0wwatQoFSpUyK4tV65cds+feeYZ/fLLL+rWrZsqV66so0eP6uOPP1ZYWJi2bdum0NBQSdLgwYN15swZtW7dWsWKFdOBAwf00Ucfad68edq8ebMCAwMl3d6+cP78eYWFhenChQvq0aOHQkJCtGXLFn300UdatmyZNm7caL33kuTq6qovv/zSLn5fX99Eyz1s2DAFBgaqUqVKWrRoUaLpCX755Rc1b95cYWFhGjFihGw2m77//nt1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7eHhobVr12ry5MlydXXVRx99pJ07d+rrr7/WL7/8ooEDB6a4Dg8ePKj58+dr0aJFWrRokVatWqWxY8em+Tu4VWRkpDp27Kju3btr9+7d8vf3V2RkpGrWrKnWrVsrPj5e33//vb766it9/fXXmjZtmsNtSF27dtXmzZu1cOFCrV+/XsYYtWzZUteuXZOLi4saNmxo/ZifO3dOu3fv1pUrV7Rnzx5JNw6mderUkZeXV7IxDhkyRGPHjtUbb7yhXbt2adiwYUm2i4qKkiT9888/+vTTTzVp0iRFR0erdevWDge7lNx///26cOGCYmNjtWHDBj388MPKlSuXQ5sff/xRp0+f1vvvvy93d3c999xzevfddzVnzhz9+uuv6tOnj9X21u353Llz8vb21s6dOzV9+nQVLVpUkrR3715FRkbqqaeesj779ddfy93dXWXLlnXYFxO0b99ep06d0v/+9z9t2bJFtWrV0oMPPqizZ89abQ4cOKDvv/9eP/zwQ5qfG3S7+0B8fLyKFy+uuXPnateuXQoODtaWLVv06quvWvv5zTFdu3ZNJUuWlKenpzp27KgqVaooMDBQo0aN0rJly9K0j9u9HMePH1fLli1Vp04dbdu2TZ999pmmTJmit956K9E0k/p9lKRNmzZZsUZGRlrvpfTvt+3bt1dcXJwWLlxoDTt16pQWL16s7t27a82aNercubNeeeUV7dq1S59//rmmTZumt99+22qflt+Zy5cv691339WUKVPk6uqqyMhISTf2z8KFCzskZKtWrVLjxo118OBBNW/eXI8//ri2b9+e5Pbfp08frV+/XrNnz9b27dvVvn17NW/e3PrP382OHj2qBg0aqEqVKvruu+/k6empo0eP6rHHHlPr1q21detWPfvssw6JpiT9+++/ql27thYvXqwdO3boueeeU6dOnbRx48YU1+GZM2d07Ngxpx3vEiT87oeFhcnNzS3Z458dx77kpLRt3uqXX37RiRMntHr1ar333nsaPny4Hn74YRUsWFAbNmzQ888/r169eunYsWNW3GFhYcqfP7/WrFmjtWvXKl++fGrevHmWOmuO7Imc1Dk5aVbMRyXHnLRo0aJyd3dXw4YNtXbtWlWoUEHbtm3Tli1btGLFikzJSW/NR2fOnKmCBQsmanf8+HF1795dkhQUFKQBAwYof/78un79ujp27JimnJR8NOfko7e7LFkxJyUfdV4+unjxYgUGBjr1eJfg66+/1rp161S4cGFNmTKFfPROGdyWRo0amfr16zsMq1Onjhk0aJBZunSpcXNzM0eOHLHG7dy500gyGzduNMYYM3z4cFO9enVrfJcuXcwjjzxijDHmwoULxsPDw3z77bfW+DNnzpg8efKYV155JdmYNm3aZCSZCxcuGGOMOX78uHFzczMbNmwwxhhz9epVU7hwYTNt2rREy3LzdEePHm2aNWvm0Obo0aNGktm7d2+Sy3/9+nWTN29e06lTJ2tYZGSkkWTWr19vjDFmxYoVRpKZPXt2ouWaM2eOQzw1a9ZMdjmNMWbu3LmmUKFC1vupU6caHx8f6/3w4cONl5eXiYmJsYYNGDDAhISEpDjdpEgy8+bNM1u2bDGSzOHDh40xxgQHB5tnnnnGGHPj+wsODjZ+fn7ms88+M8YY0759e/Pkk08aY4zZt2+fkWTWrl1rTfeff/4xefLksb7njz76yFSuXNkYY8z8+fNNSEiIeeSRR6zpNW3a1AwdOjTZOGNiYoynp6f5v//7P2tYwjrftm2bkWT++OMPY4wxL774opHk0HbYsGFGktm5c6e1fO+//77DPKpXr26GDx9ujDHm559/NpLMG2+8YYwxpm3btqZLly5Gkpk5c6Y5duyYkWTq1q1runfvbp577jmHaa1Zs8a4urqaK1euJLk8t27PI0aMMJLMuXPnjDH/fecJ2+LN+1TCvpgwH29vb/Pvv/86TL9MmTLm888/N8bc2F7c3d3NqVOnkl2/t0rPPnCzhP08LCzMPP7448aYG/uDm5ubKV26dJLzSVgntWrVMoMGDUrzPm7ncgwdOtSUL1/exMfHW+MnTZpk8uXLZ+Li4pKcpjGO34kx/+1XN7vT/faFF14wLVq0sN5PnDjRlC5d2sTHx5sHH3zQvPPOOw7tZ8yYYQIDA5OdXlK/M5LM1q1bjTHG1KpVy4wfP94Yc2P7f/vtt42Hh4e5cOGCtf3v27fP9OjRI8Xt/++//zZubm7m+PHjDm0efPBBM2TIEGvePj4+Zs+ePSYoKMi8/PLLDt/BkCFDTKVKlRw+P2jQIId9JimtWrUyr732WorrMHfu3Hd0vLv5+JbglVdeMY0aNbLeJ/zup+f4l95jX3KS2zZvPWYHBwdb27wxxpQvX940aNDAep+wL82aNcsYc2N7u3XfiY2NNXny5DE///xzmmIDkkJO6pycNKvmo8YYh5z05nzUmBvfn6urq5k0aZI1LCNz0qTyUWP+W+c356NDhw41pUuXNpLMl19+aYy5kVN4eXkZSWb37t3ko6nIKfloepYlq+ak5KPOyUdLly59x8e7tOak1apVIx+1EVc2pkO1atUc3gcGBurUqVPavXu3goKCFBQUZI2rVKmSChQooN27d6c63YMHD+rq1asKCQmxhvn6+qp8+fIO7bZs2aLWrVurRIkSyp8/vxo1aiTpxuXDklS0aFG1atVKX331laQbZ/ViY2PVvn37FOe/bds2rVixQvny5bNeFSpUsGJLavnd3NxUqFAhVa1a1Rrm7+8vSdblxAlCQ0MTLdet66V27doO75ctW6YHH3xQxYoVU/78+dWpUyedOXMmxVuKS5Ysqfz581vvE76f9KpevboefPBBVa1aVe3bt9eFCxcczkpUrlzZYR43/717927lypXL4TstVKiQw7I3atRIu3bt0unTp60zUI0bN9bKlSt17do1rVu3zuES71vt3r1bsbGxevDBB1NdloTvsXr16tawhIdA79y5M03rY/fu3fL29tbvv/8uY4zWrFmj3r17W+NWrVolPz8/7du3T+Hh4fryyy+VJ08ea5sKCwtTfHy8ddn/rdtzgwYNJEmlS5dW/vz5rTN+SX3nye2L0o3t+eLFiypUqJDDNn3o0CGH7Tk4OFh+fn5pWvak5pvWfWDSpEmqXbu2goKCdPXqVS1fvtzaZ319feXj42O13bJli/78809t3brVYR/38fHRqVOn0r2P38ly7N69W6GhoQ63KN1///26ePGidcbs1mlKad//7mS/7dmzp5YuXarjx49LunGbSdeuXeXi4qJt27Zp1KhRDttAwtUzCdtUWn5nPDw8rGVr1KiRVq5caW3/jz32mCpWrKhff/1Vq1atUtGiRVW2bFlt27ZN06ZNc5j3zdv/n3/+qbi4OJUrV86hzapVqxy20StXrqhBgwZ67LHHrNsME+zevdvh90Vy/K2Vbtw2NXr0aFWtWlW+vr7Kly+ffv75Z2v7S24dBgQEOO14d7PatWun6fjnrGPf7apcubJcXf9Ln/z9/R32m4R96ebfogMHDih//vzWd+zr66t///3X4XsG0oOc1Dk5aVbMRyXHnPT06dO6cuWKzp07Z43Pmzevw63m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"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\n\n\n# Define the parameter grid to search\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [None, 10, 20],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\n# Create a RandomForestRegressor\nrf_regressor = RandomForestRegressor(random_state=42)\n\n# Instantiate GridSearchCV\ngrid_search = GridSearchCV(estimator=rf_regressor, param_grid=param_grid, cv=5, scoring='r2', verbose=1, n_jobs=-1)\n\n# Perform grid search\ngrid_search.fit(x_train, y_train)\n\n# Print the best hyperparameters found\nprint(\"Best hyperparameters:\", grid_search.best_params_)\n\n# Evaluate the model with best hyperparameters on the test set\nbest_rf = grid_search.best_estimator_\ntest_score = best_rf.score(x_test, y_test)\nprint(\"Test set R-squared score with best hyperparameters:\", test_score)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T15:29:20.500927Z","iopub.execute_input":"2024-04-12T15:29:20.501401Z","iopub.status.idle":"2024-04-12T16:00:09.105996Z","shell.execute_reply.started":"2024-04-12T15:29:20.501367Z","shell.execute_reply":"2024-04-12T16:00:09.104326Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 81 candidates, totalling 405 fits\nBest hyperparameters: {'max_depth': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 300}\nTest set R-squared score with best hyperparameters: 0.9610336021721142\n","output_type":"stream"}]},{"cell_type":"code","source":"# Access the best hyperparameters found by GridSearchCV\nbest_params = grid_search.best_params_\nprint(\"Best hyperparameters:\", best_params)\n\n# Create a new RandomForestRegressor with the best hyperparameters\nbest_rf_regressor = RandomForestRegressor(**best_params, random_state=42)\n\n# Train the model with the best hyperparameters on the entire training data\nbest_rf_regressor.fit(x, y)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T16:03:06.888650Z","iopub.execute_input":"2024-04-12T16:03:06.889070Z","iopub.status.idle":"2024-04-12T16:03:47.175791Z","shell.execute_reply.started":"2024-04-12T16:03:06.889040Z","shell.execute_reply":"2024-04-12T16:03:47.174498Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stdout","text":"Best hyperparameters: {'max_depth': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 300}\n","output_type":"stream"},{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"RandomForestRegressor(n_estimators=300, random_state=42)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=300, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=300, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import RidgeCV\nclf = RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(x_train, y_train)\nclf.score(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T16:56:22.488120Z","iopub.execute_input":"2024-04-12T16:56:22.488721Z","iopub.status.idle":"2024-04-12T16:56:22.604384Z","shell.execute_reply.started":"2024-04-12T16:56:22.488679Z","shell.execute_reply":"2024-04-12T16:56:22.602271Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"0.3199399687553006"},"metadata":{}}]},{"cell_type":"code","source":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, accuracy_score\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import cross_val_score\n\n\n\n# Define a list of regression models\nmodels = [\n    LinearRegression(),\n    Ridge(),\n    Lasso(),\n    SVR(),\n    DecisionTreeRegressor(),\n    RandomForestRegressor(),\n    AdaBoostRegressor(),\n    KNeighborsRegressor(),\n    MLPRegressor()\n]\n\n# Dictionary to store model names and their respective scores\nmodel_scores = {}\n\n# Loop through each model, fit it to the training data, and evaluate its performance\nfor model in models:\n    model_name = model.__class__.__name__\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    mse = mean_squared_error(y_test, y_pred)\n    \n    # Some models like SVR don't have an accuracy score, so we check if it's available before calculating\n    accuracy = None\n    if hasattr(model, 'predict'):  # Check if the model has a predict method (for classification models)\n        accuracy = model.score(x_test, y_test)\n    \n    model_scores[model_name] = {'MSE': mse, 'Accuracy': accuracy}\n\n# Print the results\nfor model_name, scores in model_scores.items():\n    print(f\"Model: {model_name}\")\n    print(f\"MSE: {scores['MSE']:.2f}\")\n    if scores['Accuracy'] is not None:\n        print(f\"Accuracy: {scores['Accuracy']:.2f}\")\n    else:\n        print(\"Accuracy score not available for this model.\")\n    print(\"-\" * 30)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T17:05:53.927877Z","iopub.execute_input":"2024-04-12T17:05:53.928284Z","iopub.status.idle":"2024-04-12T17:07:45.215360Z","shell.execute_reply.started":"2024-04-12T17:05:53.928255Z","shell.execute_reply":"2024-04-12T17:07:45.213738Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"Model: LinearRegression\nMSE: 2653722.11\nAccuracy: 0.32\n------------------------------\nModel: Ridge\nMSE: 2653722.60\nAccuracy: 0.32\n------------------------------\nModel: Lasso\nMSE: 2653972.74\nAccuracy: 0.32\n------------------------------\nModel: SVR\nMSE: 3137597.24\nAccuracy: 0.20\n------------------------------\nModel: DecisionTreeRegressor\nMSE: 294175.13\nAccuracy: 0.92\n------------------------------\nModel: RandomForestRegressor\nMSE: 155071.20\nAccuracy: 0.96\n------------------------------\nModel: AdaBoostRegressor\nMSE: 816656.80\nAccuracy: 0.79\n------------------------------\nModel: KNeighborsRegressor\nMSE: 1072336.91\nAccuracy: 0.73\n------------------------------\nModel: MLPRegressor\nMSE: 1344340.40\nAccuracy: 0.66\n------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression,Lasso,Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nmodels = {\n    'LinearRegression':LinearRegression(),\n    'Ridge': Ridge(),\n    'Lasso': Lasso(),\n    'Decision Tree': DecisionTreeRegressor(),\n    'RandomForest' : RandomForestRegressor(),\n    'XGBoost': XGBRegressor()\n}\n\ndata = {}\nmodel_list = []\ntrain_r2_score = []\ntest_r2_score = []\nfor i in range(len(models)):\n    model = list(models.values())[i]\n    model.fit(x_train,y_train)\n    \n    # Prediction \n    pred_train = model.predict(x_train)\n    pred_test = model.predict(x_test)\n    \n    model_name = list(models.keys())[i]\n    model_list.append(model_name)\n    print('--------------------------------------------------------------------')\n    print()    \n    print('Model Name :',model_name)\n    print('Training Accuracy: ')\n    print('mean_absolute_error: ',mean_absolute_error(y_train,pred_train))\n    print('mean_squared_error: ',mean_squared_error(y_train,pred_train)) \n    print('r2_score: ',r2_score(y_train,pred_train))\n    print()\n    print('Testing Accuracy: ')\n   \n    print('mean_absolute_error: ',mean_absolute_error(y_test,pred_test))\n    print('mean_squared_error: ',mean_squared_error(y_test,pred_test)) \n    print('r2_score: ',r2_score(y_test,pred_test))\n    print()\n    \n    train_r2_score.append(r2_score(y_train,pred_train))\n    test_r2_score.append(r2_score(y_test,pred_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-12T17:23:33.510636Z","iopub.execute_input":"2024-04-12T17:23:33.511755Z","iopub.status.idle":"2024-04-12T17:23:45.647824Z","shell.execute_reply.started":"2024-04-12T17:23:33.511712Z","shell.execute_reply":"2024-04-12T17:23:45.646693Z"},"trusted":true},"execution_count":83,"outputs":[{"name":"stdout","text":"--------------------------------------------------------------------\n\nModel Name : LinearRegression\nTraining Accuracy: \nmean_absolute_error:  1327.8153650761\nmean_squared_error:  2690169.782113248\nr2_score:  0.319939969842572\n\nTesting Accuracy: \nmean_absolute_error:  1319.8876848104364\nmean_squared_error:  2653722.1149979867\nr2_score:  0.3219823941096327\n\n--------------------------------------------------------------------\n\nModel Name : Ridge\nTraining Accuracy: \nmean_absolute_error:  1327.824734627147\nmean_squared_error:  2690169.7864142596\nr2_score:  0.31993996875530006\n\nTesting Accuracy: \nmean_absolute_error:  1319.8967094452098\nmean_squared_error:  2653722.599231222\nr2_score:  0.32198227038957283\n\n--------------------------------------------------------------------\n\nModel Name : Lasso\nTraining Accuracy: \nmean_absolute_error:  1328.0484676107728\nmean_squared_error:  2690183.3475345746\nr2_score:  0.31993654057914866\n\nTesting Accuracy: \nmean_absolute_error:  1320.2146610220539\nmean_squared_error:  2653972.736017814\nr2_score:  0.3219183612318537\n\n--------------------------------------------------------------------\n\nModel Name : Decision Tree\nTraining Accuracy: \nmean_absolute_error:  0.0\nmean_squared_error:  0.0\nr2_score:  1.0\n\nTesting Accuracy: \nmean_absolute_error:  279.8435219717853\nmean_squared_error:  282777.62656072644\nr2_score:  0.927751210921265\n\n--------------------------------------------------------------------\n\nModel Name : RandomForest\nTraining Accuracy: \nmean_absolute_error:  83.5546314765264\nmean_squared_error:  22342.051532863043\nr2_score:  0.9943520530413207\n\nTesting Accuracy: \nmean_absolute_error:  222.79869142208528\nmean_squared_error:  152817.81865034864\nr2_score:  0.9609555307418552\n\n--------------------------------------------------------------------\n\nModel Name : XGBoost\nTraining Accuracy: \nmean_absolute_error:  174.73628522691902\nmean_squared_error:  74180.3425973728\nr2_score:  0.9812476199980845\n\nTesting Accuracy: \nmean_absolute_error:  216.57131963373874\nmean_squared_error:  118859.72079665103\nr2_score:  0.9696317173241766\n\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\n\nmodel = XGBRegressor()\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\n\nmae = mean_absolute_error(y_test, y_pred)\n\nmse = mean_squared_error(y_test, y_pred)\n\nrmse = mean_squared_error(y_test, y_pred, squared=False)\n\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"MAE: {mae}\")\nprint(f\"MSE: {mse}\")\nprint(f\"RMSE: {rmse}\")\nprint(f\"R^2: {r2}\")","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:17:21.715259Z","iopub.execute_input":"2024-04-12T18:17:21.715777Z","iopub.status.idle":"2024-04-12T18:17:22.045159Z","shell.execute_reply.started":"2024-04-12T18:17:21.715743Z","shell.execute_reply":"2024-04-12T18:17:22.044203Z"},"trusted":true},"execution_count":91,"outputs":[{"name":"stdout","text":"MAE: 216.57131963373874\nMSE: 118859.72079665103\nRMSE: 344.76038170974783\nR^2: 0.9696317173241766\n","output_type":"stream"}]},{"cell_type":"code","source":"\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, VotingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\n\n# Create individual models\nrf_model = RandomForestRegressor(n_estimators=200, max_depth=5, random_state=42)\nxgb_model = XGBRegressor(n_estimators=150, max_depth=3, learning_rate=0.1, reg_lambda=1, random_state=42)\n\n# Create a VotingRegressor ensemble with XGBoost and RandomForestRegressor\nensemble_model = VotingRegressor(estimators=[\n    ('random_forest', rf_model),\n    ('xgboost', xgb_model)\n])\n\n# Fit the ensemble model on the training data\nensemble_model.fit(x_train, y_train)\n\n# Evaluate the ensemble model on the test set\ny_pred = ensemble_model.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\n\n# Print the Mean Squared Error (MSE) of the ensemble model\nprint(f\"Ensemble Model Mean Squared Error (MSE): {mse:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:18:35.071914Z","iopub.execute_input":"2024-04-12T18:18:35.073132Z","iopub.status.idle":"2024-04-12T18:18:41.472492Z","shell.execute_reply.started":"2024-04-12T18:18:35.073091Z","shell.execute_reply":"2024-04-12T18:18:41.471324Z"},"trusted":true},"execution_count":92,"outputs":[{"name":"stdout","text":"Ensemble Model Mean Squared Error (MSE): 330161.41\n","output_type":"stream"}]},{"cell_type":"code","source":"\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\n\n\n\n# Create a pipeline with preprocessing steps and XGBoost model\npipeline = Pipeline([\n    ('scaler', StandardScaler()),  # Scale features\n    ('model', XGBRegressor(random_state=42))  # XGBoost Regressor model\n])\n\n# Define a smaller hyperparameter grid for GridSearchCV\nparam_grid = {\n    'model__n_estimators': [100, 150, 200],\n    'model__max_depth': [3, 5, 7],\n    'model__learning_rate': [0.05, 0.1, 0.2],\n    'model__reg_lambda': [1, 3, 5]\n}\n\n\n# Perform GridSearchCV for hyperparameter tuning\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)\ngrid_search.fit(x, y)\n\n# Get the best parameters and best estimator from GridSearchCV\nbest_params = grid_search.best_params_\nbest_estimator = grid_search.best_estimator_\n\n# Evaluate the best estimator on the test set\ny_pred = best_estimator.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\n\n# Print the results\nprint(f\"Best Parameters: {best_params}\")\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error\n\n\n\n# Create a DecisionTreeRegressor model\ndt_model = DecisionTreeRegressor(random_state=42)\n\n# Define hyperparameter grid for GridSearchCV\nparam_grid = {\n    'max_depth': [3, 5, 7],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\n# Perform GridSearchCV for hyperparameter tuning with limited iterations\ngrid_search = GridSearchCV(estimator=dt_model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)\ngrid_search.fit(x_train, y_train)\n\n# Get the best parameters and best estimator from GridSearchCV\nbest_params = grid_search.best_params_\nbest_estimator = grid_search.best_estimator_\n\n# Evaluate the best estimator on the test set\ny_pred = best_estimator.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\n\n# Print the results\nprint(f\"Best Parameters: {best_params}\")\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T18:22:04.610058Z","iopub.execute_input":"2024-04-12T18:22:04.610502Z","iopub.status.idle":"2024-04-12T18:22:08.917610Z","shell.execute_reply.started":"2024-04-12T18:22:04.610473Z","shell.execute_reply":"2024-04-12T18:22:08.916012Z"},"trusted":true},"execution_count":95,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 27 candidates, totalling 135 fits\nBest Parameters: {'max_depth': 7, 'min_samples_leaf': 4, 'min_samples_split': 10}\nMean Squared Error (MSE): 294048.09\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Voting regressor","metadata":{}},{"cell_type":"code","source":"from sklearn.neural_network import MLPRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.isotonic import IsotonicRegression\n\nmodel = KNeighborsRegressor(n_neighbors=5)\nmodel.fit(x_train, y_train)\n# predict the model\ny_pred = model.predict(x_test)\n# calculate the r2 score\nr2 = r2_score(y_test, y_pred)\n# calculate the mean squared error\nmse = mean_squared_error(y_test, y_pred)\n# Check the R2 and MSE again\nprint(r2)\nprint(mse)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:21:09.813618Z","iopub.execute_input":"2024-04-12T07:21:09.814901Z","iopub.status.idle":"2024-04-12T07:21:12.399314Z","shell.execute_reply.started":"2024-04-12T07:21:09.814836Z","shell.execute_reply":"2024-04-12T07:21:12.398213Z"},"trusted":true},"execution_count":508,"outputs":[{"name":"stdout","text":"0.6969877592300835\n1200088.8957589504\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.feature_selection import SelectFromModel\nclf = ExtraTreesClassifier(n_estimators=50)\nclf = clf.fit(x, y)\nclf.feature_importances_  \nmodel = SelectFromModel(clf, prefit=True)\nx_new = model.transform(x)\nx_new.shape               ","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:21:25.209499Z","iopub.execute_input":"2024-04-12T07:21:25.210244Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_random_forest(x_new, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T07:22:50.075379Z","iopub.execute_input":"2024-04-12T07:22:50.075843Z","iopub.status.idle":"2024-04-12T07:22:50.509223Z","shell.execute_reply.started":"2024-04-12T07:22:50.075803Z","shell.execute_reply":"2024-04-12T07:22:50.507738Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m evaluation_metrics \u001b[38;5;241m=\u001b[39m \u001b[43mevaluate_random_forest\u001b[49m(x_new, y)\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(evaluation_metrics)\n","\u001b[0;31mNameError\u001b[0m: name 'evaluate_random_forest' is not defined"],"ename":"NameError","evalue":"name 'evaluate_random_forest' is not defined","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.ensemble import BaggingRegressor\n\n# Define and train BaggingRegressor model\nbagging_model = BaggingRegressor(estimator= RandomForestRegressor(), n_estimators=10)\nbagging_model.fit(x_train, y_train)\n\n# Evaluate the model\nbagging_score = bagging_model.score(x_test, y_test)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T23:00:26.781711Z","iopub.execute_input":"2024-04-11T23:00:26.783275Z","iopub.status.idle":"2024-04-11T23:01:25.078717Z","shell.execute_reply.started":"2024-04-11T23:00:26.783222Z","shell.execute_reply":"2024-04-11T23:01:25.076801Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import LassoCV\n\nfinal_layer_rfr = RandomForestRegressor(\n    n_estimators=10, max_features=1, max_leaf_nodes=5,random_state=42)\nfinal_layer_gbr = GradientBoostingRegressor(\n    n_estimators=10, max_features=1, max_leaf_nodes=5,random_state=42)\nfinal_layer = StackingRegressor(\n    estimators=[('rf', final_layer_rfr),\n                ('gbrt', final_layer_gbr)],\n    final_estimator=RidgeCV()\n    )\nmulti_layer_regressor = StackingRegressor(\n    estimators=[('ridge', RidgeCV()),\n                ('lasso', LassoCV(random_state=42)),\n                ('knr', KNeighborsRegressor(n_neighbors=20,\n                                            metric='euclidean'))],\n    final_estimator=final_layer\n)\nmulti_layer_regressor.fit(x_train, y_train)\nprint('R2 score: {:.2f}'\n      .format(multi_layer_regressor.score(x_test, y_test)))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T23:05:24.652280Z","iopub.execute_input":"2024-04-11T23:05:24.652768Z","iopub.status.idle":"2024-04-11T23:05:32.243926Z","shell.execute_reply.started":"2024-04-11T23:05:24.652722Z","shell.execute_reply":"2024-04-11T23:05:32.238624Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"R2 score: 0.69\n","output_type":"stream"}]},{"cell_type":"code","source":"x.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-11T23:14:55.392294Z","iopub.execute_input":"2024-04-11T23:14:55.392762Z","iopub.status.idle":"2024-04-11T23:14:55.403892Z","shell.execute_reply.started":"2024-04-11T23:14:55.392717Z","shell.execute_reply":"2024-04-11T23:14:55.402410Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"holiday          object\ntemp            float64\nrain_1h         float64\nsnow_1h         float64\nclouds_all      float64\nweather_main       int8\nhour            float64\nday                int8\nmonth              int8\nyear               int8\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"import xgboost as xg \n\n# Instantiation \nxgb_r = xg.XGBRegressor(objective ='reg:linear', \n                  n_estimators = 10, seed = 123) \n  \n# Fitting the model \nxgb_r.fit(x_train, y_train) \n  \n# Predict the model \npred = xgb_r.predict(x_test) \n  \n# RMSE Computation \nrmse = np.sqrt(MSE(y_test, pred)) \nprint(\"RMSE : % f\" %(rmse)) ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Development","metadata":{}},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:11:45.790501Z","iopub.execute_input":"2024-04-11T14:11:45.791487Z","iopub.status.idle":"2024-04-11T14:11:45.903643Z","shell.execute_reply.started":"2024-04-11T14:11:45.791449Z","shell.execute_reply":"2024-04-11T14:11:45.902440Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:12:27.110669Z","iopub.execute_input":"2024-04-11T14:12:27.111319Z","iopub.status.idle":"2024-04-11T14:12:27.131462Z","shell.execute_reply.started":"2024-04-11T14:12:27.111288Z","shell.execute_reply":"2024-04-11T14:12:27.130481Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:12:28.290468Z","iopub.execute_input":"2024-04-11T14:12:28.290827Z","iopub.status.idle":"2024-04-11T14:12:28.310869Z","shell.execute_reply.started":"2024-04-11T14:12:28.290800Z","shell.execute_reply":"2024-04-11T14:12:28.309926Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:12:29.271066Z","iopub.execute_input":"2024-04-11T14:12:29.271653Z","iopub.status.idle":"2024-04-11T14:12:43.751145Z","shell.execute_reply.started":"2024-04-11T14:12:29.271627Z","shell.execute_reply":"2024-04-11T14:12:43.749355Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"model = RandomForestRegressor()\nmodel.fit(x, y)\n# predict the model\n# y_pred = model.predict(x_test)\n# # calculate the r2 score\n# r2 = r2_score(y_test, y_pred)\n# # calculate the mean squared error\n# mse = mean_squared_error(y_test, y_pred)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:14:27.501322Z","iopub.execute_input":"2024-04-11T14:14:27.502063Z","iopub.status.idle":"2024-04-11T14:14:46.518925Z","shell.execute_reply.started":"2024-04-11T14:14:27.502029Z","shell.execute_reply":"2024-04-11T14:14:46.517787Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"RandomForestRegressor()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:14:53.226346Z","iopub.execute_input":"2024-04-11T14:14:53.227347Z","iopub.status.idle":"2024-04-11T14:15:30.116884Z","shell.execute_reply.started":"2024-04-11T14:14:53.227299Z","shell.execute_reply":"2024-04-11T14:15:30.115520Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"[0.94333253 0.94922991 0.94376542]\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-10T17:45:20.667886Z","iopub.execute_input":"2024-04-10T17:45:20.668271Z","iopub.status.idle":"2024-04-10T17:45:20.674893Z","shell.execute_reply.started":"2024-04-10T17:45:20.668242Z","shell.execute_reply":"2024-04-10T17:45:20.673686Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"0.9481962478088711\n205493.43070420512\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-04-10T17:45:30.057874Z","iopub.execute_input":"2024-04-10T17:45:30.058277Z","iopub.status.idle":"2024-04-10T17:45:30.070378Z","shell.execute_reply.started":"2024-04-10T17:45:30.058248Z","shell.execute_reply":"2024-04-10T17:45:30.068607Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"13.92"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","metadata":{"execution":{"iopub.status.busy":"2024-04-11T14:19:57.126189Z","iopub.execute_input":"2024-04-11T14:19:57.127374Z","iopub.status.idle":"2024-04-11T14:19:57.132294Z","shell.execute_reply.started":"2024-04-11T14:19:57.127330Z","shell.execute_reply":"2024-04-11T14:19:57.131505Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"markdown","source":"#### Random Hyperparameter Grid","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(random_state = 42)\nfrom pprint import pprint\n# Look at parameters used by our current forest\nprint('Parameters currently in use:\\n')\npprint(rf.get_params())","metadata":{"execution":{"iopub.status.busy":"2024-04-11T15:30:40.111328Z","iopub.execute_input":"2024-04-11T15:30:40.111980Z","iopub.status.idle":"2024-04-11T15:30:40.119074Z","shell.execute_reply.started":"2024-04-11T15:30:40.111947Z","shell.execute_reply":"2024-04-11T15:30:40.117836Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Parameters currently in use:\n\n{'bootstrap': True,\n 'ccp_alpha': 0.0,\n 'criterion': 'squared_error',\n 'max_depth': None,\n 'max_features': 1.0,\n 'max_leaf_nodes': None,\n 'max_samples': None,\n 'min_impurity_decrease': 0.0,\n 'min_samples_leaf': 1,\n 'min_samples_split': 2,\n 'min_weight_fraction_leaf': 0.0,\n 'n_estimators': 100,\n 'n_jobs': None,\n 'oob_score': False,\n 'random_state': 42,\n 'verbose': 0,\n 'warm_start': False}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Random Hyperparameter Grid","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)","metadata":{"execution":{"iopub.status.busy":"2024-04-11T15:50:33.473128Z","iopub.execute_input":"2024-04-11T15:50:33.473971Z","iopub.status.idle":"2024-04-11T15:50:33.482930Z","shell.execute_reply.started":"2024-04-11T15:50:33.473922Z","shell.execute_reply":"2024-04-11T15:50:33.481813Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"{'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Random Search Training","metadata":{}},{"cell_type":"markdown","source":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestRegressor()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(x_train, y_train)","metadata":{}},{"cell_type":"markdown","source":"#### Evaluate Random Search","metadata":{}},{"cell_type":"code","source":"\ndef evaluate(model, x_test, y_test):\n    predictions = model.predict(x_test)\n    errors = abs(predictions - y_test)\n    mape = 100 * np.mean(errors / y_test)\n    accuracy = 100 - mape\n    print('Model Performance')\n    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n    \n    return accuracy\nbase_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\nbase_model.fit(x_train, y_train)\nbase_accuracy = evaluate(base_model, x_test, y_test)\n\nbest_random = rf_random.best_estimator_\nrandom_accuracy = evaluate(best_random, x_test, y_test)\n\nprint('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T16:09:14.180350Z","iopub.execute_input":"2024-04-11T16:09:14.180810Z","iopub.status.idle":"2024-04-11T16:09:15.920469Z","shell.execute_reply.started":"2024-04-11T16:09:14.180776Z","shell.execute_reply":"2024-04-11T16:09:15.919341Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"Model Performance\nAverage Error: 267.2941 degrees.\nAccuracy = 71.08%.\nModel Performance\nAverage Error: 252.4029 degrees.\nAccuracy = 72.15%.\nImprovement of 1.51%.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### Grid Search with Cross Validation","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n# Create the parameter grid based on the results of random search \nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'n_estimators': [100, 200, 300, 1000]\n}\n# Create a based model\nrf = RandomForestRegressor()\n# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n                          cv = 3, n_jobs = -1, verbose = 2)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nmodel = GradientBoostingRegressor()\ngrid = dict()\ngrid['n_estimators'] = [10, 50, 100, 500]\ngrid['learning_rate'] = [0.0001, 0.001, 0.01, 0.1, 1.0]\ngrid['subsample'] = [0.5, 0.7, 1.0]\ngrid['max_depth'] = [3, 7, 9]\n# define the evaluation procedure\ncv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n# define the grid search procedure\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv)\n# execute the grid search\ngrid_result = grid_search.fit(x_train, y_train)\n# summarize the best score and configuration\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_)) # summarize all scores that were evaluated\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))","metadata":{"execution":{"iopub.status.busy":"2024-04-11T15:12:06.641746Z","iopub.execute_input":"2024-04-11T15:12:06.642578Z","iopub.status.idle":"2024-04-11T15:12:09.090608Z","shell.execute_reply.started":"2024-04-11T15:12:06.642539Z","shell.execute_reply":"2024-04-11T15:12:09.088890Z"},"trusted":true},"execution_count":55,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31m_RemoteTraceback\u001b[0m                          Traceback (most recent call last)","\u001b[0;31m_RemoteTraceback\u001b[0m: \n\"\"\"\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py\", line 463, in _process_worker\n    r = call_item()\n  File \"/opt/conda/lib/python3.10/site-packages/joblib/externals/loky/process_executor.py\", line 291, in __call__\n    return self.fn(*self.args, **self.kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/joblib/parallel.py\", line 589, in __call__\n    return [func(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/joblib/parallel.py\", line 589, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/utils/parallel.py\", line 123, in __call__\n    return self.function(*args, **kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 674, in _fit_and_score\n    estimator = estimator.set_params(**cloned_parameters)\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/base.py\", line 205, in set_params\n    raise ValueError(\nValueError: Invalid parameter 'learning_rate' for estimator RandomForestRegressor(). Valid parameters are: ['bootstrap', 'ccp_alpha', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'max_samples', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'n_jobs', 'oob_score', 'random_state', 'verbose', 'warm_start'].\n\"\"\"","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[55], line 15\u001b[0m\n\u001b[1;32m     13\u001b[0m grid_search \u001b[38;5;241m=\u001b[39m GridSearchCV(estimator\u001b[38;5;241m=\u001b[39mmodel, param_grid\u001b[38;5;241m=\u001b[39mgrid, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, cv\u001b[38;5;241m=\u001b[39mcv)\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# execute the grid search\u001b[39;00m\n\u001b[0;32m---> 15\u001b[0m grid_result \u001b[38;5;241m=\u001b[39m \u001b[43mgrid_search\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m# summarize the best score and configuration\u001b[39;00m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBest: \u001b[39m\u001b[38;5;132;01m%f\u001b[39;00m\u001b[38;5;124m using \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m (grid_result\u001b[38;5;241m.\u001b[39mbest_score_, grid_result\u001b[38;5;241m.\u001b[39mbest_params_)) \u001b[38;5;66;03m# summarize all scores that were evaluated\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:874\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    868\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    869\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    870\u001b[0m     )\n\u001b[1;32m    872\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 874\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    878\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:1388\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1387\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1388\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:821\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    813\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    814\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    815\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    817\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    818\u001b[0m         )\n\u001b[1;32m    819\u001b[0m     )\n\u001b[0;32m--> 821\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    822\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    838\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    839\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    840\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/parallel.py:63\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     58\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[1;32m     59\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m     60\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[1;32m     62\u001b[0m )\n\u001b[0;32m---> 63\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__call__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43miterable_with_config\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1952\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1946\u001b[0m \u001b[38;5;66;03m# The first item from the output is blank, but it makes the interpreter\u001b[39;00m\n\u001b[1;32m   1947\u001b[0m \u001b[38;5;66;03m# progress until it enters the Try/Except block of the generator and\u001b[39;00m\n\u001b[1;32m   1948\u001b[0m \u001b[38;5;66;03m# reach the first `yield` statement. This starts the aynchronous\u001b[39;00m\n\u001b[1;32m   1949\u001b[0m \u001b[38;5;66;03m# dispatch of the tasks to the workers.\u001b[39;00m\n\u001b[1;32m   1950\u001b[0m \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[0;32m-> 1952\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43moutput\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1595\u001b[0m, in \u001b[0;36mParallel._get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1592\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m\n\u001b[1;32m   1594\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mretrieval_context():\n\u001b[0;32m-> 1595\u001b[0m         \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_retrieve()\n\u001b[1;32m   1597\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mGeneratorExit\u001b[39;00m:\n\u001b[1;32m   1598\u001b[0m     \u001b[38;5;66;03m# The generator has been garbage collected before being fully\u001b[39;00m\n\u001b[1;32m   1599\u001b[0m     \u001b[38;5;66;03m# consumed. This aborts the remaining tasks if possible and warn\u001b[39;00m\n\u001b[1;32m   1600\u001b[0m     \u001b[38;5;66;03m# the user if necessary.\u001b[39;00m\n\u001b[1;32m   1601\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1699\u001b[0m, in \u001b[0;36mParallel._retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1692\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_wait_retrieval():\n\u001b[1;32m   1693\u001b[0m \n\u001b[1;32m   1694\u001b[0m     \u001b[38;5;66;03m# If the callback thread of a worker has signaled that its task\u001b[39;00m\n\u001b[1;32m   1695\u001b[0m     \u001b[38;5;66;03m# triggered an exception, or if the retrieval loop has raised an\u001b[39;00m\n\u001b[1;32m   1696\u001b[0m     \u001b[38;5;66;03m# exception (e.g. `GeneratorExit`), exit the loop and surface the\u001b[39;00m\n\u001b[1;32m   1697\u001b[0m     \u001b[38;5;66;03m# worker traceback.\u001b[39;00m\n\u001b[1;32m   1698\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_aborting:\n\u001b[0;32m-> 1699\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_error_fast\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1700\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m   1702\u001b[0m     \u001b[38;5;66;03m# If the next job is not ready for retrieval yet, we just wait for\u001b[39;00m\n\u001b[1;32m   1703\u001b[0m     \u001b[38;5;66;03m# async callbacks to progress.\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1734\u001b[0m, in \u001b[0;36mParallel._raise_error_fast\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1730\u001b[0m \u001b[38;5;66;03m# If this error job exists, immediatly raise the error by\u001b[39;00m\n\u001b[1;32m   1731\u001b[0m \u001b[38;5;66;03m# calling get_result. This job might not exists if abort has been\u001b[39;00m\n\u001b[1;32m   1732\u001b[0m \u001b[38;5;66;03m# called directly or if the generator is gc'ed.\u001b[39;00m\n\u001b[1;32m   1733\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m error_job \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1734\u001b[0m     \u001b[43merror_job\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_result\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:736\u001b[0m, in \u001b[0;36mBatchCompletionCallBack.get_result\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    730\u001b[0m backend \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mparallel\u001b[38;5;241m.\u001b[39m_backend\n\u001b[1;32m    732\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m backend\u001b[38;5;241m.\u001b[39msupports_retrieve_callback:\n\u001b[1;32m    733\u001b[0m     \u001b[38;5;66;03m# We assume that the result has already been retrieved by the\u001b[39;00m\n\u001b[1;32m    734\u001b[0m     \u001b[38;5;66;03m# callback thread, and is stored internally. It's just waiting to\u001b[39;00m\n\u001b[1;32m    735\u001b[0m     \u001b[38;5;66;03m# be returned.\u001b[39;00m\n\u001b[0;32m--> 736\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_return_or_raise\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    738\u001b[0m \u001b[38;5;66;03m# For other backends, the main thread needs to run the retrieval step.\u001b[39;00m\n\u001b[1;32m    739\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:754\u001b[0m, in \u001b[0;36mBatchCompletionCallBack._return_or_raise\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    752\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m    753\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstatus \u001b[38;5;241m==\u001b[39m TASK_ERROR:\n\u001b[0;32m--> 754\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_result\n\u001b[1;32m    755\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_result\n\u001b[1;32m    756\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n","\u001b[0;31mValueError\u001b[0m: Invalid parameter 'learning_rate' for estimator RandomForestRegressor(). Valid parameters are: ['bootstrap', 'ccp_alpha', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'max_samples', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'n_jobs', 'oob_score', 'random_state', 'verbose', 'warm_start']."],"ename":"ValueError","evalue":"Invalid parameter 'learning_rate' for estimator RandomForestRegressor(). Valid parameters are: ['bootstrap', 'ccp_alpha', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'max_samples', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'n_jobs', 'oob_score', 'random_state', 'verbose', 'warm_start'].","output_type":"error"}]},{"cell_type":"code","source":"# 2. Perform Feature Selection - Experiment with the best one!\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Usually, we do a train-test split, but, in the hackathon, we'll already provide you with the separate datasets for each","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 3. Data Normalisation: Bring into the range 0 to 1, or -1 to 1","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 4. Choose Model(s), fit\n### Experiment with different models.\n### https://scikit-learn.org/stable/supervised_learning.html","metadata":{"id":"kNFBi9jyk90_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 5. Evaluate with relevant metric for your problem. Eg: accuracy_score(), r2_score()","metadata":{"id":"2HzvdnG0mWEZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 6. After model choice is made, fine-tune with GridSearchCV, or RandomizedSearchCV()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Testing and Creating Output CSV","metadata":{"id":"7Zb-W-KzvyzX"}},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/123ofai-predict-the-traffic-volume/test_set_nogt.csv')\n\n# Convert 'date_time' to datetime format\ntest['date_time'] = pd.to_datetime(test['date_time'], errors='coerce', dayfirst=True)\n\n# Filter rows where 'holiday' is not NaN\nisHoliday = test['holiday'].notna().copy()\n\n# Extract date and holiday values where 'holiday' is not NaN\ndate = test.loc[isHoliday, 'date_time'].dt.date.values\nholiday = test.loc[isHoliday, 'holiday'].values\n\n# Create mapping dictionary\nmapping = dict(zip(date, holiday))\n# if pd.NaT in mapping:\n#     mapping.pop(pd.NaT)\n\n# Map 'date_time' to 'holiday' using the mapping dictionary, filling NaN values with corresponding holidays\ntest.loc[:,'holiday'] = test['date_time'].dt.date.map(mapping)\ntest['day'] = test.date_time.dt.day\ntest['month'] = test.date_time.dt.month_name()\ntest['year'] = test.date_time.dt.year\ntest['weekday'] = test.date_time.dt.day_name()\ntest['hour'] = test.date_time.dt.hour\n\n# Replace NaN with 0 and other values with 1 in holiday\ntest.loc[:, 'holiday'] = np.where(test['holiday'].isnull(), 0, 1)\n\n\n\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ntest['day_time'] = test[['hour']].applymap(getDayTime)\ntest['holiday'] = test['holiday'].astype(int)\n\n# hour is converted to float from string \ntest['hour'] = test['hour'].astype(float)\n\ntest = test.drop(columns=['date_time','weather_description'])\n\ntest['weather_main'] = test['weather_main'].astype('category').cat.codes + 1\ntest['day'] = test['day'].astype('category').cat.codes + 1\ntest['month'] = test['month'].astype('category').cat.codes + 1\ntest['year'] = test['year'].astype('category').cat.codes + 1\ntest['day_time'] = test['day_time'].astype('category').cat.codes + 1\ntest['weekday'] = test['weekday'].astype('category').cat.codes + 1\n\n# # 1. Divide dataframe into input and output\n# x = df_new.drop(columns=['traffic_volume']) # Drop the column to be predicted\n# y = df_new['traffic_volume'] # Choose Output column to be predicted\n\n# # Initialize StandardScaler\n# scaler = StandardScaler()\n\n# # Fit and transform the data using StandardScaler\n# x = scaler.fit_transform(x)\n\n# model = RandomForestRegressor()\n# model.fit(x, y)\n\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\ntest_1 = scaler.fit_transform(test)\n\n\n\n\n# 4. Predict and obtain results from the model\ny_pred = best_estimator.predict(test_1)\n\n# 5. Save results to CSV\nsubmission = pd.DataFrame({'ID': test.index, 'traffic_volume' : y_pred})\nsubmission.to_csv('output_submission_eval13.csv', index=False)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-04-12T18:13:24.593134Z","iopub.execute_input":"2024-04-12T18:13:24.594133Z","iopub.status.idle":"2024-04-12T18:13:24.794858Z","shell.execute_reply.started":"2024-04-12T18:13:24.593967Z","shell.execute_reply":"2024-04-12T18:13:24.793691Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/123ofai-predict-the-traffic-volume/test_set_nogt.csv')\n# Convert 'date_time' to datetime format\ntest['date_time'] = pd.to_datetime(test['date_time'], errors='coerce', dayfirst=True)\n# Replace NaN with 0 and other values with 1 in holiday\ntest.loc[:, 'holiday'] = np.where(test['holiday'].isnull(), 0, 1)\n\ntest['day'] = test.date_time.dt.day\ntest['month'] = test.date_time.dt.month_name()\ntest['year'] = test.date_time.dt.year\ntest['weekday'] = test.date_time.dt.day_name()\ntest['hour'] = test.date_time.dt.hour\n\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ntest['day_time'] = test[['hour']].applymap(getDayTime)\ntest['holiday'] = test['holiday'].astype(int)\n\n# hour is converted to float from string \ntest['hour'] = test['hour'].astype(float)\n\ntest = test.drop(columns=['date_time','weather_description'])\n\ntest['weather_main'] = test['weather_main'].astype('category').cat.codes + 1\ntest['day'] = test['day'].astype('category').cat.codes + 1\ntest['month'] = test['month'].astype('category').cat.codes + 1\ntest['year'] = test['year'].astype('category').cat.codes + 1\ntest['day_time'] = test['day_time'].astype('category').cat.codes + 1\ntest['weekday'] = test['weekday'].astype('category').cat.codes + 1\n\n# 1. Divide dataframe into input and output\nx = df_new.drop(columns=['traffic_volume']) # Drop the column to be predicted\ny = df_new['traffic_volume'] # Choose Output column to be predicted\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\nx = scaler.fit_transform(x)\n\nmodel = RandomForestRegressor()\nmodel.fit(x, y)\n\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\ntest_1 = scaler.fit_transform(test)\n\n\n\n\n# 4. Predict and obtain results from the model\ny_pred = model.predict(test_1)\n\n# 5. Save results to CSV\nsubmission = pd.DataFrame({'ID': test.index, 'traffic_volume' : y_pred})\nsubmission.to_csv('output_submission_eval8.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T13:55:00.718122Z","iopub.execute_input":"2024-04-12T13:55:00.718542Z","iopub.status.idle":"2024-04-12T13:55:12.076090Z","shell.execute_reply.started":"2024-04-12T13:55:00.718502Z","shell.execute_reply":"2024-04-12T13:55:12.075302Z"},"trusted":true},"execution_count":78,"outputs":[]},{"cell_type":"code","source":"test","metadata":{"execution":{"iopub.status.busy":"2024-04-12T06:54:58.648306Z","iopub.execute_input":"2024-04-12T06:54:58.648747Z","iopub.status.idle":"2024-04-12T06:54:58.668648Z","shell.execute_reply.started":"2024-04-12T06:54:58.648716Z","shell.execute_reply":"2024-04-12T06:54:58.667398Z"},"trusted":true},"execution_count":493,"outputs":[{"execution_count":493,"output_type":"execute_result","data":{"text/plain":"      holiday     temp  rain_1h  snow_1h  clouds_all  weather_main  day  \\\n0           0 289.5800   0.0000   0.0000          90             2    2   \n1           0 290.1300   0.0000   0.0000          90             2    2   \n2           0 291.1400   0.0000   0.0000          75             2    2   \n3           0 291.7200   0.0000   0.0000           1             1    2   \n4           0 281.1800   0.0000   0.0000           1             1    3   \n...       ...      ...      ...      ...         ...           ...  ...   \n9636        0 280.2800   0.0000   0.0000          90             2   30   \n9637        0 282.1800   0.0000   0.0000          90             2   30   \n9638        0 283.4800   0.0000   0.0000          90             7   30   \n9639        0 283.4800   0.0000   0.0000          90             3   30   \n9640        0 284.2000   0.2500   0.0000          75             7   30   \n\n      month  year  weekday    hour  day_time  \n0        11     1        6 11.0000         5  \n1        11     1        6 12.0000         1  \n2        11     1        6 13.0000         1  \n3        11     1        6 14.0000         1  \n4        11     1        7  2.0000         4  \n...     ...   ...      ...     ...       ...  \n9636     12     7        4  8.0000         5  \n9637     12     7        4 11.0000         5  \n9638     12     7        4 14.0000         1  \n9639     12     7        4 14.0000         1  \n9640     12     7        4 18.0000         3  \n\n[9641 rows x 12 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>289.5800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>11.0000</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>290.1300</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>12.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>291.1400</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>75</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>13.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>291.7200</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>14.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>281.1800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>11</td>\n      <td>1</td>\n      <td>7</td>\n      <td>2.0000</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9636</th>\n      <td>0</td>\n      <td>280.2800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90</td>\n      <td>2</td>\n      <td>30</td>\n      <td>12</td>\n      <td>7</td>\n      <td>4</td>\n      <td>8.0000</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>9637</th>\n      <td>0</td>\n      <td>282.1800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90</td>\n      <td>2</td>\n      <td>30</td>\n      <td>12</td>\n      <td>7</td>\n      <td>4</td>\n      <td>11.0000</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>9638</th>\n      <td>0</td>\n      <td>283.4800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90</td>\n      <td>7</td>\n      <td>30</td>\n      <td>12</td>\n      <td>7</td>\n      <td>4</td>\n      <td>14.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9639</th>\n      <td>0</td>\n      <td>283.4800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90</td>\n      <td>3</td>\n      <td>30</td>\n      <td>12</td>\n      <td>7</td>\n      <td>4</td>\n      <td>14.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9640</th>\n      <td>0</td>\n      <td>284.2000</td>\n      <td>0.2500</td>\n      <td>0.0000</td>\n      <td>75</td>\n      <td>7</td>\n      <td>30</td>\n      <td>12</td>\n      <td>7</td>\n      <td>4</td>\n      <td>18.0000</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n<p>9641 rows × 12 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new","metadata":{"execution":{"iopub.status.busy":"2024-04-12T06:55:06.838685Z","iopub.execute_input":"2024-04-12T06:55:06.839472Z","iopub.status.idle":"2024-04-12T06:55:06.858733Z","shell.execute_reply.started":"2024-04-12T06:55:06.839409Z","shell.execute_reply":"2024-04-12T06:55:06.857575Z"},"trusted":true},"execution_count":494,"outputs":[{"execution_count":494,"output_type":"execute_result","data":{"text/plain":"       traffic_volume  holiday     temp  rain_1h  snow_1h  clouds_all  \\\n0           1493.0000        0 287.1500   0.0000   0.0000     90.0000   \n3           5626.0000        0 252.0800   0.0000   0.0000     20.0000   \n4           5357.0000        0 291.2500   1.0200   0.0000     64.0000   \n5           2827.0000        0 272.7900   0.0000   0.0000     90.0000   \n7           4513.0000        0 270.8400   0.0000   0.0000     75.0000   \n...               ...      ...      ...      ...      ...         ...   \n38557        393.0000        0 267.0200   0.0000   0.0000     90.0000   \n38558       4727.0000        0 267.5900   0.0000   0.0000      5.0000   \n38560       3009.0000        0 256.6400   0.0000   0.0000      1.0000   \n38561        295.0000        0 286.6900   0.0000   0.0000      1.0000   \n38562        746.0000        0 290.1800   0.0000   0.0000     64.0000   \n\n       weather_main  day  month  year  weekday    hour  day_time  \n0                 6   18     12     6        2 22.0000         6  \n3                 5    4      5     6        7  8.0000         5  \n4                 7   13      7     2        5 13.0000         1  \n5                 9    3     10     6        1 20.0000         6  \n7                 2    1      8     6        7 10.0000         5  \n...             ...  ...    ...   ...      ...     ...       ...  \n38557             2   10      4     6        1  1.0000         4  \n38558             1   14      5     6        3 16.0000         3  \n38560             1    7      4     3        1 22.0000         6  \n38561             1    9      1     6        4  4.0000         2  \n38562            11    1      9     2        7  4.0000         2  \n\n[30864 rows x 13 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1493.0000</td>\n      <td>0</td>\n      <td>287.1500</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90.0000</td>\n      <td>6</td>\n      <td>18</td>\n      <td>12</td>\n      <td>6</td>\n      <td>2</td>\n      <td>22.0000</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5626.0000</td>\n      <td>0</td>\n      <td>252.0800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>20.0000</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8.0000</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5357.0000</td>\n      <td>0</td>\n      <td>291.2500</td>\n      <td>1.0200</td>\n      <td>0.0000</td>\n      <td>64.0000</td>\n      <td>7</td>\n      <td>13</td>\n      <td>7</td>\n      <td>2</td>\n      <td>5</td>\n      <td>13.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2827.0000</td>\n      <td>0</td>\n      <td>272.7900</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90.0000</td>\n      <td>9</td>\n      <td>3</td>\n      <td>10</td>\n      <td>6</td>\n      <td>1</td>\n      <td>20.0000</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4513.0000</td>\n      <td>0</td>\n      <td>270.8400</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>75.0000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>8</td>\n      <td>6</td>\n      <td>7</td>\n      <td>10.0000</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>38557</th>\n      <td>393.0000</td>\n      <td>0</td>\n      <td>267.0200</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90.0000</td>\n      <td>2</td>\n      <td>10</td>\n      <td>4</td>\n      <td>6</td>\n      <td>1</td>\n      <td>1.0000</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>38558</th>\n      <td>4727.0000</td>\n      <td>0</td>\n      <td>267.5900</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>5.0000</td>\n      <td>1</td>\n      <td>14</td>\n      <td>5</td>\n      <td>6</td>\n      <td>3</td>\n      <td>16.0000</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>38560</th>\n      <td>3009.0000</td>\n      <td>0</td>\n      <td>256.6400</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1.0000</td>\n      <td>1</td>\n      <td>7</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>22.0000</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>38561</th>\n      <td>295.0000</td>\n      <td>0</td>\n      <td>286.6900</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1.0000</td>\n      <td>1</td>\n      <td>9</td>\n      <td>1</td>\n      <td>6</td>\n      <td>4</td>\n      <td>4.0000</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>38562</th>\n      <td>746.0000</td>\n      <td>0</td>\n      <td>290.1800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>64.0000</td>\n      <td>11</td>\n      <td>1</td>\n      <td>9</td>\n      <td>2</td>\n      <td>7</td>\n      <td>4.0000</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>30864 rows × 13 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/123ofai-predict-the-traffic-volume/test_set_nogt.csv')\n# Convert 'date_time' to datetime format\ntest['date_time'] = pd.to_datetime(test['date_time'], errors='coerce', dayfirst=True)\n\ntest.loc[:, 'holiday'] = test['holiday'].astype('category').cat.codes + 1\n\ntest['holiday'] = test['holiday'].astype(int)\n\ntest.loc[:,'day'] = test['date_time'].dt.day_name()\ntest.loc[:,'month'] = test['date_time'].dt.month_name()\ntest.loc[:,'year'] = test['date_time'].dt.year.astype(str)\ntest.loc[:,'hour'] = test['date_time'].dt.hour\n\n# hour is converted to float from string \ntest['hour'] = test['hour'].astype(float)\n\n# check data types of hour\ntest['hour'].dtypes\n\ntest = test.drop(columns=['date_time','weather_description'])\n\ntest['weather_main'] = test['weather_main'].astype('category').cat.codes + 1\ntest['day'] = test['day'].astype('category').cat.codes + 1\ntest['month'] = test['month'].astype('category').cat.codes + 1\ntest['year'] = test['year'].astype('category').cat.codes + 1\ntest['clouds_all'] = test['clouds_all'].astype(float)\n\n\n# 1. Divide dataframe into input and output\nx = df_new.drop(columns=['traffic_volume']) # Drop the column to be predicted\ny = df_new['traffic_volume'] # Choose Output column to be predicted\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\nx = scaler.fit_transform(x)\n\nmodel = RandomForestRegressor()\nmodel.fit(x, y)\n\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\ntest_1 = scaler.fit_transform(test)\n\n\n\n\n# 4. Predict and obtain results from the model\ny_pred = model.predict(test_1)\n\n# 5. Save results to CSV\nsubmission = pd.DataFrame({'ID': test.index, 'traffic_volume' : y_pred})\nsubmission.to_csv('output_submission_eval6.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T06:08:20.727117Z","iopub.execute_input":"2024-04-12T06:08:20.727631Z","iopub.status.idle":"2024-04-12T06:08:32.077374Z","shell.execute_reply.started":"2024-04-12T06:08:20.727592Z","shell.execute_reply":"2024-04-12T06:08:32.076298Z"},"trusted":true},"execution_count":375,"outputs":[]},{"cell_type":"code","source":"isHoliday","metadata":{"execution":{"iopub.status.busy":"2024-04-12T06:03:22.333309Z","iopub.execute_input":"2024-04-12T06:03:22.333760Z","iopub.status.idle":"2024-04-12T06:03:22.344748Z","shell.execute_reply.started":"2024-04-12T06:03:22.333728Z","shell.execute_reply":"2024-04-12T06:03:22.343473Z"},"trusted":true},"execution_count":372,"outputs":[{"execution_count":372,"output_type":"execute_result","data":{"text/plain":"0       False\n1       False\n2       False\n3       False\n4       False\n        ...  \n9636    False\n9637    False\n9638    False\n9639    False\n9640    False\nName: holiday, Length: 9641, dtype: bool"},"metadata":{}}]},{"cell_type":"code","source":"submission.to_csv(\"output.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-12T05:58:16.937261Z","iopub.execute_input":"2024-04-12T05:58:16.937763Z","iopub.status.idle":"2024-04-12T05:58:16.967345Z","shell.execute_reply.started":"2024-04-12T05:58:16.937722Z","shell.execute_reply":"2024-04-12T05:58:16.965940Z"},"trusted":true},"execution_count":362,"outputs":[]},{"cell_type":"code","source":"test.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-12T05:50:10.532654Z","iopub.execute_input":"2024-04-12T05:50:10.533052Z","iopub.status.idle":"2024-04-12T05:50:10.541908Z","shell.execute_reply.started":"2024-04-12T05:50:10.533023Z","shell.execute_reply":"2024-04-12T05:50:10.540698Z"},"trusted":true},"execution_count":355,"outputs":[{"execution_count":355,"output_type":"execute_result","data":{"text/plain":"holiday           int64\ntemp            float64\nrain_1h         float64\nsnow_1h         float64\nclouds_all      float64\nweather_main       int8\nday                int8\nmonth              int8\nyear               int8\nhour            float64\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-12T05:47:59.100825Z","iopub.execute_input":"2024-04-12T05:47:59.101687Z","iopub.status.idle":"2024-04-12T05:47:59.112156Z","shell.execute_reply.started":"2024-04-12T05:47:59.101642Z","shell.execute_reply":"2024-04-12T05:47:59.110829Z"},"trusted":true},"execution_count":353,"outputs":[{"execution_count":353,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main         int8\nday                  int8\nmonth                int8\nyear                 int8\nhour              float64\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Creating output file for submission - Template Code\n\ntest = pd.read_csv('/kaggle/input/123ofai-predict-the-traffic-volume/test_set_nogt.csv')\n# Replace NaN with 0 and other values with 1 in holiday\ntest.loc[:, 'holiday'] = np.where(test['holiday'].isnull(), 0, 1)\n# seperate date and time into two column\ntest[['date', 'time']] = test['date_time'].str.split(' ', expand=True)\ntest[['hour', 'minute']] = test['time'].str.split(':', expand=True)\ntest['hour'] = test['hour'].astype(float)\n# Using .dt.day_name() to get the full day name\ntest['date'] = pd.to_datetime(test['date'],dayfirst=True)\ntest['day'] = test['date'].dt.day_name()\ntest['month'] = test['date'].dt.month_name()\ntest['year'] = test['date'].dt.year.astype(str)\n# drop the date and date_time column\ntest = test.drop(columns=['date_time','date','time','minute','weather_description'])\ntest = pd.concat([test,pd.get_dummies(test['weather_main'],dtype=int)], axis=1)\ntest = pd.concat([test,pd.get_dummies(test['day'],dtype=int)], axis=1)\ntest = pd.concat([test,pd.get_dummies(test['month'],dtype=int)], axis=1)\ntest = pd.concat([test,pd.get_dummies(test['year'],dtype=int)], axis=1)\ntest.drop(columns=['weather_main','day','month','year'], inplace=True)\n\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\ntest_1 = scaler.fit_transform(test)\n\n\n\n\n# 4. Predict and obtain results from the model\ny_pred = model.predict(test_1)\n\n# 5. Save results to CSV\nsubmission = pd.DataFrame({'ID': test.index, 'stroke' : y_pred})\nsubmission.to_csv('output_submission_eval3.csv', index=False)","metadata":{"id":"X833FyDYv0IY","execution":{"iopub.status.busy":"2024-04-12T05:53:19.009539Z","iopub.execute_input":"2024-04-12T05:53:19.009987Z","iopub.status.idle":"2024-04-12T05:53:19.572674Z","shell.execute_reply.started":"2024-04-12T05:53:19.009957Z","shell.execute_reply":"2024-04-12T05:53:19.571063Z"},"trusted":true},"execution_count":356,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[356], line 37\u001b[0m\n\u001b[1;32m     31\u001b[0m test_1 \u001b[38;5;241m=\u001b[39m scaler\u001b[38;5;241m.\u001b[39mfit_transform(test)\n\u001b[1;32m     36\u001b[0m \u001b[38;5;66;03m# 4. Predict and obtain results from the model\u001b[39;00m\n\u001b[0;32m---> 37\u001b[0m y_pred \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest_1\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     39\u001b[0m \u001b[38;5;66;03m# 5. Save results to CSV\u001b[39;00m\n\u001b[1;32m     40\u001b[0m submission \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame({\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mID\u001b[39m\u001b[38;5;124m'\u001b[39m: test\u001b[38;5;241m.\u001b[39mindex, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstroke\u001b[39m\u001b[38;5;124m'\u001b[39m : y_pred})\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:981\u001b[0m, in \u001b[0;36mForestRegressor.predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    979\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[1;32m    980\u001b[0m \u001b[38;5;66;03m# Check data\u001b[39;00m\n\u001b[0;32m--> 981\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_X_predict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    983\u001b[0m \u001b[38;5;66;03m# Assign chunk of trees to jobs\u001b[39;00m\n\u001b[1;32m    984\u001b[0m n_jobs, _, _ \u001b[38;5;241m=\u001b[39m _partition_estimators(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_estimators, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:602\u001b[0m, in \u001b[0;36mBaseForest._validate_X_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    599\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    600\u001b[0m \u001b[38;5;124;03mValidate X whenever one tries to predict, apply, predict_proba.\"\"\"\u001b[39;00m\n\u001b[1;32m    601\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 602\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDTYPE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    603\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m issparse(X) \u001b[38;5;129;01mand\u001b[39;00m (X\u001b[38;5;241m.\u001b[39mindices\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc \u001b[38;5;129;01mor\u001b[39;00m X\u001b[38;5;241m.\u001b[39mindptr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc):\n\u001b[1;32m    604\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo support for np.int64 index based sparse matrices\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/base.py:588\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    585\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m    587\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[0;32m--> 588\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_n_features\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mreset\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    590\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m out\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/base.py:389\u001b[0m, in \u001b[0;36mBaseEstimator._check_n_features\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    386\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m    388\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m n_features \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_:\n\u001b[0;32m--> 389\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    390\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mn_features\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features, but \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    391\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mis expecting \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m features as input.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    392\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: X has 43 features, but RandomForestRegressor is expecting 10 features as input."],"ename":"ValueError","evalue":"X has 43 features, but RandomForestRegressor is expecting 10 features as input.","output_type":"error"}]},{"cell_type":"code","source":"pd.read_csv(\"/kaggle/working/output_submission_eval.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-04-09T19:00:39.650780Z","iopub.execute_input":"2024-04-09T19:00:39.651231Z","iopub.status.idle":"2024-04-09T19:00:39.672801Z","shell.execute_reply.started":"2024-04-09T19:00:39.651195Z","shell.execute_reply":"2024-04-09T19:00:39.671305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test","metadata":{"execution":{"iopub.status.busy":"2024-04-09T18:58:00.431419Z","iopub.execute_input":"2024-04-09T18:58:00.431932Z","iopub.status.idle":"2024-04-09T18:58:00.469203Z","shell.execute_reply.started":"2024-04-09T18:58:00.431892Z","shell.execute_reply":"2024-04-09T18:58:00.467940Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"id":"xRKZLwnaoFQf"},"execution_count":null,"outputs":[]}]}