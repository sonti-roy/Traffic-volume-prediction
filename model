{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":74696,"databundleVersionId":8151114,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Traffic Volume Prediction script contains data processing, model development, model improvement and evaluation, feature selection and engineering","metadata":{}},{"cell_type":"code","source":"# import necessary library and functions\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import mutual_info_regression, SelectPercentile, SelectKBest\nfrom sklearn.feature_selection import f_regression\nfrom xgboost import XGBRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:33:15.602611Z","iopub.execute_input":"2024-04-16T17:33:15.603037Z","iopub.status.idle":"2024-04-16T17:33:19.041401Z","shell.execute_reply.started":"2024-04-16T17:33:15.603005Z","shell.execute_reply":"2024-04-16T17:33:19.040035Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import warnings\n\n# Suppress all warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:33:19.043752Z","iopub.execute_input":"2024-04-16T17:33:19.045374Z","iopub.status.idle":"2024-04-16T17:33:19.051328Z","shell.execute_reply.started":"2024-04-16T17:33:19.045318Z","shell.execute_reply":"2024-04-16T17:33:19.050060Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"## 1. Data pre-processing","metadata":{"id":"nmmr2_EpuuRL"}},{"cell_type":"markdown","source":"## 1.a Data loading and QC","metadata":{}},{"cell_type":"code","source":"# Reading the Training Data\ndf = pd.read_csv(\"/kaggle/input/123ofai-predict-the-traffic-volume/train_set_dirty.csv\")","metadata":{"id":"m48BNoQUk9x-","execution":{"iopub.status.busy":"2024-04-16T17:35:42.091665Z","iopub.execute_input":"2024-04-16T17:35:42.092953Z","iopub.status.idle":"2024-04-16T17:35:42.194238Z","shell.execute_reply.started":"2024-04-16T17:35:42.092905Z","shell.execute_reply":"2024-04-16T17:35:42.192880Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"# 1. Displaying the first 10 records\ndf.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:35:43.285590Z","iopub.execute_input":"2024-04-16T17:35:43.286456Z","iopub.status.idle":"2024-04-16T17:35:43.309879Z","shell.execute_reply.started":"2024-04-16T17:35:43.286416Z","shell.execute_reply":"2024-04-16T17:35:43.308861Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"   traffic_volume holiday    temp  rain_1h  snow_1h  clouds_all weather_main  \\\n0          1493.0     NaN  287.15     0.00      0.0        90.0         Mist   \n1             NaN     NaN  282.25     0.00      0.0        90.0       Clouds   \n2             NaN     NaN     NaN     0.00      0.0        90.0      Drizzle   \n3          5626.0     NaN  252.08     0.00      0.0        20.0         Haze   \n4          5357.0     NaN  291.25     1.02      0.0         NaN         Rain   \n5          2827.0     NaN  272.79     0.00      0.0        90.0          NaN   \n6             NaN     NaN  292.61     0.00      0.0         8.0        Clear   \n7          4513.0     NaN  270.84     0.00      0.0        75.0       Clouds   \n8          3415.0     NaN  297.97     0.00      0.0        40.0       Clouds   \n9          1883.0     NaN  272.55     0.00      0.0         1.0          Fog   \n\n  weather_description         date_time  \n0                 NaN  18-09-2017 22:00  \n1     overcast clouds  23-05-2013 11:00  \n2             drizzle  04-06-2016 01:00  \n3                haze  04-01-2017 08:00  \n4       moderate rain  13-06-2013 13:00  \n5                snow  03-11-2017 20:00  \n6        sky is clear  08-06-2016 23:00  \n7       broken clouds  01-03-2017 10:00  \n8    scattered clouds  03-07-2016 13:00  \n9                 fog  26-11-2016 08:00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1493.0</td>\n      <td>NaN</td>\n      <td>287.15</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Mist</td>\n      <td>NaN</td>\n      <td>18-09-2017 22:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>282.25</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Clouds</td>\n      <td>overcast clouds</td>\n      <td>23-05-2013 11:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Drizzle</td>\n      <td>drizzle</td>\n      <td>04-06-2016 01:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5626.0</td>\n      <td>NaN</td>\n      <td>252.08</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>Haze</td>\n      <td>haze</td>\n      <td>04-01-2017 08:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5357.0</td>\n      <td>NaN</td>\n      <td>291.25</td>\n      <td>1.02</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>Rain</td>\n      <td>moderate rain</td>\n      <td>13-06-2013 13:00</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2827.0</td>\n      <td>NaN</td>\n      <td>272.79</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>NaN</td>\n      <td>snow</td>\n      <td>03-11-2017 20:00</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>292.61</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>08-06-2016 23:00</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4513.0</td>\n      <td>NaN</td>\n      <td>270.84</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>Clouds</td>\n      <td>broken clouds</td>\n      <td>01-03-2017 10:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3415.0</td>\n      <td>NaN</td>\n      <td>297.97</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Clouds</td>\n      <td>scattered clouds</td>\n      <td>03-07-2016 13:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1883.0</td>\n      <td>NaN</td>\n      <td>272.55</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Fog</td>\n      <td>fog</td>\n      <td>26-11-2016 08:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.b. Check dataset info - field types, non-null values, dtypes","metadata":{}},{"cell_type":"code","source":"# Null values in each column\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:35:44.865690Z","iopub.execute_input":"2024-04-16T17:35:44.866138Z","iopub.status.idle":"2024-04-16T17:35:44.889137Z","shell.execute_reply.started":"2024-04-16T17:35:44.866107Z","shell.execute_reply":"2024-04-16T17:35:44.887634Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"traffic_volume          3815\nholiday                38521\ntemp                    3809\nrain_1h                 3703\nsnow_1h                 3830\nclouds_all              3904\nweather_main            3909\nweather_description     3812\ndate_time               3880\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# data type of each column\nprint(df.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:35:45.530093Z","iopub.execute_input":"2024-04-16T17:35:45.530827Z","iopub.status.idle":"2024-04-16T17:35:45.541180Z","shell.execute_reply.started":"2024-04-16T17:35:45.530784Z","shell.execute_reply":"2024-04-16T17:35:45.539594Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"traffic_volume         float64\nholiday                 object\ntemp                   float64\nrain_1h                float64\nsnow_1h                float64\nclouds_all             float64\nweather_main            object\nweather_description     object\ndate_time               object\ndtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"# Shape of the data\nprint(df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:35:46.155033Z","iopub.execute_input":"2024-04-16T17:35:46.155456Z","iopub.status.idle":"2024-04-16T17:35:46.161298Z","shell.execute_reply.started":"2024-04-16T17:35:46.155426Z","shell.execute_reply":"2024-04-16T17:35:46.159802Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"(38563, 9)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.c Pre-processing (Cleaning): Address missing (NULL) values - drop or imputation","metadata":{}},{"cell_type":"code","source":"# drop rows contain NaN in the labels\ndf_new = df.dropna(subset = ['traffic_volume'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:00.835223Z","iopub.execute_input":"2024-04-16T17:59:00.835653Z","iopub.status.idle":"2024-04-16T17:59:00.851313Z","shell.execute_reply.started":"2024-04-16T17:59:00.835623Z","shell.execute_reply":"2024-04-16T17:59:00.849948Z"},"trusted":true},"execution_count":112,"outputs":[]},{"cell_type":"code","source":"# check holiday column unique values\ndf_new[\"holiday\"].unique()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:01.658083Z","iopub.execute_input":"2024-04-16T17:59:01.658474Z","iopub.status.idle":"2024-04-16T17:59:01.669166Z","shell.execute_reply.started":"2024-04-16T17:59:01.658437Z","shell.execute_reply":"2024-04-16T17:59:01.667830Z"},"trusted":true},"execution_count":113,"outputs":[{"execution_count":113,"output_type":"execute_result","data":{"text/plain":"array([nan, 'New Years Day', 'Memorial Day', 'Columbus Day',\n       'Martin Luther King Jr Day', 'Christmas Day', 'Thanksgiving Day',\n       'Labor Day', 'Veterans Day', 'Independence Day',\n       'Washingtons Birthday', 'State Fair'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_new.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:02.278281Z","iopub.execute_input":"2024-04-16T17:59:02.279248Z","iopub.status.idle":"2024-04-16T17:59:02.308061Z","shell.execute_reply.started":"2024-04-16T17:59:02.279204Z","shell.execute_reply":"2024-04-16T17:59:02.306670Z"},"trusted":true},"execution_count":114,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 34748 entries, 0 to 38562\nData columns (total 9 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   traffic_volume       34748 non-null  float64\n 1   holiday              34 non-null     object \n 2   temp                 31337 non-null  float64\n 3   rain_1h              31397 non-null  float64\n 4   snow_1h              31266 non-null  float64\n 5   clouds_all           31217 non-null  float64\n 6   weather_main         31231 non-null  object \n 7   weather_description  31325 non-null  object \n 8   date_time            31259 non-null  object \ndtypes: float64(5), object(4)\nmemory usage: 2.7+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:04.722546Z","iopub.execute_input":"2024-04-16T17:59:04.723029Z","iopub.status.idle":"2024-04-16T17:59:04.747267Z","shell.execute_reply.started":"2024-04-16T17:59:04.722998Z","shell.execute_reply":"2024-04-16T17:59:04.746235Z"},"trusted":true},"execution_count":115,"outputs":[{"execution_count":115,"output_type":"execute_result","data":{"text/plain":"traffic_volume             0\nholiday                34714\ntemp                    3411\nrain_1h                 3351\nsnow_1h                 3482\nclouds_all              3531\nweather_main            3517\nweather_description     3423\ndate_time               3489\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Testing","metadata":{}},{"cell_type":"code","source":"# # Convert 'date_time' to datetime format\n# df_new['date_time'] = pd.to_datetime(df_new['date_time'], errors='coerce', dayfirst=True)\n\n# # Filter rows where 'holiday' is not NaN\n# isHoliday = df_new['holiday'].notna()\n\n# # Extract date and holiday values where 'holiday' is not NaN\n# date = df_new.loc[isHoliday, 'date_time'].dt.date.values\n# holiday = df_new.loc[isHoliday, 'holiday'].values\n\n# mapping = dict(zip(date,holiday))\n\n# df_new['holiday'] = df_new['date_time'].dt.date.map(mapping)\n# df_new.loc[df_new['holiday'].isna(),'holiday'] = 'Work Day'\n\n# df_new['holiday'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:06.922765Z","iopub.execute_input":"2024-04-16T17:59:06.923221Z","iopub.status.idle":"2024-04-16T17:59:06.930818Z","shell.execute_reply.started":"2024-04-16T17:59:06.923189Z","shell.execute_reply":"2024-04-16T17:59:06.929180Z"},"trusted":true},"execution_count":116,"outputs":[]},{"cell_type":"code","source":"# drop rows contain NaN in the labels\ndf_new = df_new.dropna(subset = ['date_time'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:07.835574Z","iopub.execute_input":"2024-04-16T17:59:07.836045Z","iopub.status.idle":"2024-04-16T17:59:07.853667Z","shell.execute_reply.started":"2024-04-16T17:59:07.836012Z","shell.execute_reply":"2024-04-16T17:59:07.852395Z"},"trusted":true},"execution_count":117,"outputs":[]},{"cell_type":"code","source":"# Convert 'date_time' to datetime format\ndf_new['date_time'] = pd.to_datetime(df_new['date_time'], errors='coerce', dayfirst=True)\n\n# Filter rows where 'holiday' is not NaN\nisHoliday = df_new['holiday'].notna().copy()\n\n# Extract date and holiday values where 'holiday' is not NaN\ndate = df_new.loc[isHoliday, 'date_time'].dt.date.values\nholiday = df_new.loc[isHoliday, 'holiday'].values\n\n# Create mapping dictionary\nmapping = dict(zip(date, holiday))\nmapping.pop(pd.NaT, None)\n\n# Map 'date_time' to 'holiday' using the mapping dictionary, filling NaN values with corresponding holidays\ndf_new.loc[:,'holiday'] = df_new['date_time'].dt.date.map(mapping)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:25.823016Z","iopub.execute_input":"2024-04-16T17:59:25.823890Z","iopub.status.idle":"2024-04-16T17:59:26.050159Z","shell.execute_reply.started":"2024-04-16T17:59:25.823850Z","shell.execute_reply":"2024-04-16T17:59:26.048817Z"},"trusted":true},"execution_count":118,"outputs":[]},{"cell_type":"code","source":"# Replace NaN with 0 and other values with 1 in holiday\ndf_new.loc[:, 'holiday'] = np.where(df_new['holiday'].isnull(), 0, 1)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:31.838863Z","iopub.execute_input":"2024-04-16T17:59:31.839379Z","iopub.status.idle":"2024-04-16T17:59:31.849124Z","shell.execute_reply.started":"2024-04-16T17:59:31.839344Z","shell.execute_reply":"2024-04-16T17:59:31.847753Z"},"trusted":true},"execution_count":119,"outputs":[]},{"cell_type":"code","source":"df_new['holiday'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:34.187622Z","iopub.execute_input":"2024-04-16T17:59:34.188055Z","iopub.status.idle":"2024-04-16T17:59:34.198068Z","shell.execute_reply.started":"2024-04-16T17:59:34.188023Z","shell.execute_reply":"2024-04-16T17:59:34.196692Z"},"trusted":true},"execution_count":120,"outputs":[{"execution_count":120,"output_type":"execute_result","data":{"text/plain":"array([0, 1], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_new['day'] = df_new.date_time.dt.day\ndf_new['month'] = df_new.date_time.dt.month_name()\ndf_new['year'] = df_new.date_time.dt.year\ndf_new['weekday'] = df_new.date_time.dt.day_name()\ndf_new['hour'] = df_new.date_time.dt.hour","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:48.734519Z","iopub.execute_input":"2024-04-16T17:59:48.734926Z","iopub.status.idle":"2024-04-16T17:59:48.774339Z","shell.execute_reply.started":"2024-04-16T17:59:48.734896Z","shell.execute_reply":"2024-04-16T17:59:48.773128Z"},"trusted":true},"execution_count":121,"outputs":[]},{"cell_type":"code","source":"df_new","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:51.807693Z","iopub.execute_input":"2024-04-16T17:59:51.808122Z","iopub.status.idle":"2024-04-16T17:59:51.833133Z","shell.execute_reply.started":"2024-04-16T17:59:51.808089Z","shell.execute_reply":"2024-04-16T17:59:51.831464Z"},"trusted":true},"execution_count":122,"outputs":[{"execution_count":122,"output_type":"execute_result","data":{"text/plain":"       traffic_volume holiday     temp  rain_1h  snow_1h  clouds_all  \\\n0           1493.0000       0 287.1500   0.0000   0.0000     90.0000   \n3           5626.0000       0 252.0800   0.0000   0.0000     20.0000   \n4           5357.0000       0 291.2500   1.0200   0.0000         NaN   \n5           2827.0000       0 272.7900   0.0000   0.0000     90.0000   \n7           4513.0000       0 270.8400   0.0000   0.0000     75.0000   \n...               ...     ...      ...      ...      ...         ...   \n38557        393.0000       0 267.0200   0.0000   0.0000     90.0000   \n38558       4727.0000       0 267.5900   0.0000   0.0000      5.0000   \n38560       3009.0000       0 256.6400   0.0000   0.0000      1.0000   \n38561        295.0000       0 286.6900   0.0000      NaN      1.0000   \n38562        746.0000       0 290.1800   0.0000   0.0000         NaN   \n\n       weather_main     weather_description           date_time  day  \\\n0              Mist                     NaN 2017-09-18 22:00:00   18   \n3              Haze                    haze 2017-01-04 08:00:00    4   \n4              Rain           moderate rain 2013-06-13 13:00:00   13   \n5               NaN                    snow 2017-11-03 20:00:00    3   \n7            Clouds           broken clouds 2017-03-01 10:00:00    1   \n...             ...                     ...                 ...  ...   \n38557        Clouds         overcast clouds 2017-02-10 01:00:00   10   \n38558         Clear            sky is clear 2017-01-14 16:00:00   14   \n38560         Clear            sky is clear 2014-02-07 22:00:00    7   \n38561         Clear            sky is clear 2017-04-09 04:00:00    9   \n38562  Thunderstorm  proximity thunderstorm 2013-05-01 04:00:00    1   \n\n           month  year    weekday  hour  \n0      September  2017     Monday    22  \n3        January  2017  Wednesday     8  \n4           June  2013   Thursday    13  \n5       November  2017     Friday    20  \n7          March  2017  Wednesday    10  \n...          ...   ...        ...   ...  \n38557   February  2017     Friday     1  \n38558    January  2017   Saturday    16  \n38560   February  2014     Friday    22  \n38561      April  2017     Sunday     4  \n38562        May  2013  Wednesday     4  \n\n[31259 rows x 14 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1493.0000</td>\n      <td>0</td>\n      <td>287.1500</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90.0000</td>\n      <td>Mist</td>\n      <td>NaN</td>\n      <td>2017-09-18 22:00:00</td>\n      <td>18</td>\n      <td>September</td>\n      <td>2017</td>\n      <td>Monday</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5626.0000</td>\n      <td>0</td>\n      <td>252.0800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>20.0000</td>\n      <td>Haze</td>\n      <td>haze</td>\n      <td>2017-01-04 08:00:00</td>\n      <td>4</td>\n      <td>January</td>\n      <td>2017</td>\n      <td>Wednesday</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5357.0000</td>\n      <td>0</td>\n      <td>291.2500</td>\n      <td>1.0200</td>\n      <td>0.0000</td>\n      <td>NaN</td>\n      <td>Rain</td>\n      <td>moderate rain</td>\n      <td>2013-06-13 13:00:00</td>\n      <td>13</td>\n      <td>June</td>\n      <td>2013</td>\n      <td>Thursday</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2827.0000</td>\n      <td>0</td>\n      <td>272.7900</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90.0000</td>\n      <td>NaN</td>\n      <td>snow</td>\n      <td>2017-11-03 20:00:00</td>\n      <td>3</td>\n      <td>November</td>\n      <td>2017</td>\n      <td>Friday</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4513.0000</td>\n      <td>0</td>\n      <td>270.8400</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>75.0000</td>\n      <td>Clouds</td>\n      <td>broken clouds</td>\n      <td>2017-03-01 10:00:00</td>\n      <td>1</td>\n      <td>March</td>\n      <td>2017</td>\n      <td>Wednesday</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>38557</th>\n      <td>393.0000</td>\n      <td>0</td>\n      <td>267.0200</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>90.0000</td>\n      <td>Clouds</td>\n      <td>overcast clouds</td>\n      <td>2017-02-10 01:00:00</td>\n      <td>10</td>\n      <td>February</td>\n      <td>2017</td>\n      <td>Friday</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>38558</th>\n      <td>4727.0000</td>\n      <td>0</td>\n      <td>267.5900</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>5.0000</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-01-14 16:00:00</td>\n      <td>14</td>\n      <td>January</td>\n      <td>2017</td>\n      <td>Saturday</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>38560</th>\n      <td>3009.0000</td>\n      <td>0</td>\n      <td>256.6400</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>1.0000</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2014-02-07 22:00:00</td>\n      <td>7</td>\n      <td>February</td>\n      <td>2014</td>\n      <td>Friday</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>38561</th>\n      <td>295.0000</td>\n      <td>0</td>\n      <td>286.6900</td>\n      <td>0.0000</td>\n      <td>NaN</td>\n      <td>1.0000</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>2017-04-09 04:00:00</td>\n      <td>9</td>\n      <td>April</td>\n      <td>2017</td>\n      <td>Sunday</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>38562</th>\n      <td>746.0000</td>\n      <td>0</td>\n      <td>290.1800</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>NaN</td>\n      <td>Thunderstorm</td>\n      <td>proximity thunderstorm</td>\n      <td>2013-05-01 04:00:00</td>\n      <td>1</td>\n      <td>May</td>\n      <td>2013</td>\n      <td>Wednesday</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>31259 rows × 14 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ndf_new['day_time'] = df_new[['hour']].applymap(getDayTime)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:55.617541Z","iopub.execute_input":"2024-04-16T17:59:55.617956Z","iopub.status.idle":"2024-04-16T17:59:55.646069Z","shell.execute_reply.started":"2024-04-16T17:59:55.617926Z","shell.execute_reply":"2024-04-16T17:59:55.644776Z"},"trusted":true},"execution_count":123,"outputs":[]},{"cell_type":"code","source":"df_new['holiday'] = df_new['holiday'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:59:58.962311Z","iopub.execute_input":"2024-04-16T17:59:58.962754Z","iopub.status.idle":"2024-04-16T17:59:58.971248Z","shell.execute_reply.started":"2024-04-16T17:59:58.962726Z","shell.execute_reply":"2024-04-16T17:59:58.969936Z"},"trusted":true},"execution_count":124,"outputs":[]},{"cell_type":"code","source":"# check holiday column values\ndf_new['holiday'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:00:03.237935Z","iopub.execute_input":"2024-04-16T18:00:03.238394Z","iopub.status.idle":"2024-04-16T18:00:03.248923Z","shell.execute_reply.started":"2024-04-16T18:00:03.238363Z","shell.execute_reply":"2024-04-16T18:00:03.247320Z"},"trusted":true},"execution_count":125,"outputs":[{"execution_count":125,"output_type":"execute_result","data":{"text/plain":"array([0, 1])"},"metadata":{}}]},{"cell_type":"code","source":"# check the new data frame\ndf_new.isnull().sum(axis = 0)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:00:05.748198Z","iopub.execute_input":"2024-04-16T18:00:05.748622Z","iopub.status.idle":"2024-04-16T18:00:05.778528Z","shell.execute_reply.started":"2024-04-16T18:00:05.748593Z","shell.execute_reply":"2024-04-16T18:00:05.777577Z"},"trusted":true},"execution_count":126,"outputs":[{"execution_count":126,"output_type":"execute_result","data":{"text/plain":"traffic_volume            0\nholiday                   0\ntemp                   3059\nrain_1h                3007\nsnow_1h                3161\nclouds_all             3173\nweather_main           3167\nweather_description    3086\ndate_time                 0\nday                       0\nmonth                     0\nyear                      0\nweekday                   0\nhour                      0\nday_time                  0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# df_new = df_new.sort_values('date_time')","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:36:13.205260Z","iopub.execute_input":"2024-04-16T17:36:13.205653Z","iopub.status.idle":"2024-04-16T17:36:13.225829Z","shell.execute_reply.started":"2024-04-16T17:36:13.205625Z","shell.execute_reply":"2024-04-16T17:36:13.224537Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"# temperature is interpolate \n# df_new.loc[:, 'temp'] = df_new['temp'].interpolate(method='linear')\n# median is used instead of interpolate and it give better performance\n# df_new.loc[:, 'temp'] = df_new['temp'].fillna(df_new['temp'].median())\n# df_new.temp.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:36:16.215548Z","iopub.execute_input":"2024-04-16T17:36:16.216587Z","iopub.status.idle":"2024-04-16T17:36:16.227759Z","shell.execute_reply.started":"2024-04-16T17:36:16.216534Z","shell.execute_reply":"2024-04-16T17:36:16.226245Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"# fill na with mean values\n# df_new.loc[:, 'rain_1h'] = df_new['rain_1h'].interpolate(method='linear')\n# df_new.loc[:, 'snow_1h'] = df_new['snow_1h'].interpolate(method='linear')\n# df_new.loc[:, 'rain_1h'] = df_new['rain_1h'].fillna(df_new['rain_1h'].median())\n# df_new.loc[:, 'snow_1h'] = df_new['snow_1h'].fillna(df_new['snow_1h'].median())\n# df_new.rain_1h.fillna(method='ffill',inplace=True)\n# df_new.snow_1h.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:36:17.410141Z","iopub.execute_input":"2024-04-16T17:36:17.410829Z","iopub.status.idle":"2024-04-16T17:36:17.427080Z","shell.execute_reply.started":"2024-04-16T17:36:17.410796Z","shell.execute_reply":"2024-04-16T17:36:17.425599Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"# clouds_all is interpolate \n# df_new.loc[:, 'clouds_all'] = df_new['clouds_all'].interpolate(method='linear')\n# as dates are not in order interpolate will not work so median is used\n# df_new.loc[:, 'clouds_all'] = df_new['clouds_all'].fillna(df_new['clouds_all'].median())\n# df_new.clouds_all.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:36:18.760626Z","iopub.execute_input":"2024-04-16T17:36:18.761097Z","iopub.status.idle":"2024-04-16T17:36:18.773444Z","shell.execute_reply.started":"2024-04-16T17:36:18.761065Z","shell.execute_reply":"2024-04-16T17:36:18.771657Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"code","source":"df_new = df_new.dropna(subset = ['temp'])\ndf_new = df_new.dropna(subset = ['rain_1h'])\ndf_new = df_new.dropna(subset = ['snow_1h'])\ndf_new = df_new.dropna(subset = ['clouds_all'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:01.028021Z","iopub.execute_input":"2024-04-16T18:02:01.028749Z","iopub.status.idle":"2024-04-16T18:02:01.058183Z","shell.execute_reply.started":"2024-04-16T18:02:01.028713Z","shell.execute_reply":"2024-04-16T18:02:01.056781Z"},"trusted":true},"execution_count":128,"outputs":[]},{"cell_type":"code","source":"# isolate the key word in weather description\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].str.split().str[-1]","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:06.017186Z","iopub.execute_input":"2024-04-16T18:02:06.017709Z","iopub.status.idle":"2024-04-16T18:02:06.063615Z","shell.execute_reply.started":"2024-04-16T18:02:06.017673Z","shell.execute_reply":"2024-04-16T18:02:06.062202Z"},"trusted":true},"execution_count":129,"outputs":[]},{"cell_type":"code","source":"# convert to lower case\ndf_new.loc[:, 'weather_main'] = df_new['weather_main'].str.lower()\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].str.lower()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:07.282359Z","iopub.execute_input":"2024-04-16T18:02:07.282873Z","iopub.status.idle":"2024-04-16T18:02:07.304599Z","shell.execute_reply.started":"2024-04-16T18:02:07.282839Z","shell.execute_reply":"2024-04-16T18:02:07.303100Z"},"trusted":true},"execution_count":130,"outputs":[]},{"cell_type":"code","source":"# replace weather main with weather description if nan\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].fillna(df_new['weather_main'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:08.231333Z","iopub.execute_input":"2024-04-16T18:02:08.232610Z","iopub.status.idle":"2024-04-16T18:02:08.242996Z","shell.execute_reply.started":"2024-04-16T18:02:08.232575Z","shell.execute_reply":"2024-04-16T18:02:08.241051Z"},"trusted":true},"execution_count":131,"outputs":[]},{"cell_type":"code","source":"# replace weather main with weather description if nan\ndf_new.loc[:, 'weather_main'] = df_new['weather_main'].fillna(df_new['weather_description'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:18.261880Z","iopub.execute_input":"2024-04-16T18:02:18.262357Z","iopub.status.idle":"2024-04-16T18:02:18.274289Z","shell.execute_reply.started":"2024-04-16T18:02:18.262324Z","shell.execute_reply":"2024-04-16T18:02:18.272602Z"},"trusted":true},"execution_count":132,"outputs":[]},{"cell_type":"code","source":"# drop nan rows for weather_main\ndf_new = df_new.dropna(subset=['weather_main'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:19.621647Z","iopub.execute_input":"2024-04-16T18:02:19.622083Z","iopub.status.idle":"2024-04-16T18:02:19.638111Z","shell.execute_reply.started":"2024-04-16T18:02:19.622052Z","shell.execute_reply":"2024-04-16T18:02:19.636562Z"},"trusted":true},"execution_count":133,"outputs":[]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:22.411356Z","iopub.execute_input":"2024-04-16T18:02:22.412471Z","iopub.status.idle":"2024-04-16T18:02:22.436096Z","shell.execute_reply.started":"2024-04-16T18:02:22.412402Z","shell.execute_reply":"2024-04-16T18:02:22.434771Z"},"trusted":true},"execution_count":134,"outputs":[{"execution_count":134,"output_type":"execute_result","data":{"text/plain":"traffic_volume         0\nholiday                0\ntemp                   0\nrain_1h                0\nsnow_1h                0\nclouds_all             0\nweather_main           0\nweather_description    0\ndate_time              0\nday                    0\nmonth                  0\nyear                   0\nweekday                0\nhour                   0\nday_time               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:26.381370Z","iopub.execute_input":"2024-04-16T18:02:26.382700Z","iopub.status.idle":"2024-04-16T18:02:26.391185Z","shell.execute_reply.started":"2024-04-16T18:02:26.382657Z","shell.execute_reply":"2024-04-16T18:02:26.390006Z"},"trusted":true},"execution_count":135,"outputs":[{"execution_count":135,"output_type":"execute_result","data":{"text/plain":"traffic_volume                float64\nholiday                         int64\ntemp                          float64\nrain_1h                       float64\nsnow_1h                       float64\nclouds_all                    float64\nweather_main                   object\nweather_description            object\ndate_time              datetime64[ns]\nday                             int32\nmonth                          object\nyear                            int32\nweekday                        object\nhour                            int32\nday_time                       object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# df_new.loc[:,'day'] = df_new['date_time'].dt.day_name()\n# df_new.loc[:,'month'] = df_new['date_time'].dt.month_name()\n# df_new.loc[:,'year'] = df_new['date_time'].dt.year.astype(str)\n# df_new.loc[:,'hour'] = df_new['date_time'].dt.hour","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:33.661819Z","iopub.execute_input":"2024-04-16T18:02:33.662325Z","iopub.status.idle":"2024-04-16T18:02:33.668976Z","shell.execute_reply.started":"2024-04-16T18:02:33.662288Z","shell.execute_reply":"2024-04-16T18:02:33.667204Z"},"trusted":true},"execution_count":136,"outputs":[]},{"cell_type":"code","source":"# # seperate date and time into two column\n# df_new[['date', 'time']] = df_new['date_time'].str.split(' ', expand=True)\n# df_new[['hour', 'minute']] = df_new['time'].str.split(':', expand=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:47.121633Z","iopub.execute_input":"2024-04-16T18:02:47.122073Z","iopub.status.idle":"2024-04-16T18:02:47.126254Z","shell.execute_reply.started":"2024-04-16T18:02:47.122044Z","shell.execute_reply":"2024-04-16T18:02:47.125078Z"},"trusted":true},"execution_count":137,"outputs":[]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:47.128084Z","iopub.execute_input":"2024-04-16T18:02:47.128703Z","iopub.status.idle":"2024-04-16T18:02:47.158908Z","shell.execute_reply.started":"2024-04-16T18:02:47.128672Z","shell.execute_reply":"2024-04-16T18:02:47.157825Z"},"trusted":true},"execution_count":138,"outputs":[{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"traffic_volume         0\nholiday                0\ntemp                   0\nrain_1h                0\nsnow_1h                0\nclouds_all             0\nweather_main           0\nweather_description    0\ndate_time              0\nday                    0\nmonth                  0\nyear                   0\nweekday                0\nhour                   0\nday_time               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# # date is converted to multiple features like day, month and year\n# df_new['date'] = pd.to_datetime(df_new['date'],dayfirst=True)\n# df_new['day'] = df_new['date'].dt.day_name()\n# df_new['month'] = df_new['date'].dt.month_name()\n# df_new['year'] = df_new['date'].dt.year.astype(str)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:49.941391Z","iopub.execute_input":"2024-04-16T18:02:49.941875Z","iopub.status.idle":"2024-04-16T18:02:49.946672Z","shell.execute_reply.started":"2024-04-16T18:02:49.941844Z","shell.execute_reply":"2024-04-16T18:02:49.945576Z"},"trusted":true},"execution_count":139,"outputs":[]},{"cell_type":"markdown","source":"## 1.d. Pre-processing (Cleaning): Remove Duplicate Rows","metadata":{}},{"cell_type":"code","source":"df_new = df_new.drop_duplicates()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:52.581693Z","iopub.execute_input":"2024-04-16T18:02:52.582708Z","iopub.status.idle":"2024-04-16T18:02:52.618315Z","shell.execute_reply.started":"2024-04-16T18:02:52.582672Z","shell.execute_reply":"2024-04-16T18:02:52.617016Z"},"trusted":true},"execution_count":140,"outputs":[]},{"cell_type":"markdown","source":"## 1.e. Pre-processing (Cleaning): Drop irrelevant columns (that you don't want to give as input to the model)","metadata":{}},{"cell_type":"code","source":"# drop the date and date_time column\n# df_new = df_new.drop(columns=['date_time','date','time','minute','weather_description'])\ndf_new = df_new.drop(columns=['date_time','weather_description'])","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:02:56.611179Z","iopub.execute_input":"2024-04-16T18:02:56.611693Z","iopub.status.idle":"2024-04-16T18:02:56.622049Z","shell.execute_reply.started":"2024-04-16T18:02:56.611659Z","shell.execute_reply":"2024-04-16T18:02:56.620751Z"},"trusted":true},"execution_count":141,"outputs":[]},{"cell_type":"markdown","source":"## 1.f. Pre-processing (Encoding): Convert categorical values to numeric","metadata":{}},{"cell_type":"code","source":"df_new['weather_main'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:03:00.756246Z","iopub.execute_input":"2024-04-16T18:03:00.756996Z","iopub.status.idle":"2024-04-16T18:03:00.771883Z","shell.execute_reply.started":"2024-04-16T18:03:00.756960Z","shell.execute_reply":"2024-04-16T18:03:00.770450Z"},"trusted":true},"execution_count":142,"outputs":[{"execution_count":142,"output_type":"execute_result","data":{"text/plain":"weather_main\nclouds          6512\nclear           5586\nmist            2501\nrain            2383\nsnow            1226\ndrizzle          718\nhaze             585\nthunderstorm     411\nfog              383\nsmoke              7\nsquall             1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:03:02.260940Z","iopub.execute_input":"2024-04-16T18:03:02.261332Z","iopub.status.idle":"2024-04-16T18:03:02.272234Z","shell.execute_reply.started":"2024-04-16T18:03:02.261305Z","shell.execute_reply":"2024-04-16T18:03:02.270551Z"},"trusted":true},"execution_count":143,"outputs":[{"execution_count":143,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main       object\nday                 int32\nmonth              object\nyear                int32\nweekday            object\nhour                int32\nday_time           object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df_new['weather_main'] = df_new['weather_main'].astype('category').cat.codes + 1\ndf_new['day'] = df_new['day'].astype('category').cat.codes + 1\ndf_new['month'] = df_new['month'].astype('category').cat.codes + 1\ndf_new['year'] = df_new['year'].astype('category').cat.codes + 1\ndf_new['day_time'] = df_new['day_time'].astype('category').cat.codes + 1\ndf_new['weekday'] = df_new['weekday'].astype('category').cat.codes + 1\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:03:51.081245Z","iopub.execute_input":"2024-04-16T18:03:51.081688Z","iopub.status.idle":"2024-04-16T18:03:51.108858Z","shell.execute_reply.started":"2024-04-16T18:03:51.081657Z","shell.execute_reply":"2024-04-16T18:03:51.107288Z"},"trusted":true},"execution_count":144,"outputs":[]},{"cell_type":"code","source":"df_new[\"day\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:57:31.388002Z","iopub.execute_input":"2024-04-16T17:57:31.388716Z","iopub.status.idle":"2024-04-16T17:57:31.397943Z","shell.execute_reply.started":"2024-04-16T17:57:31.388684Z","shell.execute_reply":"2024-04-16T17:57:31.396638Z"},"trusted":true},"execution_count":111,"outputs":[{"execution_count":111,"output_type":"execute_result","data":{"text/plain":"array([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  1], dtype=int8)"},"metadata":{}}]},{"cell_type":"code","source":"# # one-hot coding for multiple columns\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['weather_main'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['day'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['month'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['year'],dtype=int)], axis=1)\n# df_new.drop(columns=['weather_main','day','month','year'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:38:25.095333Z","iopub.execute_input":"2024-04-16T17:38:25.095770Z","iopub.status.idle":"2024-04-16T17:38:25.101552Z","shell.execute_reply.started":"2024-04-16T17:38:25.095738Z","shell.execute_reply":"2024-04-16T17:38:25.100082Z"},"trusted":true},"execution_count":81,"outputs":[]},{"cell_type":"markdown","source":"# 2. Data understanding - Find out stats regarding your data (df.describe(), df.mean(), df.median())","metadata":{}},{"cell_type":"code","source":"# describe the data \ndf_new.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:38:30.445646Z","iopub.execute_input":"2024-04-16T17:38:30.446143Z","iopub.status.idle":"2024-04-16T17:38:30.510916Z","shell.execute_reply.started":"2024-04-16T17:38:30.446108Z","shell.execute_reply":"2024-04-16T17:38:30.509662Z"},"trusted":true},"execution_count":82,"outputs":[{"execution_count":82,"output_type":"execute_result","data":{"text/plain":"       traffic_volume       holiday          temp       rain_1h       snow_1h  \\\ncount    30845.000000  30845.000000  30845.000000  30845.000000  30845.000000   \nmean      3256.214459      0.015497    281.163026      0.130153      0.000224   \nstd       1986.882009      0.123520     13.342527      1.027411      0.007973   \nmin          0.000000      0.000000      0.000000      0.000000      0.000000   \n25%       1196.000000      0.000000    272.150000      0.000000      0.000000   \n50%       3369.000000      0.000000    282.420000      0.000000      0.000000   \n75%       4930.000000      0.000000    291.796000      0.000000      0.000000   \nmax       7280.000000      1.000000    308.430000     55.630000      0.510000   \n\n         clouds_all  weather_main           day         month          year  \\\ncount  30845.000000  30845.000000  30845.000000  30845.000000  30845.000000   \nmean      49.406857      3.571632     15.689804      6.339861      4.520895   \nstd       38.653831      2.773580      8.732880      3.422514      1.891388   \nmin        0.000000      1.000000      1.000000      1.000000      1.000000   \n25%        1.000000      1.000000      8.000000      3.000000      3.000000   \n50%       64.000000      2.000000     16.000000      6.000000      5.000000   \n75%       90.000000      6.000000     23.000000      9.000000      6.000000   \nmax      100.000000     11.000000     31.000000     12.000000      7.000000   \n\n            weekday          hour      day_time  \ncount  30845.000000  30845.000000  30845.000000  \nmean       3.991830     11.408494      3.632485  \nstd        1.996138      6.946675      1.766376  \nmin        1.000000      0.000000      1.000000  \n25%        2.000000      5.000000      2.000000  \n50%        4.000000     11.000000      4.000000  \n75%        6.000000     17.000000      5.000000  \nmax        7.000000     23.000000      6.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n      <td>30845.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3256.214459</td>\n      <td>0.015497</td>\n      <td>281.163026</td>\n      <td>0.130153</td>\n      <td>0.000224</td>\n      <td>49.406857</td>\n      <td>3.571632</td>\n      <td>15.689804</td>\n      <td>6.339861</td>\n      <td>4.520895</td>\n      <td>3.991830</td>\n      <td>11.408494</td>\n      <td>3.632485</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1986.882009</td>\n      <td>0.123520</td>\n      <td>13.342527</td>\n      <td>1.027411</td>\n      <td>0.007973</td>\n      <td>38.653831</td>\n      <td>2.773580</td>\n      <td>8.732880</td>\n      <td>3.422514</td>\n      <td>1.891388</td>\n      <td>1.996138</td>\n      <td>6.946675</td>\n      <td>1.766376</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1196.000000</td>\n      <td>0.000000</td>\n      <td>272.150000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>8.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3369.000000</td>\n      <td>0.000000</td>\n      <td>282.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>64.000000</td>\n      <td>2.000000</td>\n      <td>16.000000</td>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>11.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4930.000000</td>\n      <td>0.000000</td>\n      <td>291.796000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>90.000000</td>\n      <td>6.000000</td>\n      <td>23.000000</td>\n      <td>9.000000</td>\n      <td>6.000000</td>\n      <td>6.000000</td>\n      <td>17.000000</td>\n      <td>5.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7280.000000</td>\n      <td>1.000000</td>\n      <td>308.430000</td>\n      <td>55.630000</td>\n      <td>0.510000</td>\n      <td>100.000000</td>\n      <td>11.000000</td>\n      <td>31.000000</td>\n      <td>12.000000</td>\n      <td>7.000000</td>\n      <td>7.000000</td>\n      <td>23.000000</td>\n      <td>6.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# display some rows\ndf_new.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:38:31.675384Z","iopub.execute_input":"2024-04-16T17:38:31.675891Z","iopub.status.idle":"2024-04-16T17:38:31.698299Z","shell.execute_reply.started":"2024-04-16T17:38:31.675854Z","shell.execute_reply":"2024-04-16T17:38:31.696855Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"       traffic_volume  holiday    temp  rain_1h  snow_1h  clouds_all  \\\n18950          5545.0        0  288.28      0.0      0.0        40.0   \n15019          5584.0        0  293.17      0.0      0.0         1.0   \n20647          6015.0        0  293.86      0.0      0.0         1.0   \n21969          5791.0        0  294.14      0.0      0.0        20.0   \n23810          4770.0        0  293.10      0.0      0.0        20.0   \n\n       weather_main  day  month  year  weekday  hour  day_time  \n18950             2    2     11     1        6     9         5  \n15019             1    2     11     1        6    15         1  \n20647             1    2     11     1        6    16         3  \n21969             2    2     11     1        6    17         3  \n23810             2    2     11     1        6    18         3  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18950</th>\n      <td>5545.0</td>\n      <td>0</td>\n      <td>288.28</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>9</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>15019</th>\n      <td>5584.0</td>\n      <td>0</td>\n      <td>293.17</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>20647</th>\n      <td>6015.0</td>\n      <td>0</td>\n      <td>293.86</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>16</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>21969</th>\n      <td>5791.0</td>\n      <td>0</td>\n      <td>294.14</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>17</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>23810</th>\n      <td>4770.0</td>\n      <td>0</td>\n      <td>293.10</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>18</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:38:32.650165Z","iopub.execute_input":"2024-04-16T17:38:32.650857Z","iopub.status.idle":"2024-04-16T17:38:32.660013Z","shell.execute_reply.started":"2024-04-16T17:38:32.650820Z","shell.execute_reply":"2024-04-16T17:38:32.659049Z"},"trusted":true},"execution_count":84,"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main         int8\nday                  int8\nmonth                int8\nyear                 int8\nweekday              int8\nhour                int32\nday_time             int8\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"# 3. Data understanding - Make use of plots to build more understanding of the data**","metadata":{}},{"cell_type":"code","source":"# put some exploratory plots\n#create histogram for each column in DataFrame\ndf_new.hist(figsize = (10,10))","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:29:14.546076Z","iopub.execute_input":"2024-04-16T17:29:14.546458Z","iopub.status.idle":"2024-04-16T17:29:16.898454Z","shell.execute_reply.started":"2024-04-16T17:29:14.546427Z","shell.execute_reply":"2024-04-16T17:29:16.897425Z"},"trusted":true},"execution_count":485,"outputs":[{"execution_count":485,"output_type":"execute_result","data":{"text/plain":"array([[<Axes: title={'center': 'traffic_volume'}>,\n        <Axes: title={'center': 'holiday'}>,\n        <Axes: title={'center': 'temp'}>,\n        <Axes: title={'center': 'rain_1h'}>],\n       [<Axes: title={'center': 'snow_1h'}>,\n        <Axes: title={'center': 'clouds_all'}>,\n        <Axes: title={'center': 'weather_main'}>,\n        <Axes: title={'center': 'day'}>],\n       [<Axes: title={'center': 'month'}>,\n        <Axes: title={'center': 'year'}>,\n        <Axes: title={'center': 'weekday'}>,\n        <Axes: title={'center': 'hour'}>],\n       [<Axes: title={'center': 'day_time'}>, <Axes: >, <Axes: >,\n        <Axes: >]], dtype=object)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 16 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# put  some exploratory plots\n# distribution of traffic volume\ndf_new.plot.box(y = \"traffic_volume\")","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:29:16.900531Z","iopub.execute_input":"2024-04-16T17:29:16.901180Z","iopub.status.idle":"2024-04-16T17:29:17.072141Z","shell.execute_reply.started":"2024-04-16T17:29:16.901144Z","shell.execute_reply":"2024-04-16T17:29:17.071150Z"},"trusted":true},"execution_count":486,"outputs":[{"execution_count":486,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# distribution of day variable\ndf_new.plot.box(y = \"day\")","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:29:18.075500Z","iopub.execute_input":"2024-04-16T17:29:18.075870Z","iopub.status.idle":"2024-04-16T17:29:18.299817Z","shell.execute_reply.started":"2024-04-16T17:29:18.075842Z","shell.execute_reply":"2024-04-16T17:29:18.298567Z"},"trusted":true},"execution_count":487,"outputs":[{"execution_count":487,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# distribution of hour variable\ndf_new.plot.box(y = \"hour\")","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:29:18.765305Z","iopub.execute_input":"2024-04-16T17:29:18.766391Z"},"trusted":true},"execution_count":null,"outputs":[{"execution_count":488,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAh8AAAGdCAYAAACyzRGfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUz0lEQVR4nO3dbYxVhbno8Wd420MZZnDKyzAyKAJVUdEErSWldrREJDkGW5KiaSIY0yYNmDslDTmcVBHbZFJzY71tqXxpVT5YSZNbTP1Ar6VXyGkBC4a03FoDlF6hwKC0zGYmMnCZfT/0OOeMUnVgz7PZw++XrMB6mbWe+TT/rL323jWlUqkUAABJhlV6AADg8iI+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBUIyo9wPv19vbGkSNHYuzYsVFTU1PpcQCAj6FUKsWpU6eiubk5hg378Hsbl1x8HDlyJFpaWio9BgBwAQ4dOhRTpkz50GMuufgYO3ZsRPxj+Pr6+gpPAwB8HMViMVpaWvr+jn+YSy4+3nuppb6+XnwAQJX5OI9MeOAUAEglPgCAVOIDAEglPgCAVOIDAEglPgCAVOIDAEglPgCAVOIDAEglPgCAVOIDAEglPgCAVJfcF8sBl553z5yLA293XfR5Tp89F4f//m5MuWJ01I4cXobJIqZPqIvRo8pzLiCH+AA+0oG3u+JffvDvlR7jvF5+ZF7ceGVDpccABkB8AB9p+oS6ePmReRd9nv3Hu6Jt4554esktMWNiXRkm+8dsQHURH8BHGj1qeFnvLsyYWOduBVzGPHAKAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQaUHy0t7fHbbfdFmPHjo2JEyfGfffdF2+++Wa/Y06fPh3Lly+PT37yk1FXVxeLFy+Ojo6Osg4NAFSvAcXH1q1bY/ny5bFjx4545ZVX4uzZs3H33XdHd3d33zHf+MY34he/+EX87Gc/i61bt8aRI0fiS1/6UtkHBwCq04iBHLx58+Z+688991xMnDgxdu/eHXfccUd0dnbGj3/843jhhRfirrvuioiIZ599Nq6//vrYsWNHfOYznynf5ABAVbqoZz46OzsjIqKxsTEiInbv3h1nz56N+fPn9x1z3XXXxdSpU2P79u3nPUdPT08Ui8V+CwAwdF1wfPT29kZbW1t89rOfjRtvvDEiIo4dOxajRo2KcePG9Tt20qRJcezYsfOep729PRoaGvqWlpaWCx0JAKgCFxwfy5cvj71798aLL754UQOsXr06Ojs7+5ZDhw5d1PkAgEvbgJ75eM+KFSvi5Zdfjm3btsWUKVP6tjc1NcWZM2fi5MmT/e5+dHR0RFNT03nPVSgUolAoXMgYAEAVGtCdj1KpFCtWrIif//zn8etf/zqmTZvWb/+cOXNi5MiRsWXLlr5tb775Zrz11lsxd+7c8kwMAFS1Ad35WL58ebzwwgvx0ksvxdixY/ue42hoaIjRo0dHQ0NDPPzww7Fy5cpobGyM+vr6eOSRR2Lu3Lne6QIARMQA4+OZZ56JiIjW1tZ+25999tlYtmxZRER873vfi2HDhsXixYujp6cnFixYED/60Y/KMiwAUP0GFB+lUukjj6mtrY1169bFunXrLngoAGDo8t0uAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBpR6QGAwXPwne7o7vl/lR6jz/7jXf3+vZSMKYyIaePHVHoMuCyIDxiiDr7THXf+91crPcZ5tW3cU+kRzut/f7NVgEAC8QFD1Ht3PJ5eckvMmFhX4Wn+4fTZc3H47+/GlCtGR+3I4ZUep8/+413RtnHPJXWXCIYy8QFD3IyJdXHjlQ2VHqPPrVdXegKg0jxwCgCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQKoBx8e2bdvi3nvvjebm5qipqYlNmzb1279s2bKoqanpt9xzzz3lmhcAqHIDjo/u7u64+eabY926df/0mHvuuSeOHj3at/z0pz+9qCEBgKFjxEB/YOHChbFw4cIPPaZQKERTU9MFDwUADF2D8szHq6++GhMnToxrr702vv71r8eJEyf+6bE9PT1RLBb7LQDA0FX2+Ljnnntiw4YNsWXLlvjud78bW7dujYULF8a5c+fOe3x7e3s0NDT0LS0tLeUeCQC4hAz4ZZePcv/99/f9/6abborZs2fH9OnT49VXX40vfOELHzh+9erVsXLlyr71YrEoQABgCBv0t9pec801MX78+Ni/f/959xcKhaivr++3AABD16DHx+HDh+PEiRMxefLkwb4UAFAFBvyyS1dXV7+7GAcPHow9e/ZEY2NjNDY2xtq1a2Px4sXR1NQUBw4ciFWrVsWMGTNiwYIFZR0cAKhOA46PXbt2xZ133tm3/t7zGkuXLo1nnnkmfv/738fzzz8fJ0+ejObm5rj77rvj29/+dhQKhfJNDQBUrQHHR2tra5RKpX+6/5e//OVFDQQADG2+2wUASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASCU+AIBU4gMASDWi0gMAg6Pn3OkYVvvXOFh8M4bV1lV6nEvawWJXDKv9a/ScOx0RDZUeB4Y88QFD1JHu/xtjpv0g/u21Sk9SHcZMizjSfUvMiUmVHgWGPPEBQ1TzmKui++Aj8T+W3BLTJ7rz8WEOHO+K/7ZxTzTfeVWlR4HLgviAIaowvDZ6T18Z0+qvjVmf9FLCh+k93Rm9p9+OwvDaSo8ClwUPnAIAqcQHAJBKfAAAqcQHAJBKfAAAqcQHAJBKfAAAqQYcH9u2bYt77703mpubo6amJjZt2tRvf6lUisceeywmT54co0ePjvnz58e+ffvKNS8AUOUGHB/d3d1x8803x7p16867/8knn4zvf//7sX79+ti5c2eMGTMmFixYEKdPn77oYQGA6jfgTzhduHBhLFy48Lz7SqVSPP300/Gtb30rFi1aFBERGzZsiEmTJsWmTZvi/vvvv7hpAYCqV9ZnPg4ePBjHjh2L+fPn921raGiI22+/PbZv337en+np6YlisdhvAQCGrrLGx7FjxyIiYtKk/t8KOWnSpL5979fe3h4NDQ19S0tLSzlHAgAuMRV/t8vq1aujs7Ozbzl06FClRwIABlFZ46OpqSkiIjo6Ovpt7+jo6Nv3foVCIerr6/stAMDQVdb4mDZtWjQ1NcWWLVv6thWLxdi5c2fMnTu3nJcCAKrUgN/t0tXVFfv37+9bP3jwYOzZsycaGxtj6tSp0dbWFt/5zndi5syZMW3atHj00Uejubk57rvvvnLODQBUqQHHx65du+LOO+/sW1+5cmVERCxdujSee+65WLVqVXR3d8fXvva1OHnyZMybNy82b94ctbW15ZsaAKhaA46P1tbWKJVK/3R/TU1NPPHEE/HEE09c1GAAwNBU8Xe7AACXF/EBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQSHwBAKvEBAKQqe3w8/vjjUVNT02+57rrryn0ZAKBKjRiMk95www3xq1/96j8vMmJQLgMAVKFBqYIRI0ZEU1PTYJwaAKhygxIf+/bti+bm5qitrY25c+dGe3t7TJ069bzH9vT0RE9PT996sVgcjJHgsvPu2XMREbH3r50VnuQ/nT57Lg7//d2YcsXoqB05vNLj9Nl/vKvSI8Blpezxcfvtt8dzzz0X1157bRw9ejTWrl0bn/vc52Lv3r0xduzYDxzf3t4ea9euLfcYcNk78B9/UP/1f/6hwpNUjzEFLxFDhppSqVQazAucPHkyrrrqqnjqqafi4Ycf/sD+8935aGlpic7Ozqivrx/M0WBI+1v3mfhf/+dYTJ9YF6MvkbsM+493RdvGPfH0kltixsS6So/Tz5jCiJg2fkylx4CqVSwWo6Gh4WP9/R70zB83blx86lOfiv379593f6FQiEKhMNhjwGWnccyouP/T53+5s9JmTKyLG69sqPQYQIUM+ud8dHV1xYEDB2Ly5MmDfSkAoAqUPT6++c1vxtatW+Mvf/lL/Pa3v40vfvGLMXz48HjggQfKfSkAoAqV/WWXw4cPxwMPPBAnTpyICRMmxLx582LHjh0xYcKEcl8KAKhCZY+PF198sdynBACGEN/tAgCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQCrxAQCkEh8AQKpBi49169bF1VdfHbW1tXH77bfHa6+9NliXAgCqyKDEx8aNG2PlypWxZs2aeP311+Pmm2+OBQsWxPHjxwfjcgBAFRmU+Hjqqafiq1/9ajz00EMxa9asWL9+fXziE5+In/zkJ4NxOQCgiowo9wnPnDkTu3fvjtWrV/dtGzZsWMyfPz+2b9/+geN7enqip6enb71YLJZ7JOAivXvmXBx4u+uiz7P/eFe/f8th+oS6GD1qeNnOBwy+ssfHO++8E+fOnYtJkyb12z5p0qT405/+9IHj29vbY+3ateUeAyijA293xb/84N/Ldr62jXvKdq6XH5kXN17ZULbzAYOv7PExUKtXr46VK1f2rReLxWhpaangRMD7TZ9QFy8/Mu+iz3P67Lk4/Pd3Y8oVo6N2ZHnuVkyfUFeW8wB5yh4f48ePj+HDh0dHR0e/7R0dHdHU1PSB4wuFQhQKhXKPAZTR6FHDy3Z34dary3IaoIqV/YHTUaNGxZw5c2LLli1923p7e2PLli0xd+7ccl8OAKgyg/Kyy8qVK2Pp0qVx6623xqc//el4+umno7u7Ox566KHBuBwAUEUGJT6WLFkSb7/9djz22GNx7NixuOWWW2Lz5s0feAgVALj81JRKpVKlh/ivisViNDQ0RGdnZ9TX11d6HADgYxjI32/f7QIApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBIfAEAq8QEApBqUj1e/GO994GqxWKzwJADAx/Xe3+2P88Hpl1x8nDp1KiIiWlpaKjwJADBQp06dioaGhg895pL7bpfe3t44cuRIjB07Nmpqaio9DlBGxWIxWlpa4tChQ767CYaYUqkUp06diubm5hg27MOf6rjk4gMYunxxJBDhgVMAIJn4AABSiQ8gTaFQiDVr1kShUKj0KEAFeeYDAEjlzgcAkEp8AACpxAcAkEp8ABektbU12traKj0GUIXEBwCQSnwAVePMmTOVHgEoA/EBXLDe3t5YtWpVNDY2RlNTUzz++ON9+956661YtGhR1NXVRX19fXz5y1+Ojo6Ovv3Lli2L++67r9/52traorW1tW+9tbU1VqxYEW1tbTF+/PhYsGDBIP9GQAbxAVyw559/PsaMGRM7d+6MJ598Mp544ol45ZVXore3NxYtWhR/+9vfYuvWrfHKK6/En//851iyZMkFXWPUqFHxm9/8JtavXz8IvwWQbUSlBwCq1+zZs2PNmjURETFz5sz44Q9/GFu2bImIiD/84Q9x8ODBaGlpiYiIDRs2xA033BC/+93v4rbbbvvY15g5c2Y8+eST5R8eqBh3PoALNnv27H7rkydPjuPHj8cbb7wRLS0tfeERETFr1qwYN25cvPHGGwO6xpw5c8oyK3DpEB/ABRs5cmS/9Zqamujt7f1YPzts2LB4/7c7nD179gPHjRkz5sIHBC5J4gMou+uvvz4OHToUhw4d6tv2xz/+MU6ePBmzZs2KiIgJEybE0aNH+/3cnj17MscEKkR8AGU3f/78uOmmm+IrX/lKvP766/Haa6/Fgw8+GJ///Ofj1ltvjYiIu+66K3bt2hUbNmyIffv2xZo1a2Lv3r0VnhzIID6AsqupqYmXXnoprrjiirjjjjti/vz5cc0118TGjRv7jlmwYEE8+uijsWrVqrjtttvi1KlT8eCDD1ZwaiBLTen9L7oCAAwidz4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBIJT4AgFTiAwBI9f8BhRgttho8I0kAAAAASUVORK5CYII="},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"# put  some exploratory plots","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 4. Find out which input features are the most important\n### Hint: Start out with df.corr(). Can visualise with seaborn library","metadata":{}},{"cell_type":"markdown","source":"## 4.a. Correlation Analysis","metadata":{}},{"cell_type":"code","source":"# calculate correlation\ncorrelation = df_new.corr()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:42:48.571456Z","iopub.execute_input":"2024-04-16T18:42:48.571966Z","iopub.status.idle":"2024-04-16T18:42:48.591504Z","shell.execute_reply.started":"2024-04-16T18:42:48.571934Z","shell.execute_reply":"2024-04-16T18:42:48.590571Z"},"trusted":true},"execution_count":175,"outputs":[]},{"cell_type":"code","source":"# Plot the result\nplt.figure(figsize=(12, 10))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 5. Model development","metadata":{}},{"cell_type":"markdown","source":"## 5.a. Split data into train and avaluation set for assesing the model performenace","metadata":{}},{"cell_type":"code","source":"# 1. Divide dataframe into input and output\nx = df_new.drop(columns=['traffic_volume']) # Drop the column to be predicted\ny = df_new['traffic_volume'] # Choose Output column to be predicted\nfeature_names = x.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:04:17.281186Z","iopub.execute_input":"2024-04-16T18:04:17.281652Z","iopub.status.idle":"2024-04-16T18:04:17.290733Z","shell.execute_reply.started":"2024-04-16T18:04:17.281613Z","shell.execute_reply":"2024-04-16T18:04:17.289368Z"},"trusted":true},"execution_count":145,"outputs":[]},{"cell_type":"markdown","source":"## 5.b. Base model creation","metadata":{}},{"cell_type":"code","source":"# Load necessary library and functions\nfrom sklearn import tree\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:04:20.851094Z","iopub.execute_input":"2024-04-16T18:04:20.851545Z","iopub.status.idle":"2024-04-16T18:04:20.859885Z","shell.execute_reply.started":"2024-04-16T18:04:20.851516Z","shell.execute_reply":"2024-04-16T18:04:20.858063Z"},"trusted":true},"execution_count":146,"outputs":[]},{"cell_type":"code","source":"# scaling the data\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\nx = scaler.fit_transform(x)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:04:22.140729Z","iopub.execute_input":"2024-04-16T18:04:22.141125Z","iopub.status.idle":"2024-04-16T18:04:22.155652Z","shell.execute_reply.started":"2024-04-16T18:04:22.141096Z","shell.execute_reply":"2024-04-16T18:04:22.154316Z"},"trusted":true},"execution_count":147,"outputs":[]},{"cell_type":"code","source":"# spliting dataset for training and evaluartion\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=20)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:04:24.971117Z","iopub.execute_input":"2024-04-16T18:04:24.971625Z","iopub.status.idle":"2024-04-16T18:04:24.983460Z","shell.execute_reply.started":"2024-04-16T18:04:24.971590Z","shell.execute_reply":"2024-04-16T18:04:24.982168Z"},"trusted":true},"execution_count":148,"outputs":[]},{"cell_type":"code","source":"models = []\nmodels.append((\"SVR\",SVR()))\nmodels.append((\"LinearRegression\",LinearRegression()))\nmodels.append((\"KNeighborsRegression\", KNeighborsRegressor()))\nmodels.append((\"SGDRegressor\", SGDRegressor()))\nmodels.append((\"BayesianRidge\", BayesianRidge()))\nmodels.append((\"DecisionTreeRegressor\", DecisionTreeRegressor()))\nmodels.append((\"GradientBoostingRegressor\", GradientBoostingRegressor()))\nmodels.append((\"RandomForestRegressor\", RandomForestRegressor()))\nmodels.append((\"XGBRegressor\", XGBRegressor()))\n\n# evaluate each model in turn\nresults = []\nnames = []\ntable = []\n\n# loop to fit each model and evaluate\nfor name, model in models:\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    results.append((r2, mse))\n    names.append(name)\n    table = table + [(name, r2, mse)]\n    \n# bar plot of the results\npd.options.display.float_format = '{:.4f}'.format\nresults = pd.DataFrame(table, columns=['Model', 'R2', 'MSE'])\nresults","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:04:28.081071Z","iopub.execute_input":"2024-04-16T18:04:28.081474Z","iopub.status.idle":"2024-04-16T18:04:56.362466Z","shell.execute_reply.started":"2024-04-16T18:04:28.081445Z","shell.execute_reply":"2024-04-16T18:04:56.361525Z"},"trusted":true},"execution_count":149,"outputs":[{"execution_count":149,"output_type":"execute_result","data":{"text/plain":"                       Model     R2          MSE\n0                        SVR 0.1377 3364330.3937\n1           LinearRegression 0.3137 2677854.0765\n2       KNeighborsRegression 0.6916 1203107.4508\n3               SGDRegressor 0.3110 2688231.8481\n4              BayesianRidge 0.3137 2677818.3765\n5      DecisionTreeRegressor 0.9181  319499.4159\n6  GradientBoostingRegressor 0.8932  416676.6838\n7      RandomForestRegressor 0.9558  172602.5269\n8               XGBRegressor 0.9654  134956.1036","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>R2</th>\n      <th>MSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SVR</td>\n      <td>0.1377</td>\n      <td>3364330.3937</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LinearRegression</td>\n      <td>0.3137</td>\n      <td>2677854.0765</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>KNeighborsRegression</td>\n      <td>0.6916</td>\n      <td>1203107.4508</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SGDRegressor</td>\n      <td>0.3110</td>\n      <td>2688231.8481</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>BayesianRidge</td>\n      <td>0.3137</td>\n      <td>2677818.3765</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>DecisionTreeRegressor</td>\n      <td>0.9181</td>\n      <td>319499.4159</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>GradientBoostingRegressor</td>\n      <td>0.8932</td>\n      <td>416676.6838</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>RandomForestRegressor</td>\n      <td>0.9558</td>\n      <td>172602.5269</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>XGBRegressor</td>\n      <td>0.9654</td>\n      <td>134956.1036</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"model = XGBRegressor()\nmodel.fit(x_train, y_train)\n# predict the model\ny_pred = model.predict(x_test)\n# calculate the r2 score\nr2 = r2_score(y_test, y_pred)\n# calculate the mean squared error\nmse = mean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:15.201158Z","iopub.execute_input":"2024-04-16T18:05:15.202624Z","iopub.status.idle":"2024-04-16T18:05:15.448612Z","shell.execute_reply.started":"2024-04-16T18:05:15.202585Z","shell.execute_reply":"2024-04-16T18:05:15.447683Z"},"trusted":true},"execution_count":150,"outputs":[]},{"cell_type":"code","source":"# cross validation of the model with complete dataset\nscores = cross_val_score(model, x, y, cv=3)\nprint(scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:17.751416Z","iopub.execute_input":"2024-04-16T18:05:17.755284Z","iopub.status.idle":"2024-04-16T18:05:18.489040Z","shell.execute_reply.started":"2024-04-16T18:05:17.755233Z","shell.execute_reply":"2024-04-16T18:05:18.488133Z"},"trusted":true},"execution_count":151,"outputs":[{"name":"stdout","text":"[0.96634929 0.96792299 0.96176506]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check the R2 and MSE again\nprint(r2)\nprint(mse)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:26.546720Z","iopub.execute_input":"2024-04-16T18:05:26.547587Z","iopub.status.idle":"2024-04-16T18:05:26.555069Z","shell.execute_reply.started":"2024-04-16T18:05:26.547543Z","shell.execute_reply":"2024-04-16T18:05:26.553530Z"},"trusted":true},"execution_count":152,"outputs":[{"name":"stdout","text":"0.9654114146192684\n134956.1036153244\n","output_type":"stream"}]},{"cell_type":"code","source":"# percentage deviation from the mean\nprint(round(np.sqrt(mse)/df_new['traffic_volume'].mean()*100,2))","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:31.261294Z","iopub.execute_input":"2024-04-16T18:05:31.262571Z","iopub.status.idle":"2024-04-16T18:05:31.268803Z","shell.execute_reply.started":"2024-04-16T18:05:31.262508Z","shell.execute_reply":"2024-04-16T18:05:31.267925Z"},"trusted":true},"execution_count":153,"outputs":[{"name":"stdout","text":"11.28\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### function to fit XGBRegressor model and evaluate feature selection and other tuning","metadata":{}},{"cell_type":"code","source":"def evaluate_XGBRegressor(x, y):\n    # spliting dataset for training and evaluartion\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=20)\n    # Create and fit the RandomForestRegressor model\n    model = XGBRegressor()\n    model.fit(x_train, y_train)\n    \n    # Predict using the trained model\n    y_pred = model.predict(x_test)\n    \n    # Calculate R2 score and mean squared error\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    \n    # Calculate cross-validation scores\n    scores = cross_val_score(model, x, y, cv=3)\n    \n    # Calculate percentage deviation from the mean\n    percentage_deviation = round(np.sqrt(mse) / df_new['traffic_volume'].mean() * 100, 2)\n    \n    # Store all metrics in a dictionary\n    metrics = {\n        'R2 Score': r2,\n        'Mean Squared Error': mse,\n        'Cross-Validation Scores': scores,\n        'Percentage Deviation from Mean': percentage_deviation\n    }\n    \n    return metrics","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:46.614343Z","iopub.execute_input":"2024-04-16T18:05:46.615624Z","iopub.status.idle":"2024-04-16T18:05:46.625436Z","shell.execute_reply.started":"2024-04-16T18:05:46.615577Z","shell.execute_reply":"2024-04-16T18:05:46.624302Z"},"trusted":true},"execution_count":155,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_XGBRegressor(x, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:40:40.016128Z","iopub.execute_input":"2024-04-16T17:40:40.016631Z","iopub.status.idle":"2024-04-16T17:40:41.156919Z","shell.execute_reply.started":"2024-04-16T17:40:40.016598Z","shell.execute_reply":"2024-04-16T17:40:41.155555Z"},"trusted":true},"execution_count":95,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9698154721650472, 'Mean Squared Error': 119055.1311857447, 'Cross-Validation Scores': array([0.92310867, 0.93052111, 0.94146871]), 'Percentage Deviation from Mean': 10.6}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Mutual_info feature selection","metadata":{}},{"cell_type":"code","source":"# display the best selected features using mutual_info_regression\nx_mi = SelectPercentile(mutual_info_regression, percentile=70).fit(x_train, y_train)\nselected_features_mask = x_mi.get_support()\nselected_features = feature_names[selected_features_mask].tolist()\nprint(\"Selected Features:\", selected_features)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:51.061743Z","iopub.execute_input":"2024-04-16T16:42:51.062354Z","iopub.status.idle":"2024-04-16T16:42:53.454977Z","shell.execute_reply.started":"2024-04-16T16:42:51.062323Z","shell.execute_reply":"2024-04-16T16:42:53.453789Z"},"trusted":true},"execution_count":70,"outputs":[{"name":"stdout","text":"Selected Features: ['temp', 'clouds_all', 'day', 'month', 'year', 'weekday', 'hour', 'day_time']\n","output_type":"stream"}]},{"cell_type":"code","source":"# subset the dataset using selected features\nx_mi = SelectPercentile(mutual_info_regression, percentile=70).fit_transform(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:55.422320Z","iopub.execute_input":"2024-04-16T16:42:55.423226Z","iopub.status.idle":"2024-04-16T16:42:57.900288Z","shell.execute_reply.started":"2024-04-16T16:42:55.423192Z","shell.execute_reply":"2024-04-16T16:42:57.899200Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_XGBRegressor(x_mi, y_train)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:59.587338Z","iopub.execute_input":"2024-04-16T16:42:59.587712Z","iopub.status.idle":"2024-04-16T16:43:00.328047Z","shell.execute_reply.started":"2024-04-16T16:42:59.587686Z","shell.execute_reply":"2024-04-16T16:43:00.327142Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9656273468841373, 'Mean Squared Error': 133272.57017553216, 'Cross-Validation Scores': array([0.96480622, 0.96424541, 0.95989378]), 'Percentage Deviation from Mean': 11.21}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Selecting features using f_regression","metadata":{}},{"cell_type":"code","source":"# display the best features using f_regression\nmi = f_regression(x_train, y_train)\nmi = pd.Series(mi[0])\nmi.index = feature_names\nmi = mi.sort_values(ascending=False)\nmi.plot.bar()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:05.227094Z","iopub.execute_input":"2024-04-16T16:43:05.227711Z","iopub.status.idle":"2024-04-16T16:43:05.700934Z","shell.execute_reply.started":"2024-04-16T16:43:05.227680Z","shell.execute_reply":"2024-04-16T16:43:05.699873Z"},"trusted":true},"execution_count":73,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# subset the dataset using selected features\nx_f = SelectPercentile(f_regression, percentile=60 ).fit_transform(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:08.366819Z","iopub.execute_input":"2024-04-16T16:43:08.367270Z","iopub.status.idle":"2024-04-16T16:43:08.381147Z","shell.execute_reply.started":"2024-04-16T16:43:08.367236Z","shell.execute_reply":"2024-04-16T16:43:08.379583Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_XGBRegressor(x_f, y_train)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:10.726829Z","iopub.execute_input":"2024-04-16T16:43:10.727509Z","iopub.status.idle":"2024-04-16T16:43:11.403327Z","shell.execute_reply.started":"2024-04-16T16:43:10.727473Z","shell.execute_reply":"2024-04-16T16:43:11.402478Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.944669474729565, 'Mean Squared Error': 214532.21219487552, 'Cross-Validation Scores': array([0.94521279, 0.94479329, 0.93781204]), 'Percentage Deviation from Mean': 14.22}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Unsupervised ","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\nx_pca = PCA(n_components=9, svd_solver='full').fit_transform(x_train)\nevaluation_metrics = evaluate_XGBRegressor(x_pca, y_train)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:26.150010Z","iopub.execute_input":"2024-04-16T16:43:26.150593Z","iopub.status.idle":"2024-04-16T16:43:28.122321Z","shell.execute_reply.started":"2024-04-16T16:43:26.150564Z","shell.execute_reply":"2024-04-16T16:43:28.121470Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.5565759676724207, 'Mean Squared Error': 1719281.3213077914, 'Cross-Validation Scores': array([0.53416057, 0.53846765, 0.53979648]), 'Percentage Deviation from Mean': 40.27}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Hyperparameter tuning","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n\n\n# Creating the XGBoost regressor model\nxgb_model = XGBRegressor()\n\n# Defining the parameter grid for GridSearchCV\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [3, 5, 7],\n    'learning_rate': [0.1, 0.01, 0.001]\n}\n\n# Initializing GridSearchCV with the XGBoost model and parameter grid\ngrid_search = GridSearchCV(estimator=xgb_model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)\n\n# Fitting the grid search to the training data\ngrid_search.fit(x, y)\n\n# Getting the best parameters and best estimator from the grid search\nbest_params = grid_search.best_params_\nbest_estimator = grid_search.best_estimator_\n\n# Evaluating the best estimator on the test data\ntest_score = best_estimator.score(x_test, y_test)\n\nprint(\"Best Parameters:\", best_params)\nprint(\"Test Score (R-squared):\", test_score)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:07:51.099725Z","iopub.execute_input":"2024-04-16T18:07:51.100238Z","iopub.status.idle":"2024-04-16T18:08:29.180799Z","shell.execute_reply.started":"2024-04-16T18:07:51.100201Z","shell.execute_reply":"2024-04-16T18:08:29.179521Z"},"trusted":true},"execution_count":158,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 27 candidates, totalling 135 fits\nBest Parameters: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 300}\nTest Score (R-squared): 0.9884107204337637\n","output_type":"stream"}]},{"cell_type":"code","source":"# Instantiate XGBoost regressor with the best parameters directly\nbest_xgb_model = XGBRegressor(**best_params)\n\n# Train the model using the training data\nbest_xgb_model.fit(x, y)\n\n# Evaluate the model on the testing set\ntest_score = best_xgb_model.score(x_test, y_test)\nprint(\"Test Score (R-squared):\", test_score)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:08:51.725872Z","iopub.execute_input":"2024-04-16T18:08:51.726726Z","iopub.status.idle":"2024-04-16T18:08:52.761191Z","shell.execute_reply.started":"2024-04-16T18:08:51.726677Z","shell.execute_reply":"2024-04-16T18:08:52.760144Z"},"trusted":true},"execution_count":159,"outputs":[{"name":"stdout","text":"Test Score (R-squared): 0.9884107204337637\n","output_type":"stream"}]},{"cell_type":"code","source":"scores = cross_val_score(best_xgb_model, x, y, cv=3)\nprint(scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:08:57.649811Z","iopub.execute_input":"2024-04-16T18:08:57.650269Z","iopub.status.idle":"2024-04-16T18:08:59.974569Z","shell.execute_reply.started":"2024-04-16T18:08:57.650238Z","shell.execute_reply":"2024-04-16T18:08:59.973577Z"},"trusted":true},"execution_count":160,"outputs":[{"name":"stdout","text":"[0.97015106 0.97198164 0.96540072]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Testing and Creating Output CSV","metadata":{"id":"7Zb-W-KzvyzX"}},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/123ofai-predict-the-traffic-volume/test_set_nogt.csv')\n# Convert 'date_time' to datetime format\ntest['date_time'] = pd.to_datetime(test['date_time'], errors='coerce', dayfirst=True)\n\n# Filter rows where 'holiday' is not NaN\nisHoliday = test['holiday'].notna().copy()\n\n# Extract date and holiday values where 'holiday' is not NaN\ndate = test.loc[isHoliday, 'date_time'].dt.date.values\nholiday = test.loc[isHoliday, 'holiday'].values\n\n# Create mapping dictionary\nmapping = dict(zip(date, holiday))\nmapping.pop(pd.NaT, None)\n\n# Map 'date_time' to 'holiday' using the mapping dictionary, filling NaN values with corresponding holidays\ntest.loc[:,'holiday'] = test['date_time'].dt.date.map(mapping)\n\n# Replace NaN with 0 and other values with 1 in holiday\ntest.loc[:, 'holiday'] = np.where(test['holiday'].isnull(), 0, 1)\ntest['clouds_all'] = test['clouds_all'].astype(float)\n\ntest['day'] = test.date_time.dt.day\ntest['month'] = test.date_time.dt.month_name()\ntest['year'] = test.date_time.dt.year\ntest['weekday'] = test.date_time.dt.day_name()\ntest['hour'] = test.date_time.dt.hour\n\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ntest['day_time'] = test[['hour']].applymap(getDayTime)\ntest['holiday'] = test['holiday'].astype(int)\n\n# hour is converted to float from string \ntest['hour'] = test['hour'].astype(np.int32)\n\n\n\ntest['weather_main'] = test['weather_main'].astype('category').cat.codes + 1\ntest['day'] = test['day'].astype('category').cat.codes + 1\ntest['month'] = test['month'].astype('category').cat.codes + 1\ntest['year'] = test['year'].astype('category').cat.codes + 1\ntest['day_time'] = test['day_time'].astype('category').cat.codes + 1\ntest['weekday'] = test['weekday'].astype('category').cat.codes + 1\n\ntest = test.drop(columns=['date_time','weather_description'])\n\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\ntest_1 = scaler.fit_transform(test)\n\n\n\n\n# 4. Predict and obtain results from the model\ny_pred = best_xgb_model.predict(test_1)\n\n# 5. Save results to CSV\nsubmission = pd.DataFrame({'ID': test.index, 'traffic_volume' : y_pred})\nsubmission.to_csv('output_submission_eval6.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:40:42.732747Z","iopub.execute_input":"2024-04-16T18:40:42.733870Z","iopub.status.idle":"2024-04-16T18:40:42.944840Z","shell.execute_reply.started":"2024-04-16T18:40:42.733817Z","shell.execute_reply":"2024-04-16T18:40:42.943567Z"},"trusted":true},"execution_count":172,"outputs":[]}]}