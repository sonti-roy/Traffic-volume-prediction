{"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":74696,"databundleVersionId":8151114,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Traffic Volume Prediction script contains data processing, model development, model improvement and evaluation, feature selection and engineering","metadata":{}},{"cell_type":"code","source":"# import necessary library and functions\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import mutual_info_regression, SelectPercentile, SelectKBest\nfrom sklearn.feature_selection import f_regression\nfrom xgboost import XGBRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:42.302842Z","iopub.execute_input":"2024-04-17T14:50:42.303646Z","iopub.status.idle":"2024-04-17T14:50:42.661150Z","shell.execute_reply.started":"2024-04-17T14:50:42.303598Z","shell.execute_reply":"2024-04-17T14:50:42.659948Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import warnings\n\n# Suppress all warnings\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:43.521679Z","iopub.execute_input":"2024-04-17T14:50:43.522616Z","iopub.status.idle":"2024-04-17T14:50:43.527130Z","shell.execute_reply.started":"2024-04-17T14:50:43.522580Z","shell.execute_reply":"2024-04-17T14:50:43.526139Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## 1. Data pre-processing","metadata":{"id":"nmmr2_EpuuRL"}},{"cell_type":"markdown","source":"## 1.a Data loading and QC","metadata":{}},{"cell_type":"code","source":"# Reading the Training Data\ndf = pd.read_csv(\"/kaggle/input/123ofai-predict-the-traffic-volume/train_set_dirty.csv\")","metadata":{"id":"m48BNoQUk9x-","execution":{"iopub.status.busy":"2024-04-17T14:50:45.346132Z","iopub.execute_input":"2024-04-17T14:50:45.346545Z","iopub.status.idle":"2024-04-17T14:50:45.472113Z","shell.execute_reply.started":"2024-04-17T14:50:45.346511Z","shell.execute_reply":"2024-04-17T14:50:45.471096Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# 1. Displaying the first 10 records\ndf.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:45.996225Z","iopub.execute_input":"2024-04-17T14:50:45.996637Z","iopub.status.idle":"2024-04-17T14:50:46.026569Z","shell.execute_reply.started":"2024-04-17T14:50:45.996607Z","shell.execute_reply":"2024-04-17T14:50:46.025469Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   traffic_volume holiday    temp  rain_1h  snow_1h  clouds_all weather_main  \\\n0          1493.0     NaN  287.15     0.00      0.0        90.0         Mist   \n1             NaN     NaN  282.25     0.00      0.0        90.0       Clouds   \n2             NaN     NaN     NaN     0.00      0.0        90.0      Drizzle   \n3          5626.0     NaN  252.08     0.00      0.0        20.0         Haze   \n4          5357.0     NaN  291.25     1.02      0.0         NaN         Rain   \n5          2827.0     NaN  272.79     0.00      0.0        90.0          NaN   \n6             NaN     NaN  292.61     0.00      0.0         8.0        Clear   \n7          4513.0     NaN  270.84     0.00      0.0        75.0       Clouds   \n8          3415.0     NaN  297.97     0.00      0.0        40.0       Clouds   \n9          1883.0     NaN  272.55     0.00      0.0         1.0          Fog   \n\n  weather_description         date_time  \n0                 NaN  18-09-2017 22:00  \n1     overcast clouds  23-05-2013 11:00  \n2             drizzle  04-06-2016 01:00  \n3                haze  04-01-2017 08:00  \n4       moderate rain  13-06-2013 13:00  \n5                snow  03-11-2017 20:00  \n6        sky is clear  08-06-2016 23:00  \n7       broken clouds  01-03-2017 10:00  \n8    scattered clouds  03-07-2016 13:00  \n9                 fog  26-11-2016 08:00  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>weather_description</th>\n      <th>date_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1493.0</td>\n      <td>NaN</td>\n      <td>287.15</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Mist</td>\n      <td>NaN</td>\n      <td>18-09-2017 22:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>282.25</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Clouds</td>\n      <td>overcast clouds</td>\n      <td>23-05-2013 11:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>Drizzle</td>\n      <td>drizzle</td>\n      <td>04-06-2016 01:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5626.0</td>\n      <td>NaN</td>\n      <td>252.08</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>Haze</td>\n      <td>haze</td>\n      <td>04-01-2017 08:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5357.0</td>\n      <td>NaN</td>\n      <td>291.25</td>\n      <td>1.02</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>Rain</td>\n      <td>moderate rain</td>\n      <td>13-06-2013 13:00</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2827.0</td>\n      <td>NaN</td>\n      <td>272.79</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>90.0</td>\n      <td>NaN</td>\n      <td>snow</td>\n      <td>03-11-2017 20:00</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>292.61</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>Clear</td>\n      <td>sky is clear</td>\n      <td>08-06-2016 23:00</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>4513.0</td>\n      <td>NaN</td>\n      <td>270.84</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>75.0</td>\n      <td>Clouds</td>\n      <td>broken clouds</td>\n      <td>01-03-2017 10:00</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3415.0</td>\n      <td>NaN</td>\n      <td>297.97</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>Clouds</td>\n      <td>scattered clouds</td>\n      <td>03-07-2016 13:00</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1883.0</td>\n      <td>NaN</td>\n      <td>272.55</td>\n      <td>0.00</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>Fog</td>\n      <td>fog</td>\n      <td>26-11-2016 08:00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.b. Check dataset info - field types, non-null values, dtypes","metadata":{}},{"cell_type":"code","source":"# Null values in each column\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:47.401454Z","iopub.execute_input":"2024-04-17T14:50:47.401876Z","iopub.status.idle":"2024-04-17T14:50:47.426212Z","shell.execute_reply.started":"2024-04-17T14:50:47.401846Z","shell.execute_reply":"2024-04-17T14:50:47.425106Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"traffic_volume          3815\nholiday                38521\ntemp                    3809\nrain_1h                 3703\nsnow_1h                 3830\nclouds_all              3904\nweather_main            3909\nweather_description     3812\ndate_time               3880\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# data type of each column\nprint(df.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:47.785160Z","iopub.execute_input":"2024-04-17T14:50:47.785629Z","iopub.status.idle":"2024-04-17T14:50:47.792136Z","shell.execute_reply.started":"2024-04-17T14:50:47.785580Z","shell.execute_reply":"2024-04-17T14:50:47.790974Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"traffic_volume         float64\nholiday                 object\ntemp                   float64\nrain_1h                float64\nsnow_1h                float64\nclouds_all             float64\nweather_main            object\nweather_description     object\ndate_time               object\ndtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"# Shape of the data\nprint(df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:48.356022Z","iopub.execute_input":"2024-04-17T14:50:48.356430Z","iopub.status.idle":"2024-04-17T14:50:48.362345Z","shell.execute_reply.started":"2024-04-17T14:50:48.356368Z","shell.execute_reply":"2024-04-17T14:50:48.361103Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"(38563, 9)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.c Pre-processing (Cleaning): Address missing (NULL) values - drop or imputation","metadata":{}},{"cell_type":"code","source":"# drop rows contain NaN in the labels\ndf_new = df.dropna(subset = ['traffic_volume'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:49.386250Z","iopub.execute_input":"2024-04-17T14:50:49.386682Z","iopub.status.idle":"2024-04-17T14:50:49.404268Z","shell.execute_reply.started":"2024-04-17T14:50:49.386645Z","shell.execute_reply":"2024-04-17T14:50:49.403224Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# check holiday column unique values\ndf_new[\"holiday\"].unique()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:49.893256Z","iopub.execute_input":"2024-04-17T14:50:49.893691Z","iopub.status.idle":"2024-04-17T14:50:49.905306Z","shell.execute_reply.started":"2024-04-17T14:50:49.893655Z","shell.execute_reply":"2024-04-17T14:50:49.904432Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array([nan, 'New Years Day', 'Memorial Day', 'Columbus Day',\n       'Martin Luther King Jr Day', 'Christmas Day', 'Thanksgiving Day',\n       'Labor Day', 'Veterans Day', 'Independence Day',\n       'Washingtons Birthday', 'State Fair'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_new.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:50.710890Z","iopub.execute_input":"2024-04-17T14:50:50.711627Z","iopub.status.idle":"2024-04-17T14:50:50.747659Z","shell.execute_reply.started":"2024-04-17T14:50:50.711582Z","shell.execute_reply":"2024-04-17T14:50:50.746464Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 34748 entries, 0 to 38562\nData columns (total 9 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   traffic_volume       34748 non-null  float64\n 1   holiday              34 non-null     object \n 2   temp                 31337 non-null  float64\n 3   rain_1h              31397 non-null  float64\n 4   snow_1h              31266 non-null  float64\n 5   clouds_all           31217 non-null  float64\n 6   weather_main         31231 non-null  object \n 7   weather_description  31325 non-null  object \n 8   date_time            31259 non-null  object \ndtypes: float64(5), object(4)\nmemory usage: 2.7+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:51.307891Z","iopub.execute_input":"2024-04-17T14:50:51.308510Z","iopub.status.idle":"2024-04-17T14:50:51.333052Z","shell.execute_reply.started":"2024-04-17T14:50:51.308458Z","shell.execute_reply":"2024-04-17T14:50:51.331630Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"traffic_volume             0\nholiday                34714\ntemp                    3411\nrain_1h                 3351\nsnow_1h                 3482\nclouds_all              3531\nweather_main            3517\nweather_description     3423\ndate_time               3489\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# # Convert 'date_time' to datetime format\n# df_new['date_time'] = pd.to_datetime(df_new['date_time'], errors='coerce', dayfirst=True)\n\n# # Filter rows where 'holiday' is not NaN\n# isHoliday = df_new['holiday'].notna()\n\n# # Extract date and holiday values where 'holiday' is not NaN\n# date = df_new.loc[isHoliday, 'date_time'].dt.date.values\n# holiday = df_new.loc[isHoliday, 'holiday'].values\n\n# mapping = dict(zip(date,holiday))\n\n# df_new['holiday'] = df_new['date_time'].dt.date.map(mapping)\n# df_new.loc[df_new['holiday'].isna(),'holiday'] = 'Work Day'\n\n# df_new['holiday'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:51.921030Z","iopub.execute_input":"2024-04-17T14:50:51.921493Z","iopub.status.idle":"2024-04-17T14:50:51.926475Z","shell.execute_reply.started":"2024-04-17T14:50:51.921456Z","shell.execute_reply":"2024-04-17T14:50:51.925657Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# drop rows contain NaN in the labels\ndf_new = df_new.dropna(subset = ['date_time'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:52.480988Z","iopub.execute_input":"2024-04-17T14:50:52.481770Z","iopub.status.idle":"2024-04-17T14:50:52.498566Z","shell.execute_reply.started":"2024-04-17T14:50:52.481733Z","shell.execute_reply":"2024-04-17T14:50:52.497216Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# Convert 'date_time' to datetime format\ndf_new['date_time'] = pd.to_datetime(df_new['date_time'], errors='coerce', dayfirst=True)\n\n# Filter rows where 'holiday' is not NaN\nisHoliday = df_new['holiday'].notna().copy()\n\n# Extract date and holiday values where 'holiday' is not NaN\ndate = df_new.loc[isHoliday, 'date_time'].dt.date.values\nholiday = df_new.loc[isHoliday, 'holiday'].values\n\n# Create mapping dictionary\nmapping = dict(zip(date, holiday))\nmapping.pop(pd.NaT, None)\n\n# Map 'date_time' to 'holiday' using the mapping dictionary, filling NaN values with corresponding holidays\ndf_new.loc[:,'holiday'] = df_new['date_time'].dt.date.map(mapping)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:53.301191Z","iopub.execute_input":"2024-04-17T14:50:53.301604Z","iopub.status.idle":"2024-04-17T14:50:53.522799Z","shell.execute_reply.started":"2024-04-17T14:50:53.301570Z","shell.execute_reply":"2024-04-17T14:50:53.521602Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"df_new[\"holiday\"].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:53.885853Z","iopub.execute_input":"2024-04-17T14:50:53.886284Z","iopub.status.idle":"2024-04-17T14:50:53.896106Z","shell.execute_reply.started":"2024-04-17T14:50:53.886251Z","shell.execute_reply":"2024-04-17T14:50:53.894935Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"30774"},"metadata":{}}]},{"cell_type":"code","source":"# Replace NaN with 0 and other values with 1 in holiday\ndf_new.loc[:, 'holiday'] = np.where(df_new['holiday'].isnull(), 0, 1)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:54.501018Z","iopub.execute_input":"2024-04-17T14:50:54.501427Z","iopub.status.idle":"2024-04-17T14:50:54.509654Z","shell.execute_reply.started":"2024-04-17T14:50:54.501395Z","shell.execute_reply":"2024-04-17T14:50:54.508469Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"df_new['holiday'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:55.161544Z","iopub.execute_input":"2024-04-17T14:50:55.162146Z","iopub.status.idle":"2024-04-17T14:50:55.170742Z","shell.execute_reply.started":"2024-04-17T14:50:55.162114Z","shell.execute_reply":"2024-04-17T14:50:55.169630Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"array([0, 1], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_new['day'] = df_new.date_time.dt.day\ndf_new['month'] = df_new.date_time.dt.month_name()\ndf_new['year'] = df_new.date_time.dt.year\ndf_new['weekday'] = df_new.date_time.dt.day_name()\ndf_new['hour'] = df_new.date_time.dt.hour","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:55.985926Z","iopub.execute_input":"2024-04-17T14:50:55.986363Z","iopub.status.idle":"2024-04-17T14:50:56.027891Z","shell.execute_reply.started":"2024-04-17T14:50:55.986326Z","shell.execute_reply":"2024-04-17T14:50:56.026744Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"df_new.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:56.640715Z","iopub.execute_input":"2024-04-17T14:50:56.641097Z","iopub.status.idle":"2024-04-17T14:50:56.650044Z","shell.execute_reply.started":"2024-04-17T14:50:56.641066Z","shell.execute_reply":"2024-04-17T14:50:56.648808Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"(31259, 14)"},"metadata":{}}]},{"cell_type":"code","source":"\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ndf_new['day_time'] = df_new[['hour']].applymap(getDayTime)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:57.602691Z","iopub.execute_input":"2024-04-17T14:50:57.603397Z","iopub.status.idle":"2024-04-17T14:50:57.629162Z","shell.execute_reply.started":"2024-04-17T14:50:57.603337Z","shell.execute_reply":"2024-04-17T14:50:57.628020Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"df_new['holiday'] = df_new['holiday'].astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:58.280931Z","iopub.execute_input":"2024-04-17T14:50:58.281397Z","iopub.status.idle":"2024-04-17T14:50:58.290006Z","shell.execute_reply.started":"2024-04-17T14:50:58.281346Z","shell.execute_reply":"2024-04-17T14:50:58.288819Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"# check holiday column values\ndf_new['holiday'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:59.187058Z","iopub.execute_input":"2024-04-17T14:50:59.187729Z","iopub.status.idle":"2024-04-17T14:50:59.196607Z","shell.execute_reply.started":"2024-04-17T14:50:59.187682Z","shell.execute_reply":"2024-04-17T14:50:59.195538Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"array([0, 1])"},"metadata":{}}]},{"cell_type":"code","source":"# check the new data frame\ndf_new.isnull().sum(axis = 0)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:50:59.966118Z","iopub.execute_input":"2024-04-17T14:50:59.967218Z","iopub.status.idle":"2024-04-17T14:50:59.994523Z","shell.execute_reply.started":"2024-04-17T14:50:59.967175Z","shell.execute_reply":"2024-04-17T14:50:59.993438Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"traffic_volume            0\nholiday                   0\ntemp                   3059\nrain_1h                3007\nsnow_1h                3161\nclouds_all             3173\nweather_main           3167\nweather_description    3086\ndate_time                 0\nday                       0\nmonth                     0\nyear                      0\nweekday                   0\nhour                      0\nday_time                  0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new = df_new.sort_values('date_time')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:00.706465Z","iopub.execute_input":"2024-04-17T14:51:00.706906Z","iopub.status.idle":"2024-04-17T14:51:00.728213Z","shell.execute_reply.started":"2024-04-17T14:51:00.706871Z","shell.execute_reply":"2024-04-17T14:51:00.727308Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"# temperature is interpolate \n# df_new.loc[:, 'temp'] = df_new['temp'].interpolate(method='linear')\n# median is used instead of interpolate and it give better performance\n# df_new.loc[:, 'temp'] = df_new['temp'].fillna(df_new['temp'].median())\ndf_new.temp.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:01.522925Z","iopub.execute_input":"2024-04-17T14:51:01.523585Z","iopub.status.idle":"2024-04-17T14:51:01.530937Z","shell.execute_reply.started":"2024-04-17T14:51:01.523551Z","shell.execute_reply":"2024-04-17T14:51:01.529821Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# fill na with mean values\n# df_new.loc[:, 'rain_1h'] = df_new['rain_1h'].interpolate(method='linear')\n# df_new.loc[:, 'snow_1h'] = df_new['snow_1h'].interpolate(method='linear')\n# df_new.loc[:, 'rain_1h'] = df_new['rain_1h'].fillna(df_new['rain_1h'].median())\n# df_new.loc[:, 'snow_1h'] = df_new['snow_1h'].fillna(df_new['snow_1h'].median())\ndf_new.rain_1h.fillna(method='ffill',inplace=True)\ndf_new.snow_1h.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:02.606409Z","iopub.execute_input":"2024-04-17T14:51:02.606858Z","iopub.status.idle":"2024-04-17T14:51:02.614597Z","shell.execute_reply.started":"2024-04-17T14:51:02.606822Z","shell.execute_reply":"2024-04-17T14:51:02.613127Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# clouds_all is interpolate \n# df_new.loc[:, 'clouds_all'] = df_new['clouds_all'].interpolate(method='linear')\n# as dates are not in order interpolate will not work so median is used\n# df_new.loc[:, 'clouds_all'] = df_new['clouds_all'].fillna(df_new['clouds_all'].median())\ndf_new.clouds_all.fillna(method='ffill',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:03.484522Z","iopub.execute_input":"2024-04-17T14:51:03.485470Z","iopub.status.idle":"2024-04-17T14:51:03.491404Z","shell.execute_reply.started":"2024-04-17T14:51:03.485432Z","shell.execute_reply":"2024-04-17T14:51:03.490158Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# df_new = df_new.dropna(subset = ['temp'])\n# df_new = df_new.dropna(subset = ['rain_1h'])\n# df_new = df_new.dropna(subset = ['snow_1h'])\n# df_new = df_new.dropna(subset = ['clouds_all'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:04.195816Z","iopub.execute_input":"2024-04-17T14:51:04.196237Z","iopub.status.idle":"2024-04-17T14:51:04.201190Z","shell.execute_reply.started":"2024-04-17T14:51:04.196201Z","shell.execute_reply":"2024-04-17T14:51:04.200271Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"# isolate the key word in weather description\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].str.split().str[-1]","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:04.981917Z","iopub.execute_input":"2024-04-17T14:51:04.982344Z","iopub.status.idle":"2024-04-17T14:51:05.045443Z","shell.execute_reply.started":"2024-04-17T14:51:04.982308Z","shell.execute_reply":"2024-04-17T14:51:05.044159Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"# convert to lower case\ndf_new.loc[:, 'weather_main'] = df_new['weather_main'].str.lower()\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].str.lower()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:05.643447Z","iopub.execute_input":"2024-04-17T14:51:05.644439Z","iopub.status.idle":"2024-04-17T14:51:05.670118Z","shell.execute_reply.started":"2024-04-17T14:51:05.644397Z","shell.execute_reply":"2024-04-17T14:51:05.668958Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"# replace weather main with weather description if nan\ndf_new.loc[:, 'weather_description'] = df_new['weather_description'].fillna(df_new['weather_main'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:06.301612Z","iopub.execute_input":"2024-04-17T14:51:06.302021Z","iopub.status.idle":"2024-04-17T14:51:06.313899Z","shell.execute_reply.started":"2024-04-17T14:51:06.301986Z","shell.execute_reply":"2024-04-17T14:51:06.312841Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# replace weather main with weather description if nan\ndf_new.loc[:, 'weather_main'] = df_new['weather_main'].fillna(df_new['weather_description'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:06.936492Z","iopub.execute_input":"2024-04-17T14:51:06.936904Z","iopub.status.idle":"2024-04-17T14:51:06.952241Z","shell.execute_reply.started":"2024-04-17T14:51:06.936870Z","shell.execute_reply":"2024-04-17T14:51:06.950964Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"# drop nan rows for weather_main\ndf_new = df_new.dropna(subset=['weather_main'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:07.525984Z","iopub.execute_input":"2024-04-17T14:51:07.526402Z","iopub.status.idle":"2024-04-17T14:51:07.546742Z","shell.execute_reply.started":"2024-04-17T14:51:07.526357Z","shell.execute_reply":"2024-04-17T14:51:07.545815Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:08.181092Z","iopub.execute_input":"2024-04-17T14:51:08.182150Z","iopub.status.idle":"2024-04-17T14:51:08.214676Z","shell.execute_reply.started":"2024-04-17T14:51:08.182112Z","shell.execute_reply":"2024-04-17T14:51:08.213851Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"traffic_volume         0\nholiday                0\ntemp                   0\nrain_1h                0\nsnow_1h                0\nclouds_all             0\nweather_main           0\nweather_description    0\ndate_time              0\nday                    0\nmonth                  0\nyear                   0\nweekday                0\nhour                   0\nday_time               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:08.840959Z","iopub.execute_input":"2024-04-17T14:51:08.841409Z","iopub.status.idle":"2024-04-17T14:51:08.851069Z","shell.execute_reply.started":"2024-04-17T14:51:08.841361Z","shell.execute_reply":"2024-04-17T14:51:08.849642Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"traffic_volume                float64\nholiday                         int64\ntemp                          float64\nrain_1h                       float64\nsnow_1h                       float64\nclouds_all                    float64\nweather_main                   object\nweather_description            object\ndate_time              datetime64[ns]\nday                             int32\nmonth                          object\nyear                            int32\nweekday                        object\nhour                            int32\nday_time                       object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# df_new.loc[:,'day'] = df_new['date_time'].dt.day_name()\n# df_new.loc[:,'month'] = df_new['date_time'].dt.month_name()\n# df_new.loc[:,'year'] = df_new['date_time'].dt.year.astype(str)\n# df_new.loc[:,'hour'] = df_new['date_time'].dt.hour","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:09.500838Z","iopub.execute_input":"2024-04-17T14:51:09.501261Z","iopub.status.idle":"2024-04-17T14:51:09.506350Z","shell.execute_reply.started":"2024-04-17T14:51:09.501225Z","shell.execute_reply":"2024-04-17T14:51:09.505197Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"# # seperate date and time into two column\n# df_new[['date', 'time']] = df_new['date_time'].str.split(' ', expand=True)\n# df_new[['hour', 'minute']] = df_new['time'].str.split(':', expand=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:10.121264Z","iopub.execute_input":"2024-04-17T14:51:10.122153Z","iopub.status.idle":"2024-04-17T14:51:10.127421Z","shell.execute_reply.started":"2024-04-17T14:51:10.122104Z","shell.execute_reply":"2024-04-17T14:51:10.126178Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"df_new.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:10.741337Z","iopub.execute_input":"2024-04-17T14:51:10.742141Z","iopub.status.idle":"2024-04-17T14:51:10.779923Z","shell.execute_reply.started":"2024-04-17T14:51:10.742097Z","shell.execute_reply":"2024-04-17T14:51:10.778771Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"traffic_volume         0\nholiday                0\ntemp                   0\nrain_1h                0\nsnow_1h                0\nclouds_all             0\nweather_main           0\nweather_description    0\ndate_time              0\nday                    0\nmonth                  0\nyear                   0\nweekday                0\nhour                   0\nday_time               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# # date is converted to multiple features like day, month and year\n# df_new['date'] = pd.to_datetime(df_new['date'],dayfirst=True)\n# df_new['day'] = df_new['date'].dt.day_name()\n# df_new['month'] = df_new['date'].dt.month_name()\n# df_new['year'] = df_new['date'].dt.year.astype(str)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:11.385838Z","iopub.execute_input":"2024-04-17T14:51:11.386278Z","iopub.status.idle":"2024-04-17T14:51:11.391709Z","shell.execute_reply.started":"2024-04-17T14:51:11.386240Z","shell.execute_reply":"2024-04-17T14:51:11.390353Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":"## 1.d. Pre-processing (Cleaning): Remove Duplicate Rows","metadata":{}},{"cell_type":"code","source":"df_new = df_new.drop_duplicates()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:12.781624Z","iopub.execute_input":"2024-04-17T14:51:12.782031Z","iopub.status.idle":"2024-04-17T14:51:12.836804Z","shell.execute_reply.started":"2024-04-17T14:51:12.782000Z","shell.execute_reply":"2024-04-17T14:51:12.835783Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":"## 1.e. Pre-processing (Cleaning): Drop irrelevant columns (that you don't want to give as input to the model)","metadata":{}},{"cell_type":"code","source":"# drop the date and date_time column\n# df_new = df_new.drop(columns=['date_time','date','time','minute','weather_description'])\ndf_new = df_new.drop(columns=['date_time','weather_description'])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:14.451448Z","iopub.execute_input":"2024-04-17T14:51:14.451836Z","iopub.status.idle":"2024-04-17T14:51:14.464131Z","shell.execute_reply.started":"2024-04-17T14:51:14.451807Z","shell.execute_reply":"2024-04-17T14:51:14.463158Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":"## 1.f. Pre-processing (Encoding): Convert categorical values to numeric","metadata":{}},{"cell_type":"code","source":"df_new['weather_main'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:15.741433Z","iopub.execute_input":"2024-04-17T14:51:15.741839Z","iopub.status.idle":"2024-04-17T14:51:15.758865Z","shell.execute_reply.started":"2024-04-17T14:51:15.741808Z","shell.execute_reply":"2024-04-17T14:51:15.757691Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"weather_main\nclouds          9817\nclear           8500\nmist            3804\nrain            3595\nsnow            1840\ndrizzle         1120\nhaze             904\nthunderstorm     637\nfog              605\nsmoke             14\nsquall             1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:16.446276Z","iopub.execute_input":"2024-04-17T14:51:16.446673Z","iopub.status.idle":"2024-04-17T14:51:16.456514Z","shell.execute_reply.started":"2024-04-17T14:51:16.446643Z","shell.execute_reply":"2024-04-17T14:51:16.455236Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main       object\nday                 int32\nmonth              object\nyear                int32\nweekday            object\nhour                int32\nday_time           object\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df_new['weather_main'] = df_new['weather_main'].astype('category').cat.codes + 1\ndf_new['day'] = df_new['day'].astype('category').cat.codes + 1\ndf_new['month'] = df_new['month'].astype('category').cat.codes + 1\ndf_new['year'] = df_new['year'].astype('category').cat.codes + 1\ndf_new['day_time'] = df_new['day_time'].astype('category').cat.codes + 1\ndf_new['weekday'] = df_new['weekday'].astype('category').cat.codes + 1\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:17.301042Z","iopub.execute_input":"2024-04-17T14:51:17.301948Z","iopub.status.idle":"2024-04-17T14:51:17.337680Z","shell.execute_reply.started":"2024-04-17T14:51:17.301905Z","shell.execute_reply":"2024-04-17T14:51:17.336660Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"# # one-hot coding for multiple columns\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['weather_main'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['day'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['month'],dtype=int)], axis=1)\n# df_new = pd.concat([df_new,pd.get_dummies(df_new['year'],dtype=int)], axis=1)\n# df_new.drop(columns=['weather_main','day','month','year'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:19.101542Z","iopub.execute_input":"2024-04-17T14:51:19.101918Z","iopub.status.idle":"2024-04-17T14:51:19.106987Z","shell.execute_reply.started":"2024-04-17T14:51:19.101889Z","shell.execute_reply":"2024-04-17T14:51:19.105822Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"markdown","source":"# 2. Data understanding - Find out stats regarding your data (df.describe(), df.mean(), df.median())","metadata":{}},{"cell_type":"code","source":"# describe the data \ndf_new.describe()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:20.555869Z","iopub.execute_input":"2024-04-17T14:51:20.557216Z","iopub.status.idle":"2024-04-17T14:51:20.617620Z","shell.execute_reply.started":"2024-04-17T14:51:20.557164Z","shell.execute_reply":"2024-04-17T14:51:20.616454Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"       traffic_volume       holiday          temp       rain_1h       snow_1h  \\\ncount    30837.000000  30837.000000  30837.000000  30837.000000  30837.000000   \nmean      3256.415378      0.015501    281.164564      0.131103      0.000228   \nstd       1986.873536      0.123536     13.387937      1.047860      0.008130   \nmin          0.000000      0.000000      0.000000      0.000000      0.000000   \n25%       1196.000000      0.000000    272.140000      0.000000      0.000000   \n50%       3370.000000      0.000000    282.420000      0.000000      0.000000   \n75%       4930.000000      0.000000    291.790000      0.000000      0.000000   \nmax       7280.000000      1.000000    308.430000     55.630000      0.510000   \n\n         clouds_all  weather_main           day         month          year  \\\ncount  30837.000000  30837.000000  30837.000000  30837.000000  30837.000000   \nmean      49.392256      3.570775     15.689659      6.340208      4.521484   \nstd       38.962776      2.773237      8.733348      3.422283      1.891267   \nmin        0.000000      1.000000      1.000000      1.000000      1.000000   \n25%        1.000000      1.000000      8.000000      3.000000      3.000000   \n50%       64.000000      2.000000     16.000000      6.000000      5.000000   \n75%       90.000000      6.000000     23.000000      9.000000      6.000000   \nmax      100.000000     11.000000     31.000000     12.000000      7.000000   \n\n            weekday          hour      day_time  \ncount  30837.000000  30837.000000  30837.000000  \nmean       3.991796     11.407724      3.632260  \nstd        1.996145      6.946235      1.766293  \nmin        1.000000      0.000000      1.000000  \n25%        2.000000      5.000000      2.000000  \n50%        4.000000     11.000000      4.000000  \n75%        6.000000     17.000000      5.000000  \nmax        7.000000     23.000000      6.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n      <td>30837.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3256.415378</td>\n      <td>0.015501</td>\n      <td>281.164564</td>\n      <td>0.131103</td>\n      <td>0.000228</td>\n      <td>49.392256</td>\n      <td>3.570775</td>\n      <td>15.689659</td>\n      <td>6.340208</td>\n      <td>4.521484</td>\n      <td>3.991796</td>\n      <td>11.407724</td>\n      <td>3.632260</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1986.873536</td>\n      <td>0.123536</td>\n      <td>13.387937</td>\n      <td>1.047860</td>\n      <td>0.008130</td>\n      <td>38.962776</td>\n      <td>2.773237</td>\n      <td>8.733348</td>\n      <td>3.422283</td>\n      <td>1.891267</td>\n      <td>1.996145</td>\n      <td>6.946235</td>\n      <td>1.766293</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1196.000000</td>\n      <td>0.000000</td>\n      <td>272.140000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>8.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3370.000000</td>\n      <td>0.000000</td>\n      <td>282.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>64.000000</td>\n      <td>2.000000</td>\n      <td>16.000000</td>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>11.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>4930.000000</td>\n      <td>0.000000</td>\n      <td>291.790000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>90.000000</td>\n      <td>6.000000</td>\n      <td>23.000000</td>\n      <td>9.000000</td>\n      <td>6.000000</td>\n      <td>6.000000</td>\n      <td>17.000000</td>\n      <td>5.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7280.000000</td>\n      <td>1.000000</td>\n      <td>308.430000</td>\n      <td>55.630000</td>\n      <td>0.510000</td>\n      <td>100.000000</td>\n      <td>11.000000</td>\n      <td>31.000000</td>\n      <td>12.000000</td>\n      <td>7.000000</td>\n      <td>7.000000</td>\n      <td>23.000000</td>\n      <td>6.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# display some rows\ndf_new.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:21.180836Z","iopub.execute_input":"2024-04-17T14:51:21.181206Z","iopub.status.idle":"2024-04-17T14:51:21.199766Z","shell.execute_reply.started":"2024-04-17T14:51:21.181170Z","shell.execute_reply":"2024-04-17T14:51:21.198459Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"       traffic_volume  holiday    temp  rain_1h  snow_1h  clouds_all  \\\n18950          5545.0        0  288.28      0.0      0.0        40.0   \n15019          5584.0        0  293.17      0.0      0.0         1.0   \n20647          6015.0        0  293.86      0.0      0.0         1.0   \n21969          5791.0        0  294.14      0.0      0.0        20.0   \n23810          4770.0        0  293.10      0.0      0.0        20.0   \n\n       weather_main  day  month  year  weekday  hour  day_time  \n18950             2    2     11     1        6     9         5  \n15019             1    2     11     1        6    15         1  \n20647             1    2     11     1        6    16         3  \n21969             2    2     11     1        6    17         3  \n23810             2    2     11     1        6    18         3  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>traffic_volume</th>\n      <th>holiday</th>\n      <th>temp</th>\n      <th>rain_1h</th>\n      <th>snow_1h</th>\n      <th>clouds_all</th>\n      <th>weather_main</th>\n      <th>day</th>\n      <th>month</th>\n      <th>year</th>\n      <th>weekday</th>\n      <th>hour</th>\n      <th>day_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18950</th>\n      <td>5545.0</td>\n      <td>0</td>\n      <td>288.28</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>40.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>9</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>15019</th>\n      <td>5584.0</td>\n      <td>0</td>\n      <td>293.17</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>15</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>20647</th>\n      <td>6015.0</td>\n      <td>0</td>\n      <td>293.86</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>16</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>21969</th>\n      <td>5791.0</td>\n      <td>0</td>\n      <td>294.14</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>17</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>23810</th>\n      <td>4770.0</td>\n      <td>0</td>\n      <td>293.10</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>20.0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>11</td>\n      <td>1</td>\n      <td>6</td>\n      <td>18</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_new.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:22.020975Z","iopub.execute_input":"2024-04-17T14:51:22.021368Z","iopub.status.idle":"2024-04-17T14:51:22.030428Z","shell.execute_reply.started":"2024-04-17T14:51:22.021337Z","shell.execute_reply":"2024-04-17T14:51:22.029275Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"traffic_volume    float64\nholiday             int64\ntemp              float64\nrain_1h           float64\nsnow_1h           float64\nclouds_all        float64\nweather_main         int8\nday                  int8\nmonth                int8\nyear                 int8\nweekday              int8\nhour                int32\nday_time             int8\ndtype: object"},"metadata":{}}]},{"cell_type":"markdown","source":"# 3. Data understanding - Make use of plots to build more understanding of the data**","metadata":{}},{"cell_type":"code","source":"# put some exploratory plots\n#create histogram for each column in DataFrame\nhistogram = df_new.hist(figsize = (10,10))\n\n# Save the histogram plot as an image file (e.g., PNG)\nplt.savefig('histogram.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:23.881296Z","iopub.execute_input":"2024-04-17T14:51:23.881710Z","iopub.status.idle":"2024-04-17T14:51:27.054302Z","shell.execute_reply.started":"2024-04-17T14:51:23.881680Z","shell.execute_reply":"2024-04-17T14:51:27.053441Z"},"trusted":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 16 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# put  some exploratory plots\n# distribution of traffic volume\ntv_box_plot = df_new.plot.box(y = \"traffic_volume\")\n# Save the histogram plot as an image file (e.g., PNG)\nplt.savefig('tv_box_plot.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:03:39.790989Z","iopub.execute_input":"2024-04-17T14:03:39.791479Z","iopub.status.idle":"2024-04-17T14:03:40.096627Z","shell.execute_reply.started":"2024-04-17T14:03:39.791442Z","shell.execute_reply":"2024-04-17T14:03:40.095436Z"},"trusted":true},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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Lk633XabGhoaWvU+cXFxLb42JiZGt912m9asWaPbb79da9as0aRJky7ohuNziYyMlHXGr6qcPHnyW3XR0dH2nyMiIs55rqmpSdI3AfCRRx7RxIkTvzVXbGxsi/sFQIABLkoxMTFqbGz8zrqPPvpId911l/793/9d0jcfyH/7299a/f6DBw/WoUOH9Je//KVFuzCTJ0/WTTfdpLKyMm3btk2PPfaYPTZgwADl5+fr+PHjdiD76KOPFBkZqX79+p11vp49e+ro0aP260AgoIqKipD7OtPQoUNVXl6uvn37tnouAMH4Cgm4CF1++eXavXu3/va3v+kf//iHvWNwph//+Md64403VFJSos8++0x33nnnOWtDcf311+u6665TZmamCgsLVVFRoc2bN+udd965oOuvu+46JSUlafLkyUpNTdWIESPsscmTJys2NlZZWVn6/PPP9f7772vOnDmaMmWK/bXPmW644Qb97ne/0wcffKDS0lJlZWV95w3FF2LBggX6n//5Hz3yyCMqKyvT/v379frrr2v+/Pmtnhu42BFggIvQ/fffr6ioKKWlpalnz57nvKfl6aefVrdu3fSzn/1Mt9xyi7xer4YOHdomPfz+97/X1VdfrTvuuENpaWmaN2/eBe0KSd98VXPHHXfos88+0+TJk4PGOnfurC1btuirr77S1Vdfrdtuu0033nijnn/++XPOl5eXp+uvv17jx49XRkaGJkyYoCuuuKJV65Mkr9ergoICvfvuu7r66qs1cuRILVmyRCkpKa2eG7jYRVhnfvELAADQzrEDAwAAjEOAAdCujBs3Luix49OPxx9/PNztAWgn+AoJQLty+PBhnThx4qxj3bt3V/fu3X/gjgC0RwQYAABgHL5CAgAAxiHAAAAA4xBgAACAcQgwAADAOAQYAABgHAIMAAAwDgEGAAAYhwADAACM838BvgmnZuEYFOkAAAAASUVORK5CYII="},"metadata":{}}]},{"cell_type":"code","source":"# distribution of day variable\nday_box_plot = df_new.plot.box(y = \"day\")\nplt.savefig('day_box_plot.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:03:41.473155Z","iopub.execute_input":"2024-04-17T14:03:41.474751Z","iopub.status.idle":"2024-04-17T14:03:41.744900Z","shell.execute_reply.started":"2024-04-17T14:03:41.474700Z","shell.execute_reply":"2024-04-17T14:03:41.743503Z"},"trusted":true},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"code","source":"# distribution of hour variable\nhour_box_plot = df_new.plot.box(y = \"hour\")\nplt.savefig('hour_box_plot.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:03:42.432746Z","iopub.execute_input":"2024-04-17T14:03:42.433148Z","iopub.status.idle":"2024-04-17T14:03:42.702528Z","shell.execute_reply.started":"2024-04-17T14:03:42.433120Z","shell.execute_reply":"2024-04-17T14:03:42.701117Z"},"trusted":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"markdown","source":"# 4. Find out which input features are the most important\n### Hint: Start out with df.corr(). Can visualise with seaborn library","metadata":{}},{"cell_type":"markdown","source":"## 4.a. Correlation Analysis","metadata":{}},{"cell_type":"code","source":"# calculate correlation\ncorrelation = df_new.corr()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:03:49.893629Z","iopub.execute_input":"2024-04-17T14:03:49.894161Z","iopub.status.idle":"2024-04-17T14:03:49.922991Z","shell.execute_reply.started":"2024-04-17T14:03:49.894121Z","shell.execute_reply":"2024-04-17T14:03:49.921247Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"# Plot the result\nplt.figure(figsize=(12, 10))\ncor_plot = sns.heatmap(correlation, annot=True, cmap='coolwarm')\nplt.savefig('cor_plot.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:03:53.213477Z","iopub.execute_input":"2024-04-17T14:03:53.213981Z","iopub.status.idle":"2024-04-17T14:03:54.568446Z","shell.execute_reply.started":"2024-04-17T14:03:53.213942Z","shell.execute_reply":"2024-04-17T14:03:54.566706Z"},"trusted":true},"execution_count":55,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# 5. Model development","metadata":{}},{"cell_type":"markdown","source":"## 5.a. Split data into train and avaluation set for assesing the model performenace","metadata":{}},{"cell_type":"code","source":"# 1. Divide dataframe into input and output\nx = df_new.drop(columns=['traffic_volume']) # Drop the column to be predicted\ny = df_new['traffic_volume'] # Choose Output column to be predicted\nfeature_names = x.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:35.761847Z","iopub.execute_input":"2024-04-17T14:51:35.762534Z","iopub.status.idle":"2024-04-17T14:51:35.770602Z","shell.execute_reply.started":"2024-04-17T14:51:35.762498Z","shell.execute_reply":"2024-04-17T14:51:35.769577Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"markdown","source":"## 5.b. Base model creation","metadata":{}},{"cell_type":"code","source":"# Load necessary library and functions\nfrom sklearn import tree\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:37.361201Z","iopub.execute_input":"2024-04-17T14:51:37.361742Z","iopub.status.idle":"2024-04-17T14:51:37.368235Z","shell.execute_reply.started":"2024-04-17T14:51:37.361708Z","shell.execute_reply":"2024-04-17T14:51:37.367438Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"# scaling the data\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\nx = scaler.fit_transform(x)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:38.120839Z","iopub.execute_input":"2024-04-17T14:51:38.121933Z","iopub.status.idle":"2024-04-17T14:51:38.138985Z","shell.execute_reply.started":"2024-04-17T14:51:38.121894Z","shell.execute_reply":"2024-04-17T14:51:38.137799Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"# spliting dataset for training and evaluartion\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=20)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T14:51:39.201240Z","iopub.execute_input":"2024-04-17T14:51:39.201729Z","iopub.status.idle":"2024-04-17T14:51:39.215645Z","shell.execute_reply.started":"2024-04-17T14:51:39.201690Z","shell.execute_reply":"2024-04-17T14:51:39.214525Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"models = []\nmodels.append((\"SVR\",SVR()))\nmodels.append((\"LinearRegression\",LinearRegression()))\nmodels.append((\"KNeighborsRegression\", KNeighborsRegressor()))\nmodels.append((\"SGDRegressor\", SGDRegressor()))\nmodels.append((\"BayesianRidge\", BayesianRidge()))\nmodels.append((\"DecisionTreeRegressor\", DecisionTreeRegressor()))\nmodels.append((\"GradientBoostingRegressor\", GradientBoostingRegressor()))\nmodels.append((\"RandomForestRegressor\", RandomForestRegressor()))\nmodels.append((\"XGBRegressor\", XGBRegressor()))\n\n# evaluate each model in turn\nresults = []\nnames = []\ntable = []\n\n# loop to fit each model and evaluate\nfor name, model in models:\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    results.append((r2, mse))\n    names.append(name)\n    table = table + [(name, r2, mse)]\n    \n# bar plot of the results\npd.options.display.float_format = '{:.4f}'.format\nresults = pd.DataFrame(table, columns=['Model', 'R2', 'MSE'])\nresults","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:12:15.141112Z","iopub.execute_input":"2024-04-16T19:12:15.142366Z","iopub.status.idle":"2024-04-16T19:13:13.215978Z","shell.execute_reply.started":"2024-04-16T19:12:15.142312Z","shell.execute_reply":"2024-04-16T19:13:13.214940Z"},"trusted":true},"execution_count":294,"outputs":[{"execution_count":294,"output_type":"execute_result","data":{"text/plain":"                       Model     R2          MSE\n0                        SVR 0.1953 3187710.8458\n1           LinearRegression 0.3232 2681101.2234\n2       KNeighborsRegression 0.7063 1163396.5928\n3               SGDRegressor 0.3213 2688483.8860\n4              BayesianRidge 0.3231 2681126.1147\n5      DecisionTreeRegressor 0.9340  261360.1047\n6  GradientBoostingRegressor 0.9017  389401.9654\n7      RandomForestRegressor 0.9652  137792.2456\n8               XGBRegressor 0.9725  108748.1525","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>R2</th>\n      <th>MSE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SVR</td>\n      <td>0.1953</td>\n      <td>3187710.8458</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LinearRegression</td>\n      <td>0.3232</td>\n      <td>2681101.2234</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>KNeighborsRegression</td>\n      <td>0.7063</td>\n      <td>1163396.5928</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SGDRegressor</td>\n      <td>0.3213</td>\n      <td>2688483.8860</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>BayesianRidge</td>\n      <td>0.3231</td>\n      <td>2681126.1147</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>DecisionTreeRegressor</td>\n      <td>0.9340</td>\n      <td>261360.1047</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>GradientBoostingRegressor</td>\n      <td>0.9017</td>\n      <td>389401.9654</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>RandomForestRegressor</td>\n      <td>0.9652</td>\n      <td>137792.2456</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>XGBRegressor</td>\n      <td>0.9725</td>\n      <td>108748.1525</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"model = RandomForestRegressor()\nmodel.fit(x_train, y_train)\n# predict the model\ny_pred = model.predict(x_test)\n# calculate the r2 score\nr2 = r2_score(y_test, y_pred)\n# calculate the mean squared error\nmse = mean_squared_error(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:15:51.417246Z","iopub.execute_input":"2024-04-16T19:15:51.417756Z","iopub.status.idle":"2024-04-16T19:16:01.985368Z","shell.execute_reply.started":"2024-04-16T19:15:51.417720Z","shell.execute_reply":"2024-04-16T19:16:01.984303Z"},"trusted":true},"execution_count":295,"outputs":[]},{"cell_type":"code","source":"# cross validation of the model with complete dataset\nscores = cross_val_score(model, x, y, cv=3)\nprint(scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:18:12.343584Z","iopub.execute_input":"2024-04-16T19:18:12.343944Z","iopub.status.idle":"2024-04-16T19:18:38.207648Z","shell.execute_reply.started":"2024-04-16T19:18:12.343916Z","shell.execute_reply":"2024-04-16T19:18:38.206292Z"},"trusted":true},"execution_count":298,"outputs":[{"name":"stdout","text":"[0.92805313 0.9287948  0.94174875]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check the R2 and MSE again\nprint(r2)\nprint(mse)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# percentage deviation from the mean\nprint(round(np.sqrt(mse)/df_new['traffic_volume'].mean()*100,2))","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:31.261294Z","iopub.execute_input":"2024-04-16T18:05:31.262571Z","iopub.status.idle":"2024-04-16T18:05:31.268803Z","shell.execute_reply.started":"2024-04-16T18:05:31.262508Z","shell.execute_reply":"2024-04-16T18:05:31.267925Z"},"trusted":true},"execution_count":153,"outputs":[{"name":"stdout","text":"11.28\n","output_type":"stream"}]},{"cell_type":"markdown","source":"#### function to fit XGBRegressor model and evaluate feature selection and other tuning","metadata":{}},{"cell_type":"code","source":"def evaluate_RandomForestRegressor(x, y):\n    # spliting dataset for training and evaluartion\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=20)\n    # Create and fit the RandomForestRegressor model\n    model = RandomForestRegressor()\n    model.fit(x_train, y_train)\n    \n    # Predict using the trained model\n    y_pred = model.predict(x_test)\n    \n    # Calculate R2 score and mean squared error\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    \n    # Calculate cross-validation scores\n    scores = cross_val_score(model, x, y, cv=3)\n    \n    # Calculate percentage deviation from the mean\n    percentage_deviation = round(np.sqrt(mse) / df_new['traffic_volume'].mean() * 100, 2)\n    \n    # Store all metrics in a dictionary\n    metrics = {\n        'R2 Score': r2,\n        'Mean Squared Error': mse,\n        'Cross-Validation Scores': scores,\n        'Percentage Deviation from Mean': percentage_deviation\n    }\n    \n    return metrics","metadata":{"execution":{"iopub.status.busy":"2024-04-16T18:05:46.614343Z","iopub.execute_input":"2024-04-16T18:05:46.615624Z","iopub.status.idle":"2024-04-16T18:05:46.625436Z","shell.execute_reply.started":"2024-04-16T18:05:46.615577Z","shell.execute_reply":"2024-04-16T18:05:46.624302Z"},"trusted":true},"execution_count":155,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_RandomForestRegressor(x, y)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T17:40:40.016128Z","iopub.execute_input":"2024-04-16T17:40:40.016631Z","iopub.status.idle":"2024-04-16T17:40:41.156919Z","shell.execute_reply.started":"2024-04-16T17:40:40.016598Z","shell.execute_reply":"2024-04-16T17:40:41.155555Z"},"trusted":true},"execution_count":95,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9698154721650472, 'Mean Squared Error': 119055.1311857447, 'Cross-Validation Scores': array([0.92310867, 0.93052111, 0.94146871]), 'Percentage Deviation from Mean': 10.6}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Mutual_info feature selection","metadata":{}},{"cell_type":"code","source":"# mutual_info_regression based selection of features\nmi = mutual_info_regression(x_train, y_train)\nmi = pd.Series(mi)\nmi.index = feature_names\nmi = mi.sort_values(ascending=False)\nmi.plot.bar()\nplt.savefig('mi.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T15:53:25.892546Z","iopub.execute_input":"2024-04-17T15:53:25.893016Z","iopub.status.idle":"2024-04-17T15:53:28.641055Z","shell.execute_reply.started":"2024-04-17T15:53:25.892981Z","shell.execute_reply":"2024-04-17T15:53:28.640095Z"},"trusted":true},"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# display the best selected features using mutual_info_regression\nx_mi = SelectPercentile(mutual_info_regression, percentile=70).fit(x_train, y_train)\nselected_features_mask = x_mi.get_support()\nselected_features = feature_names[selected_features_mask].tolist()\nprint(\"Selected Features:\", selected_features)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:51.061743Z","iopub.execute_input":"2024-04-16T16:42:51.062354Z","iopub.status.idle":"2024-04-16T16:42:53.454977Z","shell.execute_reply.started":"2024-04-16T16:42:51.062323Z","shell.execute_reply":"2024-04-16T16:42:53.453789Z"},"trusted":true},"execution_count":70,"outputs":[{"name":"stdout","text":"Selected Features: ['temp', 'clouds_all', 'day', 'month', 'year', 'weekday', 'hour', 'day_time']\n","output_type":"stream"}]},{"cell_type":"code","source":"# subset the dataset using selected features\nx_mi = SelectPercentile(mutual_info_regression, percentile=70).fit_transform(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:55.422320Z","iopub.execute_input":"2024-04-16T16:42:55.423226Z","iopub.status.idle":"2024-04-16T16:42:57.900288Z","shell.execute_reply.started":"2024-04-16T16:42:55.423192Z","shell.execute_reply":"2024-04-16T16:42:57.899200Z"},"trusted":true},"execution_count":71,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_RandomForestRegressor(x_mi, y_train)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:59.587338Z","iopub.execute_input":"2024-04-16T16:42:59.587712Z","iopub.status.idle":"2024-04-16T16:43:00.328047Z","shell.execute_reply.started":"2024-04-16T16:42:59.587686Z","shell.execute_reply":"2024-04-16T16:43:00.327142Z"},"trusted":true},"execution_count":72,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.9656273468841373, 'Mean Squared Error': 133272.57017553216, 'Cross-Validation Scores': array([0.96480622, 0.96424541, 0.95989378]), 'Percentage Deviation from Mean': 11.21}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Selecting features using f_regression","metadata":{}},{"cell_type":"code","source":"# display the best features using f_regression\nx_f = f_regression(x_train, y_train)\nx_f = pd.Series(x_f[0])\nx_f.index = feature_names\nx_f = x_f.sort_values(ascending=False)\nx_f.plot.bar()\nplt.savefig('f_reg.png')","metadata":{"execution":{"iopub.status.busy":"2024-04-17T15:54:38.772189Z","iopub.execute_input":"2024-04-17T15:54:38.772629Z","iopub.status.idle":"2024-04-17T15:54:39.217723Z","shell.execute_reply.started":"2024-04-17T15:54:38.772587Z","shell.execute_reply":"2024-04-17T15:54:39.216362Z"},"trusted":true},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# subset the dataset using selected features\nx_f = SelectPercentile(f_regression, percentile=60 ).fit_transform(x_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:08.366819Z","iopub.execute_input":"2024-04-16T16:43:08.367270Z","iopub.status.idle":"2024-04-16T16:43:08.381147Z","shell.execute_reply.started":"2024-04-16T16:43:08.367236Z","shell.execute_reply":"2024-04-16T16:43:08.379583Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"evaluation_metrics = evaluate_RandomForestRegressor(x_f, y_train)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:10.726829Z","iopub.execute_input":"2024-04-16T16:43:10.727509Z","iopub.status.idle":"2024-04-16T16:43:11.403327Z","shell.execute_reply.started":"2024-04-16T16:43:10.727473Z","shell.execute_reply":"2024-04-16T16:43:11.402478Z"},"trusted":true},"execution_count":75,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.944669474729565, 'Mean Squared Error': 214532.21219487552, 'Cross-Validation Scores': array([0.94521279, 0.94479329, 0.93781204]), 'Percentage Deviation from Mean': 14.22}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Unsupervised ","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\nx_pca = PCA(n_components=9, svd_solver='full').fit_transform(x_train)\nevaluation_metrics = evaluate_RandomForestRegressor(x_pca, y_train)\nprint(evaluation_metrics)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:43:26.150010Z","iopub.execute_input":"2024-04-16T16:43:26.150593Z","iopub.status.idle":"2024-04-16T16:43:28.122321Z","shell.execute_reply.started":"2024-04-16T16:43:26.150564Z","shell.execute_reply":"2024-04-16T16:43:28.121470Z"},"trusted":true},"execution_count":77,"outputs":[{"name":"stdout","text":"{'R2 Score': 0.5565759676724207, 'Mean Squared Error': 1719281.3213077914, 'Cross-Validation Scores': array([0.53416057, 0.53846765, 0.53979648]), 'Percentage Deviation from Mean': 40.27}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Hyperparameter tuning","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n\n# Define the hyperparameter grid for GridSearchCV\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [None, 5, 10, 15],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\n# Create a RandomForestRegressor model\nrf = RandomForestRegressor(random_state=42)\n\n# Perform GridSearchCV for hyperparameter tuning\ngrid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)\ngrid_search.fit(x_train, y_train)\n\n# Get the best parameters and best estimator from GridSearchCV\nbest_params = grid_search.best_params_\nbest_estimator = grid_search.best_estimator_\n\n# Evaluate the model on the test set\ny_pred = best_estimator.predict(x_test)\nmse = mean_squared_error(y_test, y_pred)\naccuracy = best_estimator.score(Xx_test, y_test)\n\n# Print the results\nprint(f\"Best Parameters: {best_params}\")\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-17T15:23:07.486921Z","iopub.execute_input":"2024-04-17T15:23:07.487314Z","iopub.status.idle":"2024-04-17T15:52:28.254338Z","shell.execute_reply.started":"2024-04-17T15:23:07.487284Z","shell.execute_reply":"2024-04-17T15:52:28.252457Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 108 candidates, totalling 540 fits\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=  12.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  25.4s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  37.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  37.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  21.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  32.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   9.4s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   9.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  18.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  29.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=  10.3s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=  10.9s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  20.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  21.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  31.8s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=  10.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=  20.5s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  30.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   9.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   9.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  18.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  18.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  27.4s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   8.9s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=  17.4s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  26.8s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   8.8s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   9.3s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=  17.4s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=  18.3s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  27.2s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   8.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  17.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  26.3s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   4.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   7.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   7.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   7.7s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   7.3s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  11.3s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  11.0s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  10.5s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  11.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.9s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  10.7s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  13.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  13.0s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  20.1s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  12.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  19.6s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  13.2s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  12.9s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=  12.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  25.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  24.7s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  37.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  21.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  21.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  32.7s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=  10.0s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  18.8s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  28.4s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  28.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  21.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  31.5s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=  10.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   9.9s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=  20.5s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=  20.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  30.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   9.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  18.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  27.8s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   8.8s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   9.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=  17.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=  18.2s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  26.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   8.7s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=  17.9s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  26.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   9.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   8.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  17.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  17.8s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  26.2s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  10.9s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   7.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   7.3s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  11.2s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  11.3s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  11.3s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  10.8s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   4.3s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.7s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  10.7s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   6.6s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  13.3s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  19.6s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   6.6s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  12.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  13.7s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  19.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  13.2s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  19.6s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   6.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=  12.4s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=  12.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  24.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  38.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=  10.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=  10.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  21.7s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  32.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   9.3s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   9.7s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  19.0s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  19.2s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  28.8s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=  10.2s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  20.9s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  30.8s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  31.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=  20.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  30.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   9.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   9.3s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  18.0s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  27.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  27.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=  17.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  26.7s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   8.8s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   9.3s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=  17.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  26.9s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  26.3s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  17.2s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  26.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   4.3s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   7.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   7.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   4.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   7.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  11.2s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  10.9s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  11.3s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   4.3s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  10.7s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  13.6s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  19.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   7.1s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  12.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  19.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  19.3s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  13.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  19.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   6.8s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  12.9s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=  12.5s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  25.4s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  37.7s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=  10.9s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=  10.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=  10.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  21.9s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  32.6s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  32.4s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  19.1s\n[CV] END max_depth=None, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  28.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=  10.7s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=  10.3s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  20.9s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  30.8s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   9.9s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   9.9s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=  20.7s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  30.6s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  30.4s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  18.1s\n[CV] END max_depth=None, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  27.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   8.7s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   9.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=  17.4s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  26.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  26.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=  17.9s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  26.6s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   9.1s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   8.5s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  17.0s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  25.7s\n[CV] END max_depth=None, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  25.9s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  10.7s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   4.3s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  10.8s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   7.7s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   7.0s\n[CV] END max_depth=5, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=  11.4s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=  11.1s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  10.8s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   4.0s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=  10.8s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   7.1s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=5, n_estimators=300; total time=  10.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   3.6s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   3.5s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.5s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.2s\n[CV] END max_depth=5, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=  10.7s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   6.5s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  13.7s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  19.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  20.0s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=  12.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  19.9s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=100; total time=   6.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  13.4s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  19.3s\n[CV] END max_depth=10, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  19.9s\n[CV] END max_depth=10, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=  13.0s\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[59], line 16\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Perform GridSearchCV for hyperparameter tuning\u001b[39;00m\n\u001b[1;32m     15\u001b[0m grid_search \u001b[38;5;241m=\u001b[39m GridSearchCV(estimator\u001b[38;5;241m=\u001b[39mrf, param_grid\u001b[38;5;241m=\u001b[39mparam_grid, cv\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5\u001b[39m, n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m)\n\u001b[0;32m---> 16\u001b[0m \u001b[43mgrid_search\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# Get the best parameters and best estimator from GridSearchCV\u001b[39;00m\n\u001b[1;32m     19\u001b[0m best_params \u001b[38;5;241m=\u001b[39m grid_search\u001b[38;5;241m.\u001b[39mbest_params_\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:874\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    868\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    869\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    870\u001b[0m     )\n\u001b[1;32m    872\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 874\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    878\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:1388\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1387\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1388\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:821\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    813\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbose \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    814\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\n\u001b[1;32m    815\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFitting \u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m folds for each of \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m candidates,\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    816\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m totalling \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m fits\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    817\u001b[0m             n_splits, n_candidates, n_candidates \u001b[38;5;241m*\u001b[39m n_splits\n\u001b[1;32m    818\u001b[0m         )\n\u001b[1;32m    819\u001b[0m     )\n\u001b[0;32m--> 821\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mparallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    822\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_fit_and_score\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    823\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclone\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbase_estimator\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    824\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    825\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    826\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtrain\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    827\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtest\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtest\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    828\u001b[0m \u001b[43m        \u001b[49m\u001b[43mparameters\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mparameters\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    829\u001b[0m \u001b[43m        \u001b[49m\u001b[43msplit_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_splits\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    830\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcandidate_progress\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_candidates\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    831\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_and_score_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    832\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    833\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcand_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparameters\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43msplit_idx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mproduct\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    834\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcandidate_params\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msplit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    836\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    838\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    839\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    840\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo fits were performed. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    841\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWas the CV iterator empty? \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    842\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWere there no candidates?\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    843\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/parallel.py:63\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     58\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[1;32m     59\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m     60\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[1;32m     62\u001b[0m )\n\u001b[0;32m---> 63\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__call__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43miterable_with_config\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1952\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1946\u001b[0m \u001b[38;5;66;03m# The first item from the output is blank, but it makes the interpreter\u001b[39;00m\n\u001b[1;32m   1947\u001b[0m \u001b[38;5;66;03m# progress until it enters the Try/Except block of the generator and\u001b[39;00m\n\u001b[1;32m   1948\u001b[0m \u001b[38;5;66;03m# reach the first `yield` statement. This starts the aynchronous\u001b[39;00m\n\u001b[1;32m   1949\u001b[0m \u001b[38;5;66;03m# dispatch of the tasks to the workers.\u001b[39;00m\n\u001b[1;32m   1950\u001b[0m \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[0;32m-> 1952\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43moutput\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1595\u001b[0m, in \u001b[0;36mParallel._get_outputs\u001b[0;34m(self, iterator, pre_dispatch)\u001b[0m\n\u001b[1;32m   1592\u001b[0m     \u001b[38;5;28;01myield\u001b[39;00m\n\u001b[1;32m   1594\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backend\u001b[38;5;241m.\u001b[39mretrieval_context():\n\u001b[0;32m-> 1595\u001b[0m         \u001b[38;5;28;01myield from\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_retrieve()\n\u001b[1;32m   1597\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mGeneratorExit\u001b[39;00m:\n\u001b[1;32m   1598\u001b[0m     \u001b[38;5;66;03m# The generator has been garbage collected before being fully\u001b[39;00m\n\u001b[1;32m   1599\u001b[0m     \u001b[38;5;66;03m# consumed. This aborts the remaining tasks if possible and warn\u001b[39;00m\n\u001b[1;32m   1600\u001b[0m     \u001b[38;5;66;03m# the user if necessary.\u001b[39;00m\n\u001b[1;32m   1601\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/joblib/parallel.py:1707\u001b[0m, in \u001b[0;36mParallel._retrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1702\u001b[0m \u001b[38;5;66;03m# If the next job is not ready for retrieval yet, we just wait for\u001b[39;00m\n\u001b[1;32m   1703\u001b[0m \u001b[38;5;66;03m# async callbacks to progress.\u001b[39;00m\n\u001b[1;32m   1704\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ((\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m\n\u001b[1;32m   1705\u001b[0m     (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jobs[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mget_status(\n\u001b[1;32m   1706\u001b[0m         timeout\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtimeout) \u001b[38;5;241m==\u001b[39m TASK_PENDING)):\n\u001b[0;32m-> 1707\u001b[0m     \u001b[43mtime\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msleep\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m0.01\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1708\u001b[0m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[1;32m   1710\u001b[0m \u001b[38;5;66;03m# We need to be careful: the job list can be filling up as\u001b[39;00m\n\u001b[1;32m   1711\u001b[0m \u001b[38;5;66;03m# we empty it and Python list are not thread-safe by\u001b[39;00m\n\u001b[1;32m   1712\u001b[0m \u001b[38;5;66;03m# default hence the use of the lock\u001b[39;00m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"# Instantiate XGBoost regressor with the best parameters directly\nbest_xgb_model = XGBRegressor(**best_params)\n\n# Train the model using the training data\nbest_xgb_model.fit(x, y)\n\n# Evaluate the model on the testing set\ntest_score = best_xgb_model.score(x_test, y_test)\nprint(\"Test Score (R-squared):\", test_score)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:06:34.665985Z","iopub.execute_input":"2024-04-16T19:06:34.666531Z","iopub.status.idle":"2024-04-16T19:06:34.717870Z","shell.execute_reply.started":"2024-04-16T19:06:34.666479Z","shell.execute_reply":"2024-04-16T19:06:34.714876Z"},"trusted":true},"execution_count":238,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[238], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Instantiate XGBoost regressor with the best parameters directly\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m best_xgb_model \u001b[38;5;241m=\u001b[39m \u001b[43mRandomForestRegressor\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mbest_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Train the model using the training data\u001b[39;00m\n\u001b[1;32m      5\u001b[0m best_xgb_model\u001b[38;5;241m.\u001b[39mfit(x, y)\n","\u001b[0;31mTypeError\u001b[0m: RandomForestRegressor.__init__() got an unexpected keyword argument 'learning_rate'"],"ename":"TypeError","evalue":"RandomForestRegressor.__init__() got an unexpected keyword argument 'learning_rate'","output_type":"error"}]},{"cell_type":"code","source":"# Instantiate XGBoost regressor with the best parameters directly\nbest_xgb_model = RandomForestRegressor()\n\n# Train the model using the training data\nbest_xgb_model.fit(x, y)\n\n# Evaluate the model on the testing set\ntest_score = best_xgb_model.score(x_test, y_test)\nprint(\"Test Score (R-squared):\", test_score)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:07:17.046249Z","iopub.execute_input":"2024-04-16T19:07:17.046771Z","iopub.status.idle":"2024-04-16T19:07:25.739748Z","shell.execute_reply.started":"2024-04-16T19:07:17.046737Z","shell.execute_reply":"2024-04-16T19:07:25.738618Z"},"trusted":true},"execution_count":239,"outputs":[{"name":"stdout","text":"Test Score (R-squared): 0.9935267631943931\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=300; total time=   1.1s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=300; total time=   1.7s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=300; total time=   1.8s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=300; total time=   1.4s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   1.6s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=300; total time=   2.4s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=300; total time=   1.6s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=300; total time=   2.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=300; total time=   1.1s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.7s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.7s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   1.4s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=300; total time=   1.8s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.6s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=300; total time=   1.4s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   1.6s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=300; total time=   2.4s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=300; total time=   1.6s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=100; total time=   1.1s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=100; total time=   1.0s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=300; total time=   2.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=300; total time=   1.1s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.9s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   1.3s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=300; total time=   1.8s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.6s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=300; total time=   1.3s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=300; total time=   1.4s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   1.6s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=300; total time=   2.4s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=200; total time=   1.0s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=300; total time=   1.7s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=100; total time=   1.1s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=300; total time=   2.1s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=300; total time=   1.1s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=300; total time=   1.1s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   1.4s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   1.3s\n[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=300; total time=   1.8s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=300; total time=   1.4s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.8s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   1.6s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=300; total time=   2.2s\n[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=300; total time=   2.4s\n[CV] END .learning_rate=0.001, max_depth=3, n_estimators=300; total time=   0.8s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=100; total time=   0.5s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=300; total time=   1.4s\n[CV] END .learning_rate=0.001, max_depth=5, n_estimators=300; total time=   2.0s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=200; total time=   1.5s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=300; total time=   2.1s\n[CV] END .learning_rate=0.001, max_depth=7, n_estimators=300; total time=   1.8s\n","output_type":"stream"}]},{"cell_type":"code","source":"scores = cross_val_score(best_xgb_model, x, y, cv=3)\nprint(scores)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:03:15.340425Z","iopub.execute_input":"2024-04-16T19:03:15.341338Z","iopub.status.idle":"2024-04-16T19:03:17.592701Z","shell.execute_reply.started":"2024-04-16T19:03:15.341301Z","shell.execute_reply":"2024-04-16T19:03:17.591767Z"},"trusted":true},"execution_count":236,"outputs":[{"name":"stdout","text":"[0.96559608 0.96939878 0.96293256]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Testing and Creating Output CSV","metadata":{"id":"7Zb-W-KzvyzX"}},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/123ofai-predict-the-traffic-volume/test_set_nogt.csv')\n# Convert 'date_time' to datetime format\ntest['date_time'] = pd.to_datetime(test['date_time'], errors='coerce', dayfirst=True)\n\n# Filter rows where 'holiday' is not NaN\nisHoliday = test['holiday'].notna().copy()\n\n# Extract date and holiday values where 'holiday' is not NaN\ndate = test.loc[isHoliday, 'date_time'].dt.date.values\nholiday = test.loc[isHoliday, 'holiday'].values\n\n# Create mapping dictionary\nmapping = dict(zip(date, holiday))\nmapping.pop(pd.NaT, None)\n\n# Map 'date_time' to 'holiday' using the mapping dictionary, filling NaN values with corresponding holidays\ntest.loc[:,'holiday'] = test['date_time'].dt.date.map(mapping)\n\n# Replace NaN with 0 and other values with 1 in holiday\ntest.loc[:, 'holiday'] = np.where(test['holiday'].isnull(), 0, 1)\ntest['clouds_all'] = test['clouds_all'].astype(float)\n\ntest['day'] = test.date_time.dt.day\ntest['month'] = test.date_time.dt.month_name()\ntest['year'] = test.date_time.dt.year\ntest['weekday'] = test.date_time.dt.day_name()\ntest['hour'] = test.date_time.dt.hour\n\n# Binning hour feature\n\ndef getDayTime(hour):\n    \n    if hour<4:\n        return \"Late Night\"\n    elif hour<8:\n        return \"Early Morning\"\n    elif hour<12:\n        return \"Morning\"\n    elif hour<16:\n        return \"Afternoon\"\n    elif hour<19:\n        return \"Evening\"\n    elif hour<24:\n        return \"Night\"\n    \ntest['day_time'] = test[['hour']].applymap(getDayTime)\ntest['holiday'] = test['holiday'].astype(int)\n\n# hour is converted to float from string \ntest['hour'] = test['hour'].astype(np.int32)\n\n\n\ntest['weather_main'] = test['weather_main'].astype('category').cat.codes + 1\ntest['day'] = test['day'].astype('category').cat.codes + 1\ntest['month'] = test['month'].astype('category').cat.codes + 1\ntest['year'] = test['year'].astype('category').cat.codes + 1\ntest['day_time'] = test['day_time'].astype('category').cat.codes + 1\ntest['weekday'] = test['weekday'].astype('category').cat.codes + 1\n\ntest = test.drop(columns=['date_time','weather_description'])\n\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the data using StandardScaler\ntest_1 = scaler.fit_transform(test)\n\n\n\n\n# 4. Predict and obtain results from the model\ny_pred = best_xgb_model.predict(test_1)\n\n# 5. Save results to CSV\nsubmission = pd.DataFrame({'ID': test.index, 'traffic_volume' : y_pred})\nsubmission.to_csv('output_submission_eval8.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T19:07:39.183226Z","iopub.execute_input":"2024-04-16T19:07:39.183697Z","iopub.status.idle":"2024-04-16T19:07:39.671729Z","shell.execute_reply.started":"2024-04-16T19:07:39.183663Z","shell.execute_reply":"2024-04-16T19:07:39.669979Z"},"trusted":true},"execution_count":240,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}